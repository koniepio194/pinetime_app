
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20004630 	.word	0x20004630
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000b9d 	.word	0x00000b9d
   8:	00003309 	.word	0x00003309
		if (fdtable[fd].obj == NULL) {
   c:	00000b15 	.word	0x00000b15
  10:	00000b15 	.word	0x00000b15
  14:	00000b15 	.word	0x00000b15
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00000b15 	.word	0x00000b15
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00000b15 	.word	0x00000b15
	errno = ENFILE;
  20:	00000b15 	.word	0x00000b15
	return -1;
  24:	00000b15 	.word	0x00000b15
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00000b15 	.word	0x00000b15
  2c:	00000a0d 	.word	0x00000a0d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00000b15 	.word	0x00000b15
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00000b15 	.word	0x00000b15
  38:	000009b9 	.word	0x000009b9
  3c:	000032f5 	.word	0x000032f5

00000040 <_irq_vector_table>:
  40:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  50:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  60:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  70:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  80:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  90:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  a0:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  b0:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  c0:	00000b5d 00000b5d 00000b5d 00000b5d     ]...]...]...]...
  d0:	00000b5d 00000b5d 00000b5d              ]...]...]...

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_IDLE_STACK_SIZE+0x72>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_IDLE_STACK_SIZE+0x30>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_IDLE_STACK_SIZE+0x5c>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_IDLE_STACK_SIZE+0x6e>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_IDLE_STACK_SIZE+0x76>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_IDLE_STACK_SIZE+0xb0>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e6:	d202      	bcs.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_IDLE_STACK_SIZE+0x6e>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_IDLE_STACK_SIZE+0x6e>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_IDLE_STACK_SIZE+0x6e>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_IDLE_STACK_SIZE+0x30>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_IDLE_STACK_SIZE+0x5c>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_IDLE_STACK_SIZE+0xb0>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <main>:
	gpio_pin_configure(dev, LED, GPIO_DIR_OUT);
	gpio_pin_write(dev, LED, 0);
}

void main(void)
{
     3d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3d4:	b08b      	sub	sp, #44	; 0x2c
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3d6:	4854      	ldr	r0, [pc, #336]	; (528 <CONFIG_MAIN_STACK_SIZE+0x128>)
     3d8:	f001 fe0a 	bl	1ff0 <z_impl_device_get_binding>
     3dc:	4604      	mov	r4, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     3de:	6843      	ldr	r3, [r0, #4]
     3e0:	2216      	movs	r2, #22
     3e2:	681d      	ldr	r5, [r3, #0]
     3e4:	2100      	movs	r1, #0
     3e6:	2301      	movs	r3, #1
     3e8:	47a8      	blx	r5
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     3ea:	6863      	ldr	r3, [r4, #4]
     3ec:	685d      	ldr	r5, [r3, #4]
     3ee:	2300      	movs	r3, #0
     3f0:	2216      	movs	r2, #22
     3f2:	4619      	mov	r1, r3
     3f4:	4620      	mov	r0, r4
     3f6:	47a8      	blx	r5
     3f8:	484c      	ldr	r0, [pc, #304]	; (52c <CONFIG_MAIN_STACK_SIZE+0x12c>)
     3fa:	f001 fdf9 	bl	1ff0 <z_impl_device_get_binding>
	const size_t rgb_size = 3;
#endif

	display_dev = device_get_binding(DT_INST_0_SITRONIX_ST7789V_LABEL);

	if (display_dev == NULL) {
     3fe:	4604      	mov	r4, r0
     400:	2800      	cmp	r0, #0
     402:	f000 808e 	beq.w	522 <CONFIG_MAIN_STACK_SIZE+0x122>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	api->get_capabilities(dev, capabilities);
     406:	6843      	ldr	r3, [r0, #4]
     408:	a906      	add	r1, sp, #24
     40a:	69db      	ldr	r3, [r3, #28]
     40c:	4798      	blx	r3
	x3 = 0;
        y3 = capabilities.y_resolution - h;
//	y3 = 200;

	/* Allocate rectangular buffer for corner data */
	u8_t *buf = k_malloc(buf_size);
     40e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
	x1 = capabilities.x_resolution - w;
     412:	f8bd 9018 	ldrh.w	r9, [sp, #24]
	y2 = capabilities.y_resolution - h;
     416:	f8bd 601a 	ldrh.w	r6, [sp, #26]
	u8_t *buf = k_malloc(buf_size);
     41a:	f001 ff49 	bl	22b0 <k_malloc>

	if (buf == NULL) {
     41e:	4605      	mov	r5, r0
     420:	2800      	cmp	r0, #0
     422:	d07e      	beq.n	522 <CONFIG_MAIN_STACK_SIZE+0x122>
	}

	/* Clear frame buffer before enabling LCD, reuse corner buffer
	 */
	int h_step;
	(void)memset(buf, 0, buf_size);
     424:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     428:	2100      	movs	r1, #0
     42a:	f002 ffb3 	bl	3394 <memset>
	h_step = (w * h) / capabilities.x_resolution;
     42e:	f8bd 3018 	ldrh.w	r3, [sp, #24]

	buf_desc.buf_size = buf_size;
	buf_desc.pitch = capabilities.x_resolution;
     432:	f8ad 3014 	strh.w	r3, [sp, #20]
	buf_desc.buf_size = buf_size;
     436:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
	h_step = (w * h) / capabilities.x_resolution;
     43a:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	buf_desc.buf_size = buf_size;
     43e:	9203      	str	r2, [sp, #12]
	h_step = (w * h) / capabilities.x_resolution;
     440:	fbb8 f8f3 	udiv	r8, r8, r3
	buf_desc.width = capabilities.x_resolution;
     444:	f8ad 3010 	strh.w	r3, [sp, #16]
	buf_desc.height = h_step;
     448:	f8ad 8012 	strh.w	r8, [sp, #18]

	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
     44c:	2700      	movs	r7, #0
     44e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     452:	42bb      	cmp	r3, r7
     454:	dc33      	bgt.n	4be <CONFIG_MAIN_STACK_SIZE+0xbe>
	return api->blanking_off(dev);
     456:	6863      	ldr	r3, [r4, #4]
     458:	4620      	mov	r0, r4
     45a:	685b      	ldr	r3, [r3, #4]
     45c:	4798      	blx	r3
	}

	display_blanking_off(display_dev);

	buf_desc.pitch = w;
	buf_desc.width = w;
     45e:	f04f 133c 	mov.w	r3, #3932220	; 0x3c003c
     462:	9304      	str	r3, [sp, #16]
	buf_desc.height = h;

	int grey_count = 0;
	size_t cnt = 0;
     464:	2700      	movs	r7, #0
	buf_desc.pitch = w;
     466:	233c      	movs	r3, #60	; 0x3c
     468:	3e3c      	subs	r6, #60	; 0x3c
     46a:	f8ad 3014 	strh.w	r3, [sp, #20]
	int grey_count = 0;
     46e:	46b8      	mov	r8, r7
     470:	b2b6      	uxth	r6, r6
		u16_t color_r;
		u16_t color_g;
		u16_t color_b;
		u16_t color_rgb;

		color_r = (color == 0) ? 0xF800U : 0U;
     472:	f017 0203 	ands.w	r2, r7, #3
     476:	d043      	beq.n	500 <CONFIG_MAIN_STACK_SIZE+0x100>
		color_g = (color == 1) ? 0x07E0U : 0U;
     478:	2a01      	cmp	r2, #1
     47a:	d049      	beq.n	510 <CONFIG_MAIN_STACK_SIZE+0x110>
		color_b = (color == 2) ? 0x001FU : 0U;
     47c:	2a02      	cmp	r2, #2
     47e:	d04c      	beq.n	51a <CONFIG_MAIN_STACK_SIZE+0x11a>
		color_rgb = color_r + color_g + color_b;
		if (color == 3) {
			u16_t t = grey_count & 0x1f;
     480:	f008 011f 	and.w	r1, r8, #31
			/* shift the green an extra bit, it has 6 bits */
			color_rgb = t << 11 | t << (5+1) | t;
     484:	018b      	lsls	r3, r1, #6
     486:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
     48a:	430b      	orrs	r3, r1
			grey_count++;
     48c:	f108 0801 	add.w	r8, r8, #1
		}

		for (size_t idx = 0; idx < buf_size; idx += rgb_size) {
			*(buf + idx + 0) = (color_rgb >> 8) & 0xFFU;
     490:	ea4f 2c13 	mov.w	ip, r3, lsr #8
     494:	2100      	movs	r1, #0
			*(buf + idx + 1) = (color_rgb >> 0) & 0xFFU;
     496:	1c68      	adds	r0, r5, #1
			*(buf + idx + 0) = (color_rgb >> 8) & 0xFFU;
     498:	f805 c011 	strb.w	ip, [r5, r1, lsl #1]
			*(buf + idx + 1) = (color_rgb >> 0) & 0xFFU;
     49c:	f800 3011 	strb.w	r3, [r0, r1, lsl #1]
		for (size_t idx = 0; idx < buf_size; idx += rgb_size) {
     4a0:	3101      	adds	r1, #1
     4a2:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
     4a6:	d1f7      	bne.n	498 <CONFIG_MAIN_STACK_SIZE+0x98>
			*(buf + idx + 1) = color_rgb >> 8;
			*(buf + idx + 2) = color_rgb >> 0;
		}
#endif

		switch (cnt % 4) {
     4a8:	2a02      	cmp	r2, #2
     4aa:	d01f      	beq.n	4ec <CONFIG_MAIN_STACK_SIZE+0xec>
     4ac:	2a03      	cmp	r2, #3
     4ae:	d023      	beq.n	4f8 <CONFIG_MAIN_STACK_SIZE+0xf8>
     4b0:	2a01      	cmp	r2, #1
     4b2:	d00d      	beq.n	4d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
		case 0:
			/* top left, red */
			display_write(display_dev, x0, y0, &buf_desc, buf);
     4b4:	9500      	str	r5, [sp, #0]
     4b6:	ab03      	add	r3, sp, #12
     4b8:	2200      	movs	r2, #0
			/* bottom right, blue */
			display_write(display_dev, x2, y2, &buf_desc, buf);
			break;
		case 3:
			/* bottom left, alternating grey */
			display_write(display_dev, x3, y3, &buf_desc, buf);
     4ba:	2100      	movs	r1, #0
     4bc:	e00e      	b.n	4dc <CONFIG_MAIN_STACK_SIZE+0xdc>
		display_write(display_dev, 0, idx, &buf_desc,  buf);
     4be:	b2ba      	uxth	r2, r7
     4c0:	9500      	str	r5, [sp, #0]
     4c2:	ab03      	add	r3, sp, #12
     4c4:	2100      	movs	r1, #0
     4c6:	4620      	mov	r0, r4
     4c8:	f002 fc06 	bl	2cd8 <display_write>
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
     4cc:	4447      	add	r7, r8
     4ce:	e7be      	b.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
			display_write(display_dev, x1, y1, &buf_desc, buf);
     4d0:	f1a9 013c 	sub.w	r1, r9, #60	; 0x3c
     4d4:	9500      	str	r5, [sp, #0]
     4d6:	ab03      	add	r3, sp, #12
     4d8:	2200      	movs	r2, #0
			display_write(display_dev, x2, y2, &buf_desc, buf);
     4da:	b289      	uxth	r1, r1
			display_write(display_dev, x3, y3, &buf_desc, buf);
     4dc:	4620      	mov	r0, r4
     4de:	f002 fbfb 	bl	2cd8 <display_write>
			break;
		}
		++cnt;
     4e2:	3701      	adds	r7, #1
	return z_impl_k_sleep(ms);
     4e4:	2064      	movs	r0, #100	; 0x64
     4e6:	f002 f9e1 	bl	28ac <z_impl_k_sleep>
     4ea:	e7c2      	b.n	472 <CONFIG_MAIN_STACK_SIZE+0x72>
			display_write(display_dev, x2, y2, &buf_desc, buf);
     4ec:	f1a9 013c 	sub.w	r1, r9, #60	; 0x3c
     4f0:	9500      	str	r5, [sp, #0]
     4f2:	ab03      	add	r3, sp, #12
     4f4:	4632      	mov	r2, r6
     4f6:	e7f0      	b.n	4da <CONFIG_MAIN_STACK_SIZE+0xda>
			display_write(display_dev, x3, y3, &buf_desc, buf);
     4f8:	9500      	str	r5, [sp, #0]
     4fa:	ab03      	add	r3, sp, #12
     4fc:	4632      	mov	r2, r6
     4fe:	e7dc      	b.n	4ba <CONFIG_MAIN_STACK_SIZE+0xba>
		color_g = (color == 1) ? 0x07E0U : 0U;
     500:	4611      	mov	r1, r2
		color_r = (color == 0) ? 0xF800U : 0U;
     502:	f44f 4378 	mov.w	r3, #63488	; 0xf800
		color_b = (color == 2) ? 0x001FU : 0U;
     506:	4610      	mov	r0, r2
		color_rgb = color_r + color_g + color_b;
     508:	440b      	add	r3, r1
     50a:	4403      	add	r3, r0
     50c:	b29b      	uxth	r3, r3
     50e:	e7bf      	b.n	490 <CONFIG_MAIN_STACK_SIZE+0x90>
		color_r = (color == 0) ? 0xF800U : 0U;
     510:	2300      	movs	r3, #0
		color_g = (color == 1) ? 0x07E0U : 0U;
     512:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
		color_b = (color == 2) ? 0x001FU : 0U;
     516:	4618      	mov	r0, r3
     518:	e7f6      	b.n	508 <CONFIG_MAIN_STACK_SIZE+0x108>
		color_g = (color == 1) ? 0x07E0U : 0U;
     51a:	2100      	movs	r1, #0
		color_r = (color == 0) ? 0xF800U : 0U;
     51c:	460b      	mov	r3, r1
		color_b = (color == 2) ? 0x001FU : 0U;
     51e:	201f      	movs	r0, #31
     520:	e7f2      	b.n	508 <CONFIG_MAIN_STACK_SIZE+0x108>
		k_sleep(K_MSEC(100));
	}
}
     522:	b00b      	add	sp, #44	; 0x2c
     524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     528:	00003e40 	.word	0x00003e40
     52c:	00003e47 	.word	0x00003e47

00000530 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     530:	4b16      	ldr	r3, [pc, #88]	; (58c <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     532:	b507      	push	{r0, r1, r2, lr}
     534:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     536:	b182      	cbz	r2, 55a <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
     538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     53c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     540:	07d1      	lsls	r1, r2, #31
     542:	d50a      	bpl.n	55a <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     544:	2200      	movs	r2, #0
     546:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     548:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     54a:	4811      	ldr	r0, [pc, #68]	; (590 <nrf_power_clock_isr+0x60>)
     54c:	9300      	str	r3, [sp, #0]
    (void)dummy;
     54e:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     550:	6883      	ldr	r3, [r0, #8]
     552:	7a59      	ldrb	r1, [r3, #9]
     554:	b909      	cbnz	r1, 55a <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     556:	f002 fd04 	bl	2f62 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <nrf_power_clock_isr+0x64>)
     55c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     55e:	b18a      	cbz	r2, 584 <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
     560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     564:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     568:	0792      	lsls	r2, r2, #30
     56a:	d50b      	bpl.n	584 <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     56c:	2200      	movs	r2, #0
     56e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     570:	681b      	ldr	r3, [r3, #0]
     572:	9301      	str	r3, [sp, #4]
    (void)dummy;
     574:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     576:	4806      	ldr	r0, [pc, #24]	; (590 <nrf_power_clock_isr+0x60>)
     578:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     57a:	b003      	add	sp, #12
     57c:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     580:	f002 bcef 	b.w	2f62 <clkstarted_handle>
}
     584:	b003      	add	sp, #12
     586:	f85d fb04 	ldr.w	pc, [sp], #4
     58a:	bf00      	nop
     58c:	40000100 	.word	0x40000100
     590:	20005070 	.word	0x20005070
     594:	40000104 	.word	0x40000104

00000598 <st7789v_init>:
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
			 sizeof(st7789v_rgb_param));
}

static int st7789v_init(struct device *dev)
{
     598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
     59c:	6884      	ldr	r4, [r0, #8]
{
     59e:	4606      	mov	r6, r0
     5a0:	487e      	ldr	r0, [pc, #504]	; (79c <st7789v_init+0x204>)
     5a2:	f001 fd25 	bl	1ff0 <z_impl_device_get_binding>

	data->spi_dev = device_get_binding(DT_INST_0_SITRONIX_ST7789V_BUS_NAME);
     5a6:	6020      	str	r0, [r4, #0]
	if (data->spi_dev == NULL) {
     5a8:	b928      	cbnz	r0, 5b6 <st7789v_init+0x1e>
		LOG_ERR("Could not get SPI device for LCD");
		return -EPERM;
     5aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	st7789v_lcd_init(data);

	st7789v_exit_sleep(data);

	return 0;
}
     5ae:	4628      	mov	r0, r5
     5b0:	b002      	add	sp, #8
     5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
     5b6:	4a7a      	ldr	r2, [pc, #488]	; (7a0 <st7789v_init+0x208>)
     5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
     5bc:	e9c4 2301 	strd	r2, r3, [r4, #4]
     5c0:	4878      	ldr	r0, [pc, #480]	; (7a4 <st7789v_init+0x20c>)
     5c2:	f001 fd15 	bl	1ff0 <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
     5c6:	2719      	movs	r7, #25
     5c8:	2500      	movs	r5, #0
	data->spi_config.cs = &(data->cs_ctrl);
     5ca:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.delay = 0U;
     5ce:	e9c4 7505 	strd	r7, r5, [r4, #20]
	data->cs_ctrl.gpio_dev = device_get_binding(
     5d2:	6120      	str	r0, [r4, #16]
	data->spi_config.cs = &(data->cs_ctrl);
     5d4:	60e3      	str	r3, [r4, #12]
     5d6:	4873      	ldr	r0, [pc, #460]	; (7a4 <st7789v_init+0x20c>)
     5d8:	f001 fd0a 	bl	1ff0 <z_impl_device_get_binding>
	data->reset_gpio = device_get_binding(
     5dc:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
     5de:	2800      	cmp	r0, #0
     5e0:	d0e3      	beq.n	5aa <st7789v_init+0x12>
	return api->config(port, access_op, pin, flags);
     5e2:	6843      	ldr	r3, [r0, #4]
     5e4:	4629      	mov	r1, r5
     5e6:	f8d3 8000 	ldr.w	r8, [r3]
     5ea:	221a      	movs	r2, #26
     5ec:	2301      	movs	r3, #1
     5ee:	47c0      	blx	r8
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN,
     5f0:	4605      	mov	r5, r0
     5f2:	b110      	cbz	r0, 5fa <st7789v_init+0x62>
		return -EIO;
     5f4:	f06f 0504 	mvn.w	r5, #4
     5f8:	e7d9      	b.n	5ae <st7789v_init+0x16>
     5fa:	486a      	ldr	r0, [pc, #424]	; (7a4 <st7789v_init+0x20c>)
     5fc:	f001 fcf8 	bl	1ff0 <z_impl_device_get_binding>
	data->cmd_data_gpio = device_get_binding(
     600:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
     602:	2800      	cmp	r0, #0
     604:	d0d1      	beq.n	5aa <st7789v_init+0x12>
     606:	6843      	ldr	r3, [r0, #4]
     608:	4629      	mov	r1, r5
     60a:	f8d3 8000 	ldr.w	r8, [r3]
     60e:	2212      	movs	r2, #18
     610:	2301      	movs	r3, #1
     612:	47c0      	blx	r8
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
     614:	4605      	mov	r5, r0
     616:	2800      	cmp	r0, #0
     618:	d1ec      	bne.n	5f4 <st7789v_init+0x5c>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
     61a:	2201      	movs	r2, #1
     61c:	211a      	movs	r1, #26
     61e:	69e0      	ldr	r0, [r4, #28]
     620:	f002 fdb4 	bl	318c <gpio_pin_write>
	k_sleep(K_MSEC(1));
     624:	2001      	movs	r0, #1
     626:	f002 fd9f 	bl	3168 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 0);
     62a:	462a      	mov	r2, r5
     62c:	211a      	movs	r1, #26
     62e:	69e0      	ldr	r0, [r4, #28]
     630:	f002 fdac 	bl	318c <gpio_pin_write>
	k_sleep(K_MSEC(6));
     634:	2006      	movs	r0, #6
     636:	f002 fd97 	bl	3168 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
     63a:	2201      	movs	r2, #1
     63c:	211a      	movs	r1, #26
     63e:	69e0      	ldr	r0, [r4, #28]
     640:	f002 fda4 	bl	318c <gpio_pin_write>
	k_sleep(K_MSEC(20));
     644:	2014      	movs	r0, #20
     646:	f002 fd8f 	bl	3168 <k_sleep>
	st7789v_blanking_on(dev);
     64a:	4630      	mov	r0, r6
     64c:	f002 fddb 	bl	3206 <st7789v_blanking_on>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
     650:	4620      	mov	r0, r4
     652:	4a55      	ldr	r2, [pc, #340]	; (7a8 <st7789v_init+0x210>)
	data->x_offset = x_offset;
     654:	62a5      	str	r5, [r4, #40]	; 0x28
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
     656:	2305      	movs	r3, #5
     658:	21b2      	movs	r1, #178	; 0xb2
     65a:	f002 fda3 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_CMD2EN, st7789v_cmd2en_param,
     65e:	4620      	mov	r0, r4
     660:	4a52      	ldr	r2, [pc, #328]	; (7ac <st7789v_init+0x214>)
     662:	2304      	movs	r3, #4
     664:	21df      	movs	r1, #223	; 0xdf
     666:	f002 fd9d 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
     66a:	f10d 0207 	add.w	r2, sp, #7
     66e:	4620      	mov	r0, r4
     670:	2301      	movs	r3, #1
     672:	21ba      	movs	r1, #186	; 0xba
	tmp = 0x00;
     674:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
     678:	f002 fd94 	bl	31a4 <st7789v_transmit>
	tmp = 0x0f;
     67c:	230f      	movs	r3, #15
     67e:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_FRCTRL2, &tmp, 1);
     682:	f10d 0207 	add.w	r2, sp, #7
     686:	4620      	mov	r0, r4
     688:	2301      	movs	r3, #1
     68a:	21c6      	movs	r1, #198	; 0xc6
     68c:	f002 fd8a 	bl	31a4 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_GCTRL;
     690:	2335      	movs	r3, #53	; 0x35
     692:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
     696:	f10d 0207 	add.w	r2, sp, #7
     69a:	4620      	mov	r0, r4
     69c:	2301      	movs	r3, #1
     69e:	21b7      	movs	r1, #183	; 0xb7
	tmp = 0x01;
     6a0:	2601      	movs	r6, #1
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
     6a2:	f002 fd7f 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
     6a6:	f10d 0207 	add.w	r2, sp, #7
     6aa:	4620      	mov	r0, r4
     6ac:	2301      	movs	r3, #1
     6ae:	21bb      	movs	r1, #187	; 0xbb
	tmp = DT_INST_0_SITRONIX_ST7789V_VCOM;
     6b0:	f88d 7007 	strb.w	r7, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
     6b4:	f002 fd76 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
     6b8:	4633      	mov	r3, r6
     6ba:	f10d 0207 	add.w	r2, sp, #7
     6be:	4620      	mov	r0, r4
     6c0:	21c2      	movs	r1, #194	; 0xc2
	tmp = 0x01;
     6c2:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
     6c6:	f002 fd6d 	bl	31a4 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VRHS;
     6ca:	2312      	movs	r3, #18
     6cc:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VRH, &tmp, 1);
     6d0:	f10d 0207 	add.w	r2, sp, #7
     6d4:	4633      	mov	r3, r6
     6d6:	4620      	mov	r0, r4
     6d8:	21c3      	movs	r1, #195	; 0xc3
     6da:	f002 fd63 	bl	31a4 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VDVS;
     6de:	2320      	movs	r3, #32
     6e0:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDS, &tmp, 1);
     6e4:	f10d 0207 	add.w	r2, sp, #7
     6e8:	4633      	mov	r3, r6
     6ea:	4620      	mov	r0, r4
     6ec:	21c4      	movs	r1, #196	; 0xc4
     6ee:	f002 fd59 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PWCTRL1, st7789v_pwctrl1_param,
     6f2:	4620      	mov	r0, r4
     6f4:	4a2e      	ldr	r2, [pc, #184]	; (7b0 <st7789v_init+0x218>)
     6f6:	2302      	movs	r3, #2
     6f8:	21d0      	movs	r1, #208	; 0xd0
     6fa:	f002 fd53 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
     6fe:	4633      	mov	r3, r6
     700:	f10d 0207 	add.w	r2, sp, #7
     704:	4620      	mov	r0, r4
     706:	2136      	movs	r1, #54	; 0x36
	tmp = DT_INST_0_SITRONIX_ST7789V_MDAC;
     708:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
     70c:	f002 fd4a 	bl	31a4 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_COLMOD;
     710:	2305      	movs	r3, #5
     712:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_COLMOD, &tmp, 1);
     716:	f10d 0207 	add.w	r2, sp, #7
     71a:	4633      	mov	r3, r6
     71c:	4620      	mov	r0, r4
     71e:	213a      	movs	r1, #58	; 0x3a
     720:	f002 fd40 	bl	31a4 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_LCM;
     724:	232c      	movs	r3, #44	; 0x2c
     726:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_LCMCTRL, &tmp, 1);
     72a:	f10d 0207 	add.w	r2, sp, #7
     72e:	4633      	mov	r3, r6
     730:	4620      	mov	r0, r4
     732:	21c0      	movs	r1, #192	; 0xc0
     734:	f002 fd36 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
     738:	4633      	mov	r3, r6
     73a:	f10d 0207 	add.w	r2, sp, #7
     73e:	4620      	mov	r0, r4
     740:	2126      	movs	r1, #38	; 0x26
	tmp = DT_INST_0_SITRONIX_ST7789V_GAMMA;
     742:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
     746:	f002 fd2d 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_INV_ON, NULL, 0);
     74a:	462b      	mov	r3, r5
     74c:	462a      	mov	r2, r5
     74e:	4620      	mov	r0, r4
     750:	2121      	movs	r1, #33	; 0x21
     752:	f002 fd27 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PVGAMCTRL, st7789v_pvgam_param,
     756:	4620      	mov	r0, r4
     758:	4a16      	ldr	r2, [pc, #88]	; (7b4 <st7789v_init+0x21c>)
     75a:	230e      	movs	r3, #14
     75c:	21e0      	movs	r1, #224	; 0xe0
     75e:	f002 fd21 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_NVGAMCTRL, st7789v_nvgam_param,
     762:	4620      	mov	r0, r4
     764:	4a14      	ldr	r2, [pc, #80]	; (7b8 <st7789v_init+0x220>)
     766:	230e      	movs	r3, #14
     768:	21e1      	movs	r1, #225	; 0xe1
     76a:	f002 fd1b 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RAMCTRL, st7789v_ram_param,
     76e:	4620      	mov	r0, r4
     770:	4a12      	ldr	r2, [pc, #72]	; (7bc <st7789v_init+0x224>)
     772:	2302      	movs	r3, #2
     774:	21b0      	movs	r1, #176	; 0xb0
     776:	f002 fd15 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
     77a:	4620      	mov	r0, r4
     77c:	4a10      	ldr	r2, [pc, #64]	; (7c0 <st7789v_init+0x228>)
     77e:	2303      	movs	r3, #3
     780:	21b1      	movs	r1, #177	; 0xb1
     782:	f002 fd0f 	bl	31a4 <st7789v_transmit>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
     786:	4620      	mov	r0, r4
     788:	462b      	mov	r3, r5
     78a:	462a      	mov	r2, r5
     78c:	2111      	movs	r1, #17
     78e:	f002 fd09 	bl	31a4 <st7789v_transmit>
	k_sleep(K_MSEC(120));
     792:	2078      	movs	r0, #120	; 0x78
     794:	f002 fce8 	bl	3168 <k_sleep>
}
     798:	e709      	b.n	5ae <st7789v_init+0x16>
     79a:	bf00      	nop
     79c:	00003e55 	.word	0x00003e55
     7a0:	007a1200 	.word	0x007a1200
     7a4:	00003e40 	.word	0x00003e40
     7a8:	20005032 	.word	0x20005032
     7ac:	20005020 	.word	0x20005020
     7b0:	20005045 	.word	0x20005045
     7b4:	20005037 	.word	0x20005037
     7b8:	20005024 	.word	0x20005024
     7bc:	20005047 	.word	0x20005047
     7c0:	20005049 	.word	0x20005049

000007c4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     7c4:	4b0d      	ldr	r3, [pc, #52]	; (7fc <rtc1_nrf_isr+0x38>)
     7c6:	2200      	movs	r2, #0
     7c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     7cc:	f04f 0220 	mov.w	r2, #32
     7d0:	f3ef 8111 	mrs	r1, BASEPRI
     7d4:	f382 8811 	msr	BASEPRI, r2
     7d8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     7dc:	4a08      	ldr	r2, [pc, #32]	; (800 <CONFIG_ISR_STACK_SIZE>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     7de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     7e2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     7e4:	1ac0      	subs	r0, r0, r3
     7e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     7ea:	4403      	add	r3, r0
     7ec:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7ee:	f381 8811 	msr	BASEPRI, r1
     7f2:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     7f6:	f002 ba01 	b.w	2bfc <z_clock_announce>
     7fa:	bf00      	nop
     7fc:	40011000 	.word	0x40011000
     800:	20000020 	.word	0x20000020

00000804 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     804:	b573      	push	{r0, r1, r4, r5, r6, lr}
     806:	481c      	ldr	r0, [pc, #112]	; (878 <z_clock_driver_init+0x74>)
     808:	f001 fbf2 	bl	1ff0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
     80c:	b380      	cbz	r0, 870 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     80e:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     810:	4d1a      	ldr	r5, [pc, #104]	; (87c <z_clock_driver_init+0x78>)
     812:	681b      	ldr	r3, [r3, #0]
     814:	2101      	movs	r1, #1
     816:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     818:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     81a:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     81c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     820:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     824:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     828:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     82c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     830:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     838:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	9301      	str	r3, [sp, #4]
    (void)dummy;
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4b0f      	ldr	r3, [pc, #60]	; (880 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     842:	4631      	mov	r1, r6
     844:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     848:	2011      	movs	r0, #17
     84a:	4622      	mov	r2, r4
     84c:	f000 f8fe 	bl	a4c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     850:	2011      	movs	r0, #17
     852:	f000 f8eb 	bl	a2c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     856:	4b0b      	ldr	r3, [pc, #44]	; (884 <z_clock_driver_init+0x80>)
     858:	601e      	str	r6, [r3, #0]
     85a:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     85c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     860:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     862:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     866:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     86a:	4620      	mov	r0, r4
}
     86c:	b002      	add	sp, #8
     86e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     874:	e7fa      	b.n	86c <z_clock_driver_init+0x68>
     876:	bf00      	nop
     878:	00003e4f 	.word	0x00003e4f
     87c:	40011000 	.word	0x40011000
     880:	e000e100 	.word	0xe000e100
     884:	40011008 	.word	0x40011008

00000888 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     888:	4b25      	ldr	r3, [pc, #148]	; (920 <z_clock_set_timeout+0x98>)
{
     88a:	b5f0      	push	{r4, r5, r6, r7, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     88c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     890:	bf08      	it	eq
     892:	4618      	moveq	r0, r3
	__asm__ volatile(
     894:	f04f 0220 	mov.w	r2, #32
     898:	f3ef 8511 	mrs	r5, BASEPRI
     89c:	f382 8811 	msr	BASEPRI, r2
     8a0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     8a4:	491f      	ldr	r1, [pc, #124]	; (924 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     8a6:	4a20      	ldr	r2, [pc, #128]	; (928 <z_clock_set_timeout+0xa0>)
     8a8:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
     8ac:	6812      	ldr	r2, [r2, #0]
	return (a - b) & COUNTER_MAX;
     8ae:	1aa7      	subs	r7, r4, r2
     8b0:	f027 467f 	bic.w	r6, r7, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     8b4:	023f      	lsls	r7, r7, #8
     8b6:	d419      	bmi.n	8ec <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     8b8:	3801      	subs	r0, #1
     8ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     8be:	4298      	cmp	r0, r3
     8c0:	bfa8      	it	ge
     8c2:	4618      	movge	r0, r3
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     8c4:	3601      	adds	r6, #1
     8c6:	4430      	add	r0, r6
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     8c8:	4298      	cmp	r0, r3
     8ca:	bf94      	ite	ls
     8cc:	1813      	addls	r3, r2, r0
     8ce:	18d3      	addhi	r3, r2, r3
	return (a - b) & COUNTER_MAX;
     8d0:	1b1c      	subs	r4, r3, r4
     8d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
     8d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     8da:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
     8dc:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
     8e0:	d906      	bls.n	8f0 <z_clock_set_timeout+0x68>
	__asm__ volatile(
     8e2:	f385 8811 	msr	BASEPRI, r5
     8e6:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
     8ec:	2000      	movs	r0, #0
     8ee:	e7e9      	b.n	8c4 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
     8f0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     8f4:	480d      	ldr	r0, [pc, #52]	; (92c <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
     8f6:	1a9a      	subs	r2, r3, r2
     8f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     8fc:	1e54      	subs	r4, r2, #1
     8fe:	4284      	cmp	r4, r0
     900:	d905      	bls.n	90e <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     902:	4b0b      	ldr	r3, [pc, #44]	; (930 <z_clock_set_timeout+0xa8>)
     904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     908:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
     90c:	e7e9      	b.n	8e2 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
     90e:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
     910:	bf02      	ittt	eq
     912:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     914:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     918:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
}
     91c:	e7e1      	b.n	8e2 <z_clock_set_timeout+0x5a>
     91e:	bf00      	nop
     920:	00fffffe 	.word	0x00fffffe
     924:	40011000 	.word	0x40011000
     928:	20000020 	.word	0x20000020
     92c:	007ffffe 	.word	0x007ffffe
     930:	e000e100 	.word	0xe000e100

00000934 <z_clock_elapsed>:
	__asm__ volatile(
     934:	f04f 0220 	mov.w	r2, #32
     938:	f3ef 8311 	mrs	r3, BASEPRI
     93c:	f382 8811 	msr	BASEPRI, r2
     940:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     944:	4a06      	ldr	r2, [pc, #24]	; (960 <z_clock_elapsed+0x2c>)
     946:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     94a:	4a06      	ldr	r2, [pc, #24]	; (964 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     94c:	6812      	ldr	r2, [r2, #0]
     94e:	1a80      	subs	r0, r0, r2
     950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     954:	f383 8811 	msr	BASEPRI, r3
     958:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40011000 	.word	0x40011000
     964:	20000020 	.word	0x20000020

00000968 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     968:	4804      	ldr	r0, [pc, #16]	; (97c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     96a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     96c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     96e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     970:	d003      	beq.n	97a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     972:	4903      	ldr	r1, [pc, #12]	; (980 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     978:	600a      	str	r2, [r1, #0]

0000097a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     97a:	4770      	bx	lr
    ldr r0, =_kernel
     97c:	200041e8 	.word	0x200041e8
    ldr r1, =_SCS_ICSR
     980:	e000ed04 	.word	0xe000ed04

00000984 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     984:	4a09      	ldr	r2, [pc, #36]	; (9ac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     986:	490a      	ldr	r1, [pc, #40]	; (9b0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     988:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     98a:	6809      	ldr	r1, [r1, #0]
     98c:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     98e:	4909      	ldr	r1, [pc, #36]	; (9b4 <arch_swap+0x30>)
	_current->arch.basepri = key;
     990:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     992:	684b      	ldr	r3, [r1, #4]
     994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     998:	604b      	str	r3, [r1, #4]
     99a:	2300      	movs	r3, #0
     99c:	f383 8811 	msr	BASEPRI, r3
     9a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     9a4:	6893      	ldr	r3, [r2, #8]
}
     9a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	200041e8 	.word	0x200041e8
     9b0:	00003e3c 	.word	0x00003e3c
     9b4:	e000ed00 	.word	0xe000ed00

000009b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     9b8:	4912      	ldr	r1, [pc, #72]	; (a04 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     9ba:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     9bc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     9c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     9c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     9c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     9ca:	2020      	movs	r0, #32
    msr BASEPRI, r0
     9cc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     9d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     9d4:	4f0c      	ldr	r7, [pc, #48]	; (a08 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     9d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     9da:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     9dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     9de:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     9e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     9e2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     9e4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     9e6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     9ea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     9ec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     9ee:	f002 fc92 	bl	3316 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     9f2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     9f6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     9fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     9fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     a02:	4770      	bx	lr
    ldr r1, =_kernel
     a04:	200041e8 	.word	0x200041e8
    ldr v4, =_SCS_ICSR
     a08:	e000ed04 	.word	0xe000ed04

00000a0c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     a0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a16:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a1a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     a1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     a20:	2902      	cmp	r1, #2
    beq _oops
     a22:	d0ff      	beq.n	a24 <_oops>

00000a24 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     a24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     a26:	f002 fc6b 	bl	3300 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     a2a:	bd01      	pop	{r0, pc}

00000a2c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     a2c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a2e:	2b00      	cmp	r3, #0
     a30:	db08      	blt.n	a44 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a32:	2201      	movs	r2, #1
     a34:	f000 001f 	and.w	r0, r0, #31
     a38:	fa02 f000 	lsl.w	r0, r2, r0
     a3c:	095b      	lsrs	r3, r3, #5
     a3e:	4a02      	ldr	r2, [pc, #8]	; (a48 <arch_irq_enable+0x1c>)
     a40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     a44:	4770      	bx	lr
     a46:	bf00      	nop
     a48:	e000e100 	.word	0xe000e100

00000a4c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     a4c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     a4e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a50:	bfa8      	it	ge
     a52:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     a56:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a5a:	bfb8      	it	lt
     a5c:	4b06      	ldrlt	r3, [pc, #24]	; (a78 <z_arm_irq_priority_set+0x2c>)
     a5e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a62:	bfac      	ite	ge
     a64:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a68:	f000 000f 	andlt.w	r0, r0, #15
     a6c:	b2c9      	uxtb	r1, r1
     a6e:	bfb4      	ite	lt
     a70:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a72:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
     a76:	4770      	bx	lr
     a78:	e000ed14 	.word	0xe000ed14

00000a7c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a7e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a82:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
     a84:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
     a88:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     a8a:	f003 f81a 	bl	3ac2 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     a8e:	f1a4 0220 	sub.w	r2, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     a92:	4b0a      	ldr	r3, [pc, #40]	; (abc <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     a94:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     a98:	f023 0301 	bic.w	r3, r3, #1
     a9c:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     a9e:	9b06      	ldr	r3, [sp, #24]
     aa0:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     aa2:	9b07      	ldr	r3, [sp, #28]
     aa4:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     aa6:	9b08      	ldr	r3, [sp, #32]
     aa8:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
     aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     aae:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     ab0:	2300      	movs	r3, #0
	pInitCtx->basic.a1 = (u32_t)pEntry;
     ab2:	6016      	str	r6, [r2, #0]
	thread->callee_saved.psp = (u32_t)pInitCtx;
     ab4:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     ab6:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     ab8:	b002      	add	sp, #8
     aba:	bd70      	pop	{r4, r5, r6, pc}
     abc:	00002f31 	.word	0x00002f31

00000ac0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ac2:	4605      	mov	r5, r0
     ac4:	460c      	mov	r4, r1
     ac6:	4617      	mov	r7, r2
     ac8:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     aca:	f000 f979 	bl	dc0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     ace:	4b0a      	ldr	r3, [pc, #40]	; (af8 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
     ad0:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     ad2:	4628      	mov	r0, r5
	_current = main_thread;
     ad4:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     ad6:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     ada:	f002 fc1c 	bl	3316 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     ade:	4630      	mov	r0, r6
     ae0:	f384 8809 	msr	PSP, r4
     ae4:	2100      	movs	r1, #0
     ae6:	b663      	cpsie	if
     ae8:	f381 8811 	msr	BASEPRI, r1
     aec:	f3bf 8f6f 	isb	sy
     af0:	2200      	movs	r2, #0
     af2:	2300      	movs	r3, #0
     af4:	f002 fa1c 	bl	2f30 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     af8:	200041e8 	.word	0x200041e8

00000afc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     afc:	4901      	ldr	r1, [pc, #4]	; (b04 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     afe:	2210      	movs	r2, #16
	str r2, [r1]
     b00:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     b02:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     b04:	e000ed10 	.word	0xe000ed10

00000b08 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     b08:	4040      	eors	r0, r0
	msr BASEPRI, r0
     b0a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     b0e:	bf30      	wfi

	bx lr
     b10:	4770      	bx	lr
     b12:	bf00      	nop

00000b14 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
     b14:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     b18:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     b1c:	4672      	mov	r2, lr

	push {r0, lr}
     b1e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
     b20:	f000 f8a0 	bl	c64 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     b24:	bd01      	pop	{r0, pc}
     b26:	bf00      	nop

00000b28 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     b28:	bf30      	wfi
    b z_SysNmiOnReset
     b2a:	f7ff bffd 	b.w	b28 <z_SysNmiOnReset>
     b2e:	bf00      	nop

00000b30 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     b30:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     b32:	4b08      	ldr	r3, [pc, #32]	; (b54 <z_arm_prep_c+0x24>)
     b34:	4a08      	ldr	r2, [pc, #32]	; (b58 <z_arm_prep_c+0x28>)
     b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b3a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b40:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     b44:	f001 fa94 	bl	2070 <z_bss_zero>
	z_data_copy();
     b48:	f001 fa9c 	bl	2084 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     b4c:	f000 f906 	bl	d5c <z_arm_int_lib_init>
	z_cstart();
     b50:	f001 faca 	bl	20e8 <z_cstart>
     b54:	00000000 	.word	0x00000000
     b58:	e000ed00 	.word	0xe000ed00

00000b5c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     b5c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
     b5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     b60:	4a0b      	ldr	r2, [pc, #44]	; (b90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     b62:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     b64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     b66:	bf1e      	ittt	ne
	movne	r1, #0
     b68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     b6a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     b6c:	f002 ff00 	blne	3970 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     b70:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     b72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     b76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     b7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     b7e:	4905      	ldr	r1, [pc, #20]	; (b94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     b80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     b82:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     b84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     b86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     b8a:	4903      	ldr	r1, [pc, #12]	; (b98 <_isr_wrapper+0x3c>)
	bx r1
     b8c:	4708      	bx	r1
     b8e:	0000      	.short	0x0000
	ldr r2, =_kernel
     b90:	200041e8 	.word	0x200041e8
	ldr r1, =_sw_isr_table
     b94:	00003b90 	.word	0x00003b90
	ldr r1, =z_arm_int_exit
     b98:	00000969 	.word	0x00000969

00000b9c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     b9c:	f002 fc1d 	bl	33da <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     ba0:	2020      	movs	r0, #32
    msr BASEPRI, r0
     ba2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     ba6:	4808      	ldr	r0, [pc, #32]	; (bc8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     bac:	1840      	adds	r0, r0, r1
    msr PSP, r0
     bae:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     bb2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     bb6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     bb8:	4308      	orrs	r0, r1
    msr CONTROL, r0
     bba:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     bbe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     bc2:	f7ff ffb5 	bl	b30 <z_arm_prep_c>
     bc6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     bc8:	20004770 	.word	0x20004770

00000bcc <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     bcc:	4b0c      	ldr	r3, [pc, #48]	; (c00 <mem_manage_fault.isra.0+0x34>)
     bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bd4:	0792      	lsls	r2, r2, #30
     bd6:	d508      	bpl.n	bea <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bdc:	0612      	lsls	r2, r2, #24
     bde:	d504      	bpl.n	bea <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     be0:	b118      	cbz	r0, bea <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     be8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <mem_manage_fault.isra.0+0x34>)
     bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     bf4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     bf6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     bfa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     bfc:	7008      	strb	r0, [r1, #0]

	return reason;
}
     bfe:	4770      	bx	lr
     c00:	e000ed00 	.word	0xe000ed00

00000c04 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     c04:	4b0d      	ldr	r3, [pc, #52]	; (c3c <bus_fault.isra.0+0x38>)
     c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c0c:	0592      	lsls	r2, r2, #22
     c0e:	d508      	bpl.n	c22 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c14:	0412      	lsls	r2, r2, #16
     c16:	d504      	bpl.n	c22 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     c18:	b118      	cbz	r0, c22 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     c20:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c22:	4b06      	ldr	r3, [pc, #24]	; (c3c <bus_fault.isra.0+0x38>)
     c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c28:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     c2a:	bf58      	it	pl
     c2c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     c30:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     c32:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     c36:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     c38:	7008      	strb	r0, [r1, #0]

	return reason;
}
     c3a:	4770      	bx	lr
     c3c:	e000ed00 	.word	0xe000ed00

00000c40 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     c40:	4b07      	ldr	r3, [pc, #28]	; (c60 <usage_fault.isra.0+0x20>)
     c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c50:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     c54:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     c58:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     c5a:	2000      	movs	r0, #0
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop
     c60:	e000ed00 	.word	0xe000ed00

00000c64 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     c64:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c66:	4b36      	ldr	r3, [pc, #216]	; (d40 <z_arm_fault+0xdc>)
     c68:	685b      	ldr	r3, [r3, #4]
{
     c6a:	b08a      	sub	sp, #40	; 0x28
     c6c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
     c72:	2500      	movs	r5, #0
     c74:	f385 8811 	msr	BASEPRI, r5
     c78:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     c7c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
     c80:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
     c84:	d111      	bne.n	caa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     c86:	f002 010c 	and.w	r1, r2, #12
     c8a:	2908      	cmp	r1, #8
     c8c:	d00d      	beq.n	caa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     c8e:	0711      	lsls	r1, r2, #28
     c90:	d401      	bmi.n	c96 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
     c92:	4606      	mov	r6, r0
			*nested_exc = true;
     c94:	2501      	movs	r5, #1
	*recoverable = false;
     c96:	2200      	movs	r2, #0
     c98:	3b03      	subs	r3, #3
     c9a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     c9e:	2b03      	cmp	r3, #3
     ca0:	d847      	bhi.n	d32 <z_arm_fault+0xce>
     ca2:	e8df f003 	tbb	[pc, r3]
     ca6:	3e04      	.short	0x3e04
     ca8:	3b42      	.short	0x3b42
		return NULL;
     caa:	462e      	mov	r6, r5
     cac:	e7f3      	b.n	c96 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     cae:	4b24      	ldr	r3, [pc, #144]	; (d40 <z_arm_fault+0xdc>)
     cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     cb2:	0792      	lsls	r2, r2, #30
     cb4:	d43d      	bmi.n	d32 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     cb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     cb8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     cbc:	d008      	beq.n	cd0 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     cbe:	3328      	adds	r3, #40	; 0x28
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	b1eb      	cbz	r3, d00 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     cc4:	f10d 0107 	add.w	r1, sp, #7
     cc8:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     cca:	f7ff ff7f 	bl	bcc <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
     cce:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd4:	b993      	cbnz	r3, cfc <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     cd6:	2220      	movs	r2, #32
     cd8:	4631      	mov	r1, r6
     cda:	a802      	add	r0, sp, #8
     cdc:	f002 fb2f 	bl	333e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ce2:	b345      	cbz	r5, d36 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
     ce8:	b922      	cbnz	r2, cf4 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     cea:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     cee:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     cf2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     cf4:	a902      	add	r1, sp, #8
     cf6:	4620      	mov	r0, r4
     cf8:	f002 fb00 	bl	32fc <z_arm_fatal_error>
}
     cfc:	b00a      	add	sp, #40	; 0x28
     cfe:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     d00:	4b10      	ldr	r3, [pc, #64]	; (d44 <z_arm_fault+0xe0>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	b12b      	cbz	r3, d12 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     d06:	f10d 0107 	add.w	r1, sp, #7
     d0a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     d0c:	f7ff ff7a 	bl	c04 <bus_fault.isra.0>
     d10:	e7dd      	b.n	cce <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     d12:	4b0d      	ldr	r3, [pc, #52]	; (d48 <z_arm_fault+0xe4>)
     d14:	8818      	ldrh	r0, [r3, #0]
     d16:	b284      	uxth	r4, r0
     d18:	2c00      	cmp	r4, #0
     d1a:	d0d9      	beq.n	cd0 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     d1c:	f7ff ff90 	bl	c40 <usage_fault.isra.0>
     d20:	e7d5      	b.n	cce <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
     d22:	f10d 0107 	add.w	r1, sp, #7
     d26:	2000      	movs	r0, #0
     d28:	e7cf      	b.n	cca <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
     d2a:	f10d 0107 	add.w	r1, sp, #7
     d2e:	2000      	movs	r0, #0
     d30:	e7ec      	b.n	d0c <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     d32:	2400      	movs	r4, #0
     d34:	e7cc      	b.n	cd0 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     d36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     d3a:	f023 0301 	bic.w	r3, r3, #1
     d3e:	e7d8      	b.n	cf2 <z_arm_fault+0x8e>
     d40:	e000ed00 	.word	0xe000ed00
     d44:	e000ed29 	.word	0xe000ed29
     d48:	e000ed2a 	.word	0xe000ed2a

00000d4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d4c:	4a02      	ldr	r2, [pc, #8]	; (d58 <z_arm_fault_init+0xc>)
     d4e:	6953      	ldr	r3, [r2, #20]
     d50:	f043 0310 	orr.w	r3, r3, #16
     d54:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     d56:	4770      	bx	lr
     d58:	e000ed00 	.word	0xe000ed00

00000d5c <z_arm_int_lib_init>:
     d5c:	4804      	ldr	r0, [pc, #16]	; (d70 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     d5e:	2300      	movs	r3, #0
     d60:	2120      	movs	r1, #32
     d62:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     d64:	3301      	adds	r3, #1
     d66:	2b27      	cmp	r3, #39	; 0x27
     d68:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     d6c:	d1f9      	bne.n	d62 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     d6e:	4770      	bx	lr
     d70:	e000e100 	.word	0xe000e100

00000d74 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     d74:	b538      	push	{r3, r4, r5, lr}
     d76:	4604      	mov	r4, r0
	__asm__ volatile(
     d78:	f04f 0320 	mov.w	r3, #32
     d7c:	f3ef 8511 	mrs	r5, BASEPRI
     d80:	f383 8811 	msr	BASEPRI, r3
     d84:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     d88:	f001 fc24 	bl	25d4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <z_impl_k_thread_abort+0x44>)
     d8e:	689b      	ldr	r3, [r3, #8]
     d90:	42a3      	cmp	r3, r4
     d92:	d10b      	bne.n	dac <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     d94:	4b09      	ldr	r3, [pc, #36]	; (dbc <z_impl_k_thread_abort+0x48>)
     d96:	685a      	ldr	r2, [r3, #4]
     d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
     d9c:	b912      	cbnz	r2, da4 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     d9e:	4628      	mov	r0, r5
     da0:	f7ff fdf0 	bl	984 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     da4:	685a      	ldr	r2, [r3, #4]
     da6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     daa:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     dac:	4628      	mov	r0, r5
}
     dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     db2:	f002 be07 	b.w	39c4 <z_reschedule_irqlock>
     db6:	bf00      	nop
     db8:	200041e8 	.word	0x200041e8
     dbc:	e000ed00 	.word	0xe000ed00

00000dc0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     dc2:	4b08      	ldr	r3, [pc, #32]	; (de4 <z_arm_configure_static_mpu_regions+0x24>)
     dc4:	9301      	str	r3, [sp, #4]
     dc6:	4b08      	ldr	r3, [pc, #32]	; (de8 <z_arm_configure_static_mpu_regions+0x28>)
     dc8:	9302      	str	r3, [sp, #8]
     dca:	4b08      	ldr	r3, [pc, #32]	; (dec <z_arm_configure_static_mpu_regions+0x2c>)
     dcc:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     dce:	ab01      	add	r3, sp, #4
     dd0:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     dd2:	4a07      	ldr	r2, [pc, #28]	; (df0 <z_arm_configure_static_mpu_regions+0x30>)
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <z_arm_configure_static_mpu_regions+0x34>)
     dd6:	2101      	movs	r1, #1
     dd8:	4668      	mov	r0, sp
     dda:	f000 f893 	bl	f04 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     dde:	b005      	add	sp, #20
     de0:	f85d fb04 	ldr.w	pc, [sp], #4
     de4:	20000000 	.word	0x20000000
     de8:	00000000 	.word	0x00000000
     dec:	060b0000 	.word	0x060b0000
     df0:	20000000 	.word	0x20000000
     df4:	20010000 	.word	0x20010000

00000df8 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     df8:	f8df c084 	ldr.w	ip, [pc, #132]	; e80 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
     dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfe:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
     e00:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
     e02:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
     e04:	428f      	cmp	r7, r1
     e06:	db00      	blt.n	e0a <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
     e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
     e0a:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
     e0e:	f8de 4004 	ldr.w	r4, [lr, #4]
     e12:	b394      	cbz	r4, e7a <mpu_configure_regions+0x82>
		if (do_sanity_check &&
     e14:	b143      	cbz	r3, e28 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
     e16:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
     e18:	422c      	tst	r4, r5
     e1a:	d119      	bne.n	e50 <mpu_configure_regions+0x58>
		&&
     e1c:	2c1f      	cmp	r4, #31
     e1e:	d917      	bls.n	e50 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
     e20:	f8de 2000 	ldr.w	r2, [lr]
		&&
     e24:	4215      	tst	r5, r2
     e26:	d113      	bne.n	e50 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     e28:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
     e2a:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
     e2c:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     e30:	f8de 0008 	ldr.w	r0, [lr, #8]
     e34:	d90f      	bls.n	e56 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
     e36:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
     e3a:	d80e      	bhi.n	e5a <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     e3c:	3c01      	subs	r4, #1
     e3e:	fab4 f484 	clz	r4, r4
     e42:	f1c4 041f 	rsb	r4, r4, #31
     e46:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
     e48:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     e4a:	ea44 0400 	orr.w	r4, r4, r0
     e4e:	d906      	bls.n	e5e <mpu_configure_regions+0x66>
			return -EINVAL;
     e50:	f06f 0015 	mvn.w	r0, #21
     e54:	e7d8      	b.n	e08 <mpu_configure_regions+0x10>
		return REGION_32B;
     e56:	2408      	movs	r4, #8
     e58:	e7f6      	b.n	e48 <mpu_configure_regions+0x50>
		return REGION_4G;
     e5a:	243e      	movs	r4, #62	; 0x3e
     e5c:	e7f4      	b.n	e48 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e5e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
     e62:	4315      	orrs	r5, r2
     e64:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     e68:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
     e6c:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
     e70:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e72:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     e76:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
     e7a:	3701      	adds	r7, #1
     e7c:	e7c2      	b.n	e04 <mpu_configure_regions+0xc>
     e7e:	bf00      	nop
     e80:	e000ed90 	.word	0xe000ed90

00000e84 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     e84:	4b03      	ldr	r3, [pc, #12]	; (e94 <arm_core_mpu_enable+0x10>)
     e86:	2205      	movs	r2, #5
     e88:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     e8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e8e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     e92:	4770      	bx	lr
     e94:	e000ed90 	.word	0xe000ed90

00000e98 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e98:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     e9c:	4b01      	ldr	r3, [pc, #4]	; (ea4 <arm_core_mpu_disable+0xc>)
     e9e:	2200      	movs	r2, #0
     ea0:	605a      	str	r2, [r3, #4]
}
     ea2:	4770      	bx	lr
     ea4:	e000ed90 	.word	0xe000ed90

00000ea8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     ea8:	4913      	ldr	r1, [pc, #76]	; (ef8 <arm_mpu_init+0x50>)
     eaa:	6808      	ldr	r0, [r1, #0]
     eac:	2808      	cmp	r0, #8
{
     eae:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     eb0:	d81e      	bhi.n	ef0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     eb2:	f7ff fff1 	bl	e98 <arm_core_mpu_disable>
	MPU->RNR = index;
     eb6:	4c11      	ldr	r4, [pc, #68]	; (efc <arm_mpu_init+0x54>)
     eb8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     eba:	2200      	movs	r2, #0
     ebc:	4290      	cmp	r0, r2
     ebe:	f101 010c 	add.w	r1, r1, #12
     ec2:	d105      	bne.n	ed0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     ec4:	4b0e      	ldr	r3, [pc, #56]	; (f00 <arm_mpu_init+0x58>)
     ec6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     ec8:	f7ff ffdc 	bl	e84 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     ecc:	2000      	movs	r0, #0
}
     ece:	bd10      	pop	{r4, pc}
     ed0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     ed2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     ed6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     eda:	4313      	orrs	r3, r2
     edc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     ee0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
     ee6:	f043 0301 	orr.w	r3, r3, #1
     eea:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     eec:	3201      	adds	r2, #1
     eee:	e7e5      	b.n	ebc <arm_mpu_init+0x14>
		return -1;
     ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ef4:	e7eb      	b.n	ece <arm_mpu_init+0x26>
     ef6:	bf00      	nop
     ef8:	00003d9c 	.word	0x00003d9c
     efc:	e000ed90 	.word	0xe000ed90
     f00:	20004228 	.word	0x20004228

00000f04 <arm_core_mpu_configure_static_mpu_regions>:
{
     f04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     f06:	4c03      	ldr	r4, [pc, #12]	; (f14 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     f08:	2301      	movs	r3, #1
     f0a:	7822      	ldrb	r2, [r4, #0]
     f0c:	f7ff ff74 	bl	df8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     f10:	7020      	strb	r0, [r4, #0]
}
     f12:	bd10      	pop	{r4, pc}
     f14:	20004228 	.word	0x20004228

00000f18 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     f18:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
     f1a:	4a08      	ldr	r2, [pc, #32]	; (f3c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
     f1c:	2300      	movs	r3, #0
     f1e:	7812      	ldrb	r2, [r2, #0]
     f20:	f7ff ff6a 	bl	df8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     f24:	f110 0f16 	cmn.w	r0, #22
     f28:	d003      	beq.n	f32 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     f2a:	4b05      	ldr	r3, [pc, #20]	; (f40 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
     f2c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     f2e:	2807      	cmp	r0, #7
     f30:	dd00      	ble.n	f34 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
     f32:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
     f34:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     f36:	611a      	str	r2, [r3, #16]
     f38:	3001      	adds	r0, #1
     f3a:	e7f8      	b.n	f2e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
     f3c:	20004228 	.word	0x20004228
     f40:	e000ed90 	.word	0xe000ed90

00000f44 <nordicsemi_nrf52_init>:
     f44:	f04f 0320 	mov.w	r3, #32
     f48:	f3ef 8211 	mrs	r2, BASEPRI
     f4c:	f383 8811 	msr	BASEPRI, r3
     f50:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     f54:	4906      	ldr	r1, [pc, #24]	; (f70 <nordicsemi_nrf52_init+0x2c>)
     f56:	2301      	movs	r3, #1
     f58:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
     f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     f60:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
     f64:	f382 8811 	msr	BASEPRI, r2
     f68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f6c:	2000      	movs	r0, #0
     f6e:	4770      	bx	lr
     f70:	4001e000 	.word	0x4001e000

00000f74 <sys_arch_reboot>:
    *p_gpregret = val;
     f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f78:	b2c0      	uxtb	r0, r0
     f7a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
     f7e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     f82:	4905      	ldr	r1, [pc, #20]	; (f98 <sys_arch_reboot+0x24>)
     f84:	4b05      	ldr	r3, [pc, #20]	; (f9c <sys_arch_reboot+0x28>)
     f86:	68ca      	ldr	r2, [r1, #12]
     f88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     f8c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     f8e:	60cb      	str	r3, [r1, #12]
     f90:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     f94:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     f96:	e7fd      	b.n	f94 <sys_arch_reboot+0x20>
     f98:	e000ed00 	.word	0xe000ed00
     f9c:	05fa0004 	.word	0x05fa0004

00000fa0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     fa0:	b120      	cbz	r0, fac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     fa2:	4b03      	ldr	r3, [pc, #12]	; (fb0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     fa4:	0180      	lsls	r0, r0, #6
     fa6:	f043 0301 	orr.w	r3, r3, #1
     faa:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     fac:	4770      	bx	lr
     fae:	bf00      	nop
     fb0:	00003d40 	.word	0x00003d40

00000fb4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
     fb4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
     fb6:	4b09      	ldr	r3, [pc, #36]	; (fdc <gpio_nrfx_init+0x28>)
     fb8:	781a      	ldrb	r2, [r3, #0]
     fba:	b96a      	cbnz	r2, fd8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
     fbc:	2101      	movs	r1, #1
     fbe:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
     fc0:	2006      	movs	r0, #6
     fc2:	2105      	movs	r1, #5
     fc4:	f7ff fd42 	bl	a4c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
     fc8:	2006      	movs	r0, #6
     fca:	f7ff fd2f 	bl	a2c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
     fce:	4b04      	ldr	r3, [pc, #16]	; (fe0 <gpio_nrfx_init+0x2c>)
     fd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     fd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
     fd8:	2000      	movs	r0, #0
     fda:	bd08      	pop	{r3, pc}
     fdc:	20004229 	.word	0x20004229
     fe0:	40006000 	.word	0x40006000

00000fe4 <gpiote_pin_int_cfg>:
{
     fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
     fe6:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
     fe8:	4d54      	ldr	r5, [pc, #336]	; (113c <gpiote_pin_int_cfg+0x158>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     fea:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
     fec:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     fee:	791a      	ldrb	r2, [r3, #4]
     ff0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
     ff4:	f001 031f 	and.w	r3, r1, #31
     ff8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
     ffc:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     ffe:	2200      	movs	r2, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1000:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    1004:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    1008:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    100c:	42b3      	cmp	r3, r6
    100e:	d175      	bne.n	10fc <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    1010:	fa20 f602 	lsr.w	r6, r0, r2
    1014:	07f6      	lsls	r6, r6, #31
    1016:	d571      	bpl.n	10fc <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1018:	0090      	lsls	r0, r2, #2
    101a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    101e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    1022:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    1026:	f026 0601 	bic.w	r6, r6, #1
    102a:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    102e:	2001      	movs	r0, #1
    1030:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
    1034:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1038:	009a      	lsls	r2, r3, #2
    103a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    103e:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    1042:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1046:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    104a:	68a0      	ldr	r0, [r4, #8]
    104c:	40c8      	lsrs	r0, r1
    104e:	f010 0001 	ands.w	r0, r0, #1
    1052:	d051      	beq.n	10f8 <gpiote_pin_int_cfg+0x114>
    1054:	68e0      	ldr	r0, [r4, #12]
    1056:	40c8      	lsrs	r0, r1
    1058:	f010 0001 	ands.w	r0, r0, #1
    105c:	d04c      	beq.n	10f8 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    105e:	6960      	ldr	r0, [r4, #20]
    1060:	40c8      	lsrs	r0, r1
    1062:	f010 0001 	ands.w	r0, r0, #1
    1066:	d056      	beq.n	1116 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    1068:	69a2      	ldr	r2, [r4, #24]
    106a:	40ca      	lsrs	r2, r1
    106c:	07d2      	lsls	r2, r2, #31
    106e:	d44a      	bmi.n	1106 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    1070:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1072:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    1074:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1076:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    107a:	f002 0201 	and.w	r2, r2, #1
    107e:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    1082:	428a      	cmp	r2, r1
    1084:	bf14      	ite	ne
    1086:	2101      	movne	r1, #1
    1088:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    108a:	4d2c      	ldr	r5, [pc, #176]	; (113c <gpiote_pin_int_cfg+0x158>)
    108c:	2400      	movs	r4, #0
    108e:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    1092:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    1096:	f010 0003 	ands.w	r0, r0, #3
    109a:	d136      	bne.n	110a <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    109c:	00a2      	lsls	r2, r4, #2
    109e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    10a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10a6:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    10a8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10ac:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    10b0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    10b4:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    10b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    10bc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    10c0:	009b      	lsls	r3, r3, #2
    10c2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    10c6:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10c8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    10cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    10d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10d4:	4331      	orrs	r1, r6
    10d6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    10da:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	9301      	str	r3, [sp, #4]
    (void)dummy;
    10e0:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    10e2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    10e6:	f043 0301 	orr.w	r3, r3, #1
    10ea:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    10ee:	2301      	movs	r3, #1
    10f0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    10f4:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    10f8:	b002      	add	sp, #8
    10fa:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    10fc:	3201      	adds	r2, #1
    10fe:	2a08      	cmp	r2, #8
    1100:	f47f af7e 	bne.w	1000 <gpiote_pin_int_cfg+0x1c>
    1104:	e798      	b.n	1038 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1106:	2103      	movs	r1, #3
    1108:	e7bf      	b.n	108a <gpiote_pin_int_cfg+0xa6>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    110a:	3401      	adds	r4, #1
    110c:	2c08      	cmp	r4, #8
    110e:	d1be      	bne.n	108e <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    1110:	f06f 0012 	mvn.w	r0, #18
    1114:	e7f0      	b.n	10f8 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1116:	6923      	ldr	r3, [r4, #16]
    1118:	69e4      	ldr	r4, [r4, #28]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    111a:	f8d2 5700 	ldr.w	r5, [r2, #1792]	; 0x700
    111e:	4063      	eors	r3, r4
    1120:	fa23 f101 	lsr.w	r1, r3, r1
    1124:	f001 0101 	and.w	r1, r1, #1
    1128:	f1c1 0103 	rsb	r1, r1, #3
    112c:	f425 3340 	bic.w	r3, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1130:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    1134:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
}
    1138:	e7de      	b.n	10f8 <gpiote_pin_int_cfg+0x114>
    113a:	bf00      	nop
    113c:	40006000 	.word	0x40006000

00001140 <gpiote_event_handler>:
{
    1140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1144:	4855      	ldr	r0, [pc, #340]	; (129c <gpiote_event_handler+0x15c>)
    1146:	6805      	ldr	r5, [r0, #0]
	if (port_event) {
    1148:	2d00      	cmp	r5, #0
    114a:	d068      	beq.n	121e <gpiote_event_handler+0xde>
	struct gpio_nrfx_data *data = get_port_data(port);
    114c:	4b54      	ldr	r3, [pc, #336]	; (12a0 <gpiote_event_handler+0x160>)
    114e:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1154:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    1158:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    115a:	e9d1 2405 	ldrd	r2, r4, [r1, #20]
    115e:	4322      	orrs	r2, r4
    1160:	ea23 0302 	bic.w	r3, r3, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1164:	6832      	ldr	r2, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1166:	69cc      	ldr	r4, [r1, #28]
    1168:	6909      	ldr	r1, [r1, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    116a:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    116e:	404c      	eors	r4, r1
    1170:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    1172:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    1176:	2101      	movs	r1, #1
	u32_t pin = 0U;
    1178:	2700      	movs	r7, #0
	while (level_pins) {
    117a:	2b00      	cmp	r3, #0
    117c:	d139      	bne.n	11f2 <gpiote_event_handler+0xb2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    117e:	6003      	str	r3, [r0, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1180:	6803      	ldr	r3, [r0, #0]
    1182:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1184:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    1186:	4847      	ldr	r0, [pc, #284]	; (12a4 <gpiote_event_handler+0x164>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1188:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    118a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    118c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    118e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1192:	fa06 f103 	lsl.w	r1, r6, r3
    1196:	4211      	tst	r1, r2
    1198:	d013      	beq.n	11c2 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    119a:	009a      	lsls	r2, r3, #2
    119c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    11a0:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    11a4:	6811      	ldr	r1, [r2, #0]
    11a6:	b161      	cbz	r1, 11c2 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    11a8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    11ac:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    11b0:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    11b2:	6812      	ldr	r2, [r2, #0]
    11b4:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    11b6:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    11ba:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    11be:	9a01      	ldr	r2, [sp, #4]
    11c0:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    11c2:	3301      	adds	r3, #1
    11c4:	2b08      	cmp	r3, #8
    11c6:	d1e2      	bne.n	118e <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    11c8:	bb5c      	cbnz	r4, 1222 <gpiote_event_handler+0xe2>
	if (port_event) {
    11ca:	b17d      	cbz	r5, 11ec <gpiote_event_handler+0xac>
	const struct gpio_nrfx_data *data = get_port_data(port);
    11cc:	4b34      	ldr	r3, [pc, #208]	; (12a0 <gpiote_event_handler+0x160>)
    11ce:	6898      	ldr	r0, [r3, #8]
	return port->config->config_info;
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    11d4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
    11d8:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    11da:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
    11de:	430b      	orrs	r3, r1
    11e0:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
    11e4:	2501      	movs	r5, #1
	u32_t pin = 0U;
    11e6:	2600      	movs	r6, #0
	while (level_pins) {
    11e8:	2a00      	cmp	r2, #0
    11ea:	d138      	bne.n	125e <gpiote_event_handler+0x11e>
}
    11ec:	b002      	add	sp, #8
    11ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    11f2:	420b      	tst	r3, r1
    11f4:	d010      	beq.n	1218 <gpiote_event_handler+0xd8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    11f6:	f896 c004 	ldrb.w	ip, [r6, #4]
    11fa:	f007 021f 	and.w	r2, r7, #31
    11fe:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    1202:	0092      	lsls	r2, r2, #2
    1204:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    1208:	ea23 0301 	bic.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    120c:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    1210:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1214:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    1218:	3701      	adds	r7, #1
		bit <<= 1;
    121a:	0049      	lsls	r1, r1, #1
    121c:	e7ad      	b.n	117a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    121e:	462c      	mov	r4, r5
    1220:	e7b1      	b.n	1186 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    1222:	4f1f      	ldr	r7, [pc, #124]	; (12a0 <gpiote_event_handler+0x160>)
    1224:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1228:	f8d8 1000 	ldr.w	r1, [r8]
    122c:	2900      	cmp	r1, #0
    122e:	d0cc      	beq.n	11ca <gpiote_event_handler+0x8a>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1230:	680e      	ldr	r6, [r1, #0]
    1232:	2e00      	cmp	r6, #0
    1234:	bf38      	it	cc
    1236:	2600      	movcc	r6, #0
		if ((cb->pin_mask & pins) & data->int_en) {
    1238:	f8d8 300c 	ldr.w	r3, [r8, #12]
    123c:	688a      	ldr	r2, [r1, #8]
    123e:	4023      	ands	r3, r4
    1240:	4213      	tst	r3, r2
    1242:	d003      	beq.n	124c <gpiote_event_handler+0x10c>
			cb->handler(port, cb, pins);
    1244:	684b      	ldr	r3, [r1, #4]
    1246:	4622      	mov	r2, r4
    1248:	4638      	mov	r0, r7
    124a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    124c:	2e00      	cmp	r6, #0
    124e:	d0bc      	beq.n	11ca <gpiote_event_handler+0x8a>
    1250:	6833      	ldr	r3, [r6, #0]
    1252:	2b00      	cmp	r3, #0
    1254:	bf38      	it	cc
    1256:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1258:	4631      	mov	r1, r6
    125a:	461e      	mov	r6, r3
    125c:	e7ec      	b.n	1238 <gpiote_event_handler+0xf8>
		if (level_pins & bit) {
    125e:	4215      	tst	r5, r2
    1260:	d019      	beq.n	1296 <gpiote_event_handler+0x156>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1262:	793b      	ldrb	r3, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1264:	69c4      	ldr	r4, [r0, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1266:	f006 011f 	and.w	r1, r6, #31
    126a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    126e:	0089      	lsls	r1, r1, #2
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1270:	6903      	ldr	r3, [r0, #16]
    1272:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    1276:	4063      	eors	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1278:	f8d1 c700 	ldr.w	ip, [r1, #1792]	; 0x700
    127c:	40f3      	lsrs	r3, r6
    127e:	f003 0301 	and.w	r3, r3, #1
    1282:	f1c3 0303 	rsb	r3, r3, #3
    1286:	f42c 3440 	bic.w	r4, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    128a:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    128e:	f8c1 3700 	str.w	r3, [r1, #1792]	; 0x700
			level_pins &= ~bit;
    1292:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    1296:	3601      	adds	r6, #1
		bit <<= 1;
    1298:	006d      	lsls	r5, r5, #1
    129a:	e7a5      	b.n	11e8 <gpiote_event_handler+0xa8>
    129c:	4000617c 	.word	0x4000617c
    12a0:	20005088 	.word	0x20005088
    12a4:	40006000 	.word	0x40006000

000012a8 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
    12a8:	b510      	push	{r4, lr}
    12aa:	4604      	mov	r4, r0
    12ac:	2200      	movs	r2, #0
    12ae:	2101      	movs	r1, #1
    12b0:	2004      	movs	r0, #4
    12b2:	f7ff fbcb 	bl	a4c <z_arm_irq_priority_set>
	return dev->config->config_info;
    12b6:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    12b8:	4a06      	ldr	r2, [pc, #24]	; (12d4 <twi_1_init+0x2c>)
	return dev->config->config_info;
    12ba:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    12bc:	4623      	mov	r3, r4
    12be:	f100 0108 	add.w	r1, r0, #8
    12c2:	f000 fd49 	bl	1d58 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    12c6:	4b04      	ldr	r3, [pc, #16]	; (12d8 <twi_1_init+0x30>)
    12c8:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(1);
    12ca:	bf14      	ite	ne
    12cc:	f06f 000f 	mvnne.w	r0, #15
    12d0:	2000      	moveq	r0, #0
    12d2:	bd10      	pop	{r4, pc}
    12d4:	000013b1 	.word	0x000013b1
    12d8:	0bad0000 	.word	0x0bad0000

000012dc <i2c_nrfx_twi_transfer>:
{
    12dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12e0:	4605      	mov	r5, r0
    12e2:	b087      	sub	sp, #28
    12e4:	460c      	mov	r4, r1
    12e6:	4616      	mov	r6, r2
    12e8:	4698      	mov	r8, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    12ea:	6880      	ldr	r0, [r0, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    12ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    12f0:	f001 fb30 	bl	2954 <z_impl_k_sem_take>
	return dev->config->config_info;
    12f4:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
    12f6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 13ac <i2c_nrfx_twi_transfer+0xd0>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    12fa:	6898      	ldr	r0, [r3, #8]
    12fc:	f000 fd70 	bl	1de0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    1300:	2700      	movs	r7, #0
    1302:	42b7      	cmp	r7, r6
    1304:	d301      	bcc.n	130a <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
    1306:	2400      	movs	r4, #0
    1308:	e02a      	b.n	1360 <i2c_nrfx_twi_transfer+0x84>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    130a:	f894 b008 	ldrb.w	fp, [r4, #8]
    130e:	f01b 0a08 	ands.w	sl, fp, #8
    1312:	d142      	bne.n	139a <i2c_nrfx_twi_transfer+0xbe>
		nrfx_twi_xfer_desc_t cur_xfer = {
    1314:	2214      	movs	r2, #20
    1316:	4651      	mov	r1, sl
    1318:	a801      	add	r0, sp, #4
    131a:	f002 f83b 	bl	3394 <memset>
    131e:	6862      	ldr	r2, [r4, #4]
    1320:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    1322:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    1326:	6822      	ldr	r2, [r4, #0]
    1328:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    132c:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    1330:	f88d 8005 	strb.w	r8, [sp, #5]
    1334:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    1336:	d11e      	bne.n	1376 <i2c_nrfx_twi_transfer+0x9a>
			if ((i < (num_msgs - 1)) &&
    1338:	1e72      	subs	r2, r6, #1
    133a:	42ba      	cmp	r2, r7
    133c:	d902      	bls.n	1344 <i2c_nrfx_twi_transfer+0x68>
    133e:	7d22      	ldrb	r2, [r4, #20]
    1340:	0752      	lsls	r2, r2, #29
    1342:	d51a      	bpl.n	137a <i2c_nrfx_twi_transfer+0x9e>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    1344:	bb4b      	cbnz	r3, 139a <i2c_nrfx_twi_transfer+0xbe>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    1346:	2220      	movs	r2, #32
	return dev->config->config_info;
    1348:	6828      	ldr	r0, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    134a:	a901      	add	r1, sp, #4
    134c:	6880      	ldr	r0, [r0, #8]
    134e:	f000 fd71 	bl	1e34 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    1352:	4548      	cmp	r0, r9
    1354:	d013      	beq.n	137e <i2c_nrfx_twi_transfer+0xa2>
			if (res == NRFX_ERROR_BUSY) {
    1356:	4b14      	ldr	r3, [pc, #80]	; (13a8 <i2c_nrfx_twi_transfer+0xcc>)
    1358:	4298      	cmp	r0, r3
    135a:	d021      	beq.n	13a0 <i2c_nrfx_twi_transfer+0xc4>
				ret = -EIO;
    135c:	f06f 0404 	mvn.w	r4, #4
	return dev->config->config_info;
    1360:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    1362:	6898      	ldr	r0, [r3, #8]
    1364:	f000 fd4c 	bl	1e00 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    1368:	68a8      	ldr	r0, [r5, #8]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    136a:	f001 facd 	bl	2908 <z_impl_k_sem_give>
}
    136e:	4620      	mov	r0, r4
    1370:	b007      	add	sp, #28
    1372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
    1376:	4652      	mov	r2, sl
    1378:	e7e6      	b.n	1348 <i2c_nrfx_twi_transfer+0x6c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    137a:	2240      	movs	r2, #64	; 0x40
    137c:	e7e4      	b.n	1348 <i2c_nrfx_twi_transfer+0x6c>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    137e:	68a8      	ldr	r0, [r5, #8]
    1380:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    1382:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1386:	f001 fae5 	bl	2954 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    138a:	68ab      	ldr	r3, [r5, #8]
    138c:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    138e:	454b      	cmp	r3, r9
    1390:	f104 040c 	add.w	r4, r4, #12
    1394:	d1e2      	bne.n	135c <i2c_nrfx_twi_transfer+0x80>
	for (size_t i = 0; i < num_msgs; i++) {
    1396:	3701      	adds	r7, #1
    1398:	e7b3      	b.n	1302 <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
    139a:	f06f 0422 	mvn.w	r4, #34	; 0x22
    139e:	e7df      	b.n	1360 <i2c_nrfx_twi_transfer+0x84>
				ret = -EBUSY;
    13a0:	f06f 040f 	mvn.w	r4, #15
    13a4:	e7dc      	b.n	1360 <i2c_nrfx_twi_transfer+0x84>
    13a6:	bf00      	nop
    13a8:	0bad000b 	.word	0x0bad000b
    13ac:	0bad0000 	.word	0x0bad0000

000013b0 <event_handler>:
	switch (p_event->type) {
    13b0:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
    13b2:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    13b4:	2a01      	cmp	r2, #1
    13b6:	d008      	beq.n	13ca <event_handler+0x1a>
    13b8:	2a02      	cmp	r2, #2
    13ba:	d008      	beq.n	13ce <event_handler+0x1e>
    13bc:	b94a      	cbnz	r2, 13d2 <event_handler+0x22>
		dev_data->res = NRFX_SUCCESS;
    13be:	4a06      	ldr	r2, [pc, #24]	; (13d8 <event_handler+0x28>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    13c0:	621a      	str	r2, [r3, #32]
	z_impl_k_sem_give(sem);
    13c2:	f103 0010 	add.w	r0, r3, #16
    13c6:	f001 ba9f 	b.w	2908 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    13ca:	4a04      	ldr	r2, [pc, #16]	; (13dc <event_handler+0x2c>)
    13cc:	e7f8      	b.n	13c0 <event_handler+0x10>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    13ce:	4a04      	ldr	r2, [pc, #16]	; (13e0 <event_handler+0x30>)
    13d0:	e7f6      	b.n	13c0 <event_handler+0x10>
		dev_data->res = NRFX_ERROR_INTERNAL;
    13d2:	4a04      	ldr	r2, [pc, #16]	; (13e4 <event_handler+0x34>)
    13d4:	e7f4      	b.n	13c0 <event_handler+0x10>
    13d6:	bf00      	nop
    13d8:	0bad0000 	.word	0x0bad0000
    13dc:	0bae0001 	.word	0x0bae0001
    13e0:	0bae0002 	.word	0x0bae0002
    13e4:	0bad0001 	.word	0x0bad0001

000013e8 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
    13e8:	b510      	push	{r4, lr}
    13ea:	4604      	mov	r4, r0
    13ec:	2200      	movs	r2, #0
    13ee:	2101      	movs	r1, #1
    13f0:	2003      	movs	r0, #3
    13f2:	f7ff fb2b 	bl	a4c <z_arm_irq_priority_set>
	return dev->config->config_info;
    13f6:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
    13f8:	4a08      	ldr	r2, [pc, #32]	; (141c <spi_0_init+0x34>)
	return dev->config->config_info;
    13fa:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
    13fc:	4623      	mov	r3, r4
    13fe:	f100 0108 	add.w	r1, r0, #8
    1402:	f000 fa6d 	bl	18e0 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <spi_0_init+0x38>)
    1408:	4298      	cmp	r0, r3
    140a:	d104      	bne.n	1416 <spi_0_init+0x2e>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    140c:	68a0      	ldr	r0, [r4, #8]
    140e:	f002 f967 	bl	36e0 <spi_context_unlock_unconditionally>
	return 0;
    1412:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
    1414:	bd10      	pop	{r4, pc}
		return -EBUSY;
    1416:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPI_DEVICE(0);
    141a:	e7fb      	b.n	1414 <spi_0_init+0x2c>
    141c:	00003721 	.word	0x00003721
    1420:	0bad0000 	.word	0x0bad0000

00001424 <transfer_next_chunk>:
{
    1424:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    1426:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    1428:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    142a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
    142c:	b085      	sub	sp, #20
    142e:	b982      	cbnz	r2, 1452 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    1430:	bb7b      	cbnz	r3, 1492 <transfer_next_chunk+0x6e>
	int error = 0;
    1432:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    1434:	2200      	movs	r2, #0
    1436:	4611      	mov	r1, r2
    1438:	4628      	mov	r0, r5
    143a:	f002 f927 	bl	368c <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    143e:	626c      	str	r4, [r5, #36]	; 0x24
    1440:	f105 0014 	add.w	r0, r5, #20
    1444:	f001 fa60 	bl	2908 <z_impl_k_sem_give>
	dev_data->busy = false;
    1448:	2300      	movs	r3, #0
    144a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    144e:	b005      	add	sp, #20
    1450:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    1452:	4611      	mov	r1, r2
    1454:	b113      	cbz	r3, 145c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
    1456:	429a      	cmp	r2, r3
    1458:	bf28      	it	cs
    145a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    145c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		dev_data->chunk_len = chunk_len;
    145e:	64a9      	str	r1, [r5, #72]	; 0x48
		xfer.p_tx_buffer = ctx->tx_buf;
    1460:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    1462:	b1c4      	cbz	r4, 1496 <transfer_next_chunk+0x72>
    1464:	2a00      	cmp	r2, #0
    1466:	bf18      	it	ne
    1468:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    146a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    146c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    146e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    1470:	b19a      	cbz	r2, 149a <transfer_next_chunk+0x76>
    1472:	2b00      	cmp	r3, #0
    1474:	bf18      	it	ne
    1476:	460b      	movne	r3, r1
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    1478:	9303      	str	r3, [sp, #12]
	return dev->config->config_info;
    147a:	6803      	ldr	r3, [r0, #0]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    147c:	2200      	movs	r2, #0
    147e:	6898      	ldr	r0, [r3, #8]
    1480:	4669      	mov	r1, sp
    1482:	f000 fad3 	bl	1a2c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    1486:	4b06      	ldr	r3, [pc, #24]	; (14a0 <transfer_next_chunk+0x7c>)
    1488:	4298      	cmp	r0, r3
    148a:	d0e0      	beq.n	144e <transfer_next_chunk+0x2a>
		error = -EIO;
    148c:	f06f 0404 	mvn.w	r4, #4
    1490:	e7d0      	b.n	1434 <transfer_next_chunk+0x10>
    1492:	4619      	mov	r1, r3
    1494:	e7e2      	b.n	145c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    1496:	4622      	mov	r2, r4
    1498:	e7e7      	b.n	146a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    149a:	4613      	mov	r3, r2
    149c:	e7ec      	b.n	1478 <transfer_next_chunk+0x54>
    149e:	bf00      	nop
    14a0:	0bad0000 	.word	0x0bad0000

000014a4 <spi_nrfx_transceive>:
{
    14a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    14a8:	4680      	mov	r8, r0
	k_sem_take(&ctx->lock, K_FOREVER);
    14aa:	6880      	ldr	r0, [r0, #8]
    14ac:	4689      	mov	r9, r1
    14ae:	4617      	mov	r7, r2
    14b0:	461e      	mov	r6, r3
    14b2:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    14b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    14b8:	f001 fa4c 	bl	2954 <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    14bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
    14c0:	6823      	ldr	r3, [r4, #0]
    14c2:	4599      	cmp	r9, r3
    14c4:	d05c      	beq.n	1580 <spi_nrfx_transceive+0xdc>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    14c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    14ca:	f641 0109 	movw	r1, #6153	; 0x1809
    14ce:	4019      	ands	r1, r3
    14d0:	f040 80a6 	bne.w	1620 <spi_nrfx_transceive+0x17c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    14d4:	f3c3 1345 	ubfx	r3, r3, #5, #6
    14d8:	2b08      	cmp	r3, #8
    14da:	f040 80a1 	bne.w	1620 <spi_nrfx_transceive+0x17c>
	if (spi_cfg->frequency < 125000) {
    14de:	f8d9 2000 	ldr.w	r2, [r9]
    14e2:	4b51      	ldr	r3, [pc, #324]	; (1628 <spi_nrfx_transceive+0x184>)
    14e4:	429a      	cmp	r2, r3
    14e6:	f240 809b 	bls.w	1620 <spi_nrfx_transceive+0x17c>
	return dev->config->config_info;
    14ea:	f8d8 3000 	ldr.w	r3, [r8]
    14ee:	689d      	ldr	r5, [r3, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    14f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
	ctx->config = spi_cfg;
    14f4:	f8c4 9000 	str.w	r9, [r4]
    14f8:	b18b      	cbz	r3, 151e <spi_nrfx_transceive+0x7a>
    14fa:	6818      	ldr	r0, [r3, #0]
    14fc:	b178      	cbz	r0, 151e <spi_nrfx_transceive+0x7a>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    14fe:	685a      	ldr	r2, [r3, #4]
    1500:	6843      	ldr	r3, [r0, #4]
    1502:	f8d3 a000 	ldr.w	sl, [r3]
    1506:	2301      	movs	r3, #1
    1508:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
    150a:	6822      	ldr	r2, [r4, #0]
    150c:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    150e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
    1512:	43d2      	mvns	r2, r2
    1514:	e9d3 0100 	ldrd	r0, r1, [r3]
    1518:	0fd2      	lsrs	r2, r2, #31
    151a:	f002 f8ae 	bl	367a <gpio_pin_write>
	nrf_spi_configure(spi->p_reg,
    151e:	682a      	ldr	r2, [r5, #0]
    1520:	f8b9 5004 	ldrh.w	r5, [r9, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    1524:	07a9      	lsls	r1, r5, #30
    1526:	f005 0304 	and.w	r3, r5, #4
    152a:	d556      	bpl.n	15da <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_2;
    152c:	2b00      	cmp	r3, #0
    152e:	bf14      	ite	ne
    1530:	2303      	movne	r3, #3
    1532:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    1534:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    1536:	f3c5 1500 	ubfx	r5, r5, #4, #1
    153a:	d052      	beq.n	15e2 <spi_nrfx_transceive+0x13e>
    153c:	2b03      	cmp	r3, #3
    153e:	d053      	beq.n	15e8 <spi_nrfx_transceive+0x144>
    1540:	2b01      	cmp	r3, #1
    1542:	d101      	bne.n	1548 <spi_nrfx_transceive+0xa4>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    1544:	f045 0502 	orr.w	r5, r5, #2
	nrf_spi_frequency_set(spi->p_reg,
    1548:	f8d9 1000 	ldr.w	r1, [r9]
	if (frequency < 250000) {
    154c:	4b37      	ldr	r3, [pc, #220]	; (162c <spi_nrfx_transceive+0x188>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    154e:	f8c2 5554 	str.w	r5, [r2, #1364]	; 0x554
    1552:	4299      	cmp	r1, r3
    1554:	d94b      	bls.n	15ee <spi_nrfx_transceive+0x14a>
	} else if (frequency < 500000) {
    1556:	4b36      	ldr	r3, [pc, #216]	; (1630 <spi_nrfx_transceive+0x18c>)
    1558:	4299      	cmp	r1, r3
    155a:	d94b      	bls.n	15f4 <spi_nrfx_transceive+0x150>
	} else if (frequency < 1000000) {
    155c:	4b35      	ldr	r3, [pc, #212]	; (1634 <spi_nrfx_transceive+0x190>)
    155e:	4299      	cmp	r1, r3
    1560:	d94b      	bls.n	15fa <spi_nrfx_transceive+0x156>
	} else if (frequency < 2000000) {
    1562:	4b35      	ldr	r3, [pc, #212]	; (1638 <spi_nrfx_transceive+0x194>)
    1564:	4299      	cmp	r1, r3
    1566:	d94b      	bls.n	1600 <spi_nrfx_transceive+0x15c>
	} else if (frequency < 4000000) {
    1568:	4b34      	ldr	r3, [pc, #208]	; (163c <spi_nrfx_transceive+0x198>)
    156a:	4299      	cmp	r1, r3
    156c:	d94b      	bls.n	1606 <spi_nrfx_transceive+0x162>
		return NRF_SPI_FREQ_8M;
    156e:	4b34      	ldr	r3, [pc, #208]	; (1640 <spi_nrfx_transceive+0x19c>)
    1570:	4299      	cmp	r1, r3
    1572:	bf34      	ite	cc
    1574:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    1578:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    157c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    1580:	2301      	movs	r3, #1
    1582:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if (tx_bufs) {
    1586:	2f00      	cmp	r7, #0
    1588:	d040      	beq.n	160c <spi_nrfx_transceive+0x168>
		ctx->current_tx = tx_bufs->buffers;
    158a:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    158c:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    158e:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    1590:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    1592:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    1594:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    1596:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    1598:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    159a:	2e00      	cmp	r6, #0
    159c:	d03b      	beq.n	1616 <spi_nrfx_transceive+0x172>
		ctx->current_rx = rx_bufs->buffers;
    159e:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    15a0:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    15a2:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    15a4:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    15a6:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    15a8:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    15aa:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    15ac:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    15ae:	2200      	movs	r2, #0
    15b0:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    15b2:	2101      	movs	r1, #1
    15b4:	4620      	mov	r0, r4
    15b6:	f002 f869 	bl	368c <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    15ba:	4640      	mov	r0, r8
    15bc:	f7ff ff32 	bl	1424 <transfer_next_chunk>
    15c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    15c4:	f104 0014 	add.w	r0, r4, #20
    15c8:	f001 f9c4 	bl	2954 <z_impl_k_sem_take>
	status = ctx->sync_status;
    15cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
	z_impl_k_sem_give(sem);
    15ce:	1d20      	adds	r0, r4, #4
    15d0:	f001 f99a 	bl	2908 <z_impl_k_sem_give>
}
    15d4:	4628      	mov	r0, r5
    15d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return NRF_SPI_MODE_0;
    15da:	3b00      	subs	r3, #0
    15dc:	bf18      	it	ne
    15de:	2301      	movne	r3, #1
    15e0:	e7a8      	b.n	1534 <spi_nrfx_transceive+0x90>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    15e2:	f045 0504 	orr.w	r5, r5, #4
        break;
    15e6:	e7af      	b.n	1548 <spi_nrfx_transceive+0xa4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    15e8:	f045 0506 	orr.w	r5, r5, #6
        break;
    15ec:	e7ac      	b.n	1548 <spi_nrfx_transceive+0xa4>
		return NRF_SPI_FREQ_125K;
    15ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    15f2:	e7c3      	b.n	157c <spi_nrfx_transceive+0xd8>
		return NRF_SPI_FREQ_250K;
    15f4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    15f8:	e7c0      	b.n	157c <spi_nrfx_transceive+0xd8>
		return NRF_SPI_FREQ_500K;
    15fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    15fe:	e7bd      	b.n	157c <spi_nrfx_transceive+0xd8>
		return NRF_SPI_FREQ_1M;
    1600:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1604:	e7ba      	b.n	157c <spi_nrfx_transceive+0xd8>
		return NRF_SPI_FREQ_2M;
    1606:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    160a:	e7b7      	b.n	157c <spi_nrfx_transceive+0xd8>
		ctx->tx_count = 0;
    160c:	e9c4 770a 	strd	r7, r7, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    1610:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
    1614:	e7c1      	b.n	159a <spi_nrfx_transceive+0xf6>
		ctx->rx_count = 0;
    1616:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    161a:	e9c4 6610 	strd	r6, r6, [r4, #64]	; 0x40
    161e:	e7c6      	b.n	15ae <spi_nrfx_transceive+0x10a>
		return -EINVAL;
    1620:	f06f 0515 	mvn.w	r5, #21
    1624:	e7d3      	b.n	15ce <spi_nrfx_transceive+0x12a>
    1626:	bf00      	nop
    1628:	0001e847 	.word	0x0001e847
    162c:	0003d08f 	.word	0x0003d08f
    1630:	0007a11f 	.word	0x0007a11f
    1634:	000f423f 	.word	0x000f423f
    1638:	001e847f 	.word	0x001e847f
    163c:	003d08ff 	.word	0x003d08ff
    1640:	007a1200 	.word	0x007a1200

00001644 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1644:	4b04      	ldr	r3, [pc, #16]	; (1658 <errata_108+0x14>)
    1646:	6818      	ldr	r0, [r3, #0]
    1648:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    164a:	bf04      	itt	eq
    164c:	4b03      	ldreq	r3, [pc, #12]	; (165c <errata_108+0x18>)
    164e:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    1650:	1f83      	subs	r3, r0, #6
    1652:	4258      	negs	r0, r3
    1654:	4158      	adcs	r0, r3
    1656:	4770      	bx	lr
    1658:	10000130 	.word	0x10000130
    165c:	f0000fe0 	.word	0xf0000fe0

00001660 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1660:	4b07      	ldr	r3, [pc, #28]	; (1680 <errata_16+0x20>)
    1662:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    1664:	2b06      	cmp	r3, #6
    1666:	d109      	bne.n	167c <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1668:	4b06      	ldr	r3, [pc, #24]	; (1684 <errata_16+0x24>)
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1670:	3b03      	subs	r3, #3
    1672:	2b03      	cmp	r3, #3
    1674:	d802      	bhi.n	167c <errata_16+0x1c>
    1676:	4a04      	ldr	r2, [pc, #16]	; (1688 <errata_16+0x28>)
    1678:	5cd0      	ldrb	r0, [r2, r3]
    167a:	4770      	bx	lr
            }
        break;

    }

    return false;
    167c:	2000      	movs	r0, #0
}
    167e:	4770      	bx	lr
    1680:	f0000fe0 	.word	0xf0000fe0
    1684:	f0000fe8 	.word	0xf0000fe8
    1688:	00003e7e 	.word	0x00003e7e

0000168c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    168c:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    168e:	f7ff ffd9 	bl	1644 <errata_108>
    1692:	b128      	cbz	r0, 16a0 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1694:	4b7c      	ldr	r3, [pc, #496]	; (1888 <SystemInit+0x1fc>)
    1696:	4a7d      	ldr	r2, [pc, #500]	; (188c <SystemInit+0x200>)
    1698:	681b      	ldr	r3, [r3, #0]
    169a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    169e:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    16a0:	f7ff ffde 	bl	1660 <errata_16>
    16a4:	b110      	cbz	r0, 16ac <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    16a6:	4b7a      	ldr	r3, [pc, #488]	; (1890 <SystemInit+0x204>)
    16a8:	4a7a      	ldr	r2, [pc, #488]	; (1894 <SystemInit+0x208>)
    16aa:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    16ac:	f7ff ffca 	bl	1644 <errata_108>
    16b0:	b128      	cbz	r0, 16be <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    16b2:	4b79      	ldr	r3, [pc, #484]	; (1898 <SystemInit+0x20c>)
    16b4:	4a79      	ldr	r2, [pc, #484]	; (189c <SystemInit+0x210>)
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    16bc:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    16be:	f7ff ffcf 	bl	1660 <errata_16>
    16c2:	b120      	cbz	r0, 16ce <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    16c4:	4a76      	ldr	r2, [pc, #472]	; (18a0 <SystemInit+0x214>)
    16c6:	68d3      	ldr	r3, [r2, #12]
    16c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    16cc:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    16ce:	f7ff ffb9 	bl	1644 <errata_108>
    16d2:	b140      	cbz	r0, 16e6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    16d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16d8:	2200      	movs	r2, #0
    16da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    16de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    16e2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    16e6:	f7ff ffbb 	bl	1660 <errata_16>
    16ea:	b110      	cbz	r0, 16f2 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    16ec:	4b6d      	ldr	r3, [pc, #436]	; (18a4 <SystemInit+0x218>)
    16ee:	2203      	movs	r2, #3
    16f0:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    16f2:	f7ff ffb5 	bl	1660 <errata_16>
    16f6:	b140      	cbz	r0, 170a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    16f8:	4b6b      	ldr	r3, [pc, #428]	; (18a8 <SystemInit+0x21c>)
    16fa:	2205      	movs	r2, #5
    16fc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    16fe:	2201      	movs	r2, #1
    1700:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    1702:	2200      	movs	r2, #0
    1704:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1706:	223f      	movs	r2, #63	; 0x3f
    1708:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    170a:	4b68      	ldr	r3, [pc, #416]	; (18ac <SystemInit+0x220>)
    170c:	681a      	ldr	r2, [r3, #0]
    170e:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1710:	bf0b      	itete	eq
    1712:	4b67      	ldreq	r3, [pc, #412]	; (18b0 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    1714:	4b67      	ldrne	r3, [pc, #412]	; (18b4 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1716:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    1718:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    171a:	bf02      	ittt	eq
    171c:	3308      	addeq	r3, #8
    171e:	681b      	ldreq	r3, [r3, #0]
    1720:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    1724:	2a06      	cmp	r2, #6
    1726:	d14d      	bne.n	17c4 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    1728:	3b03      	subs	r3, #3
    172a:	2b03      	cmp	r3, #3
    172c:	d803      	bhi.n	1736 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    172e:	4a62      	ldr	r2, [pc, #392]	; (18b8 <SystemInit+0x22c>)
    1730:	5cd3      	ldrb	r3, [r2, r3]
    1732:	2b00      	cmp	r3, #0
    1734:	d046      	beq.n	17c4 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    173a:	4b60      	ldr	r3, [pc, #384]	; (18bc <SystemInit+0x230>)
    173c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1740:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1744:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1748:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    174c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1750:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1754:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1758:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    175c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1760:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1764:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1768:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    176c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1770:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1774:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1778:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    177c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1780:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1784:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1788:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    178c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1790:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1794:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1798:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    179c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    17a0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    17a4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    17a8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    17ac:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    17b0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    17b4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    17b8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    17bc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    17c0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    17c4:	f7ff ff3e 	bl	1644 <errata_108>
    17c8:	b128      	cbz	r0, 17d6 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    17ca:	4b3d      	ldr	r3, [pc, #244]	; (18c0 <SystemInit+0x234>)
    17cc:	4a3d      	ldr	r2, [pc, #244]	; (18c4 <SystemInit+0x238>)
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    17d4:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    17d6:	f7ff ff35 	bl	1644 <errata_108>
    17da:	b148      	cbz	r0, 17f0 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    17dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    17e4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    17e6:	bf44      	itt	mi
    17e8:	f06f 0201 	mvnmi.w	r2, #1
    17ec:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    17f0:	4b2e      	ldr	r3, [pc, #184]	; (18ac <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	2b06      	cmp	r3, #6
    17f6:	d109      	bne.n	180c <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    17f8:	4b2e      	ldr	r3, [pc, #184]	; (18b4 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    17fa:	681b      	ldr	r3, [r3, #0]
    17fc:	3b03      	subs	r3, #3
    17fe:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1800:	bf81      	itttt	hi
    1802:	4a31      	ldrhi	r2, [pc, #196]	; (18c8 <SystemInit+0x23c>)
    1804:	6813      	ldrhi	r3, [r2, #0]
    1806:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    180a:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    180c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1810:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1814:	2a00      	cmp	r2, #0
    1816:	db03      	blt.n	1820 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1818:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    181c:	2b00      	cmp	r3, #0
    181e:	da2f      	bge.n	1880 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1820:	4b2a      	ldr	r3, [pc, #168]	; (18cc <SystemInit+0x240>)
    1822:	2201      	movs	r2, #1
    1824:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1828:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    182c:	2a00      	cmp	r2, #0
    182e:	d0fb      	beq.n	1828 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    1830:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1834:	2115      	movs	r1, #21
    1836:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    183a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    183e:	2a00      	cmp	r2, #0
    1840:	d0fb      	beq.n	183a <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    1842:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1846:	2215      	movs	r2, #21
    1848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    184c:	4b1f      	ldr	r3, [pc, #124]	; (18cc <SystemInit+0x240>)
    184e:	461a      	mov	r2, r3
    1850:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1854:	2900      	cmp	r1, #0
    1856:	d0fb      	beq.n	1850 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1858:	2100      	movs	r1, #0
    185a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    185e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1862:	2b00      	cmp	r3, #0
    1864:	d0fb      	beq.n	185e <SystemInit+0x1d2>
    1866:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    186a:	4919      	ldr	r1, [pc, #100]	; (18d0 <SystemInit+0x244>)
    186c:	4b19      	ldr	r3, [pc, #100]	; (18d4 <SystemInit+0x248>)
    186e:	68ca      	ldr	r2, [r1, #12]
    1870:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1874:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1876:	60cb      	str	r3, [r1, #12]
    1878:	f3bf 8f4f 	dsb	sy
    __NOP();
    187c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    187e:	e7fd      	b.n	187c <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1880:	4b15      	ldr	r3, [pc, #84]	; (18d8 <SystemInit+0x24c>)
    1882:	4a16      	ldr	r2, [pc, #88]	; (18dc <SystemInit+0x250>)
    1884:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    1886:	bd08      	pop	{r3, pc}
    1888:	10000324 	.word	0x10000324
    188c:	40013540 	.word	0x40013540
    1890:	4007c074 	.word	0x4007c074
    1894:	baadf00d 	.word	0xbaadf00d
    1898:	10000244 	.word	0x10000244
    189c:	4000053c 	.word	0x4000053c
    18a0:	e000edf0 	.word	0xe000edf0
    18a4:	400005a0 	.word	0x400005a0
    18a8:	40005610 	.word	0x40005610
    18ac:	10000130 	.word	0x10000130
    18b0:	f0000fe0 	.word	0xf0000fe0
    18b4:	10000134 	.word	0x10000134
    18b8:	00003e7a 	.word	0x00003e7a
    18bc:	4000c000 	.word	0x4000c000
    18c0:	10000258 	.word	0x10000258
    18c4:	40000ee4 	.word	0x40000ee4
    18c8:	4000173c 	.word	0x4000173c
    18cc:	4001e000 	.word	0x4001e000
    18d0:	e000ed00 	.word	0xe000ed00
    18d4:	05fa0004 	.word	0x05fa0004
    18d8:	20005014 	.word	0x20005014
    18dc:	03d09000 	.word	0x03d09000

000018e0 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    18e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    18e4:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    18e6:	4d4e      	ldr	r5, [pc, #312]	; (1a20 <nrfx_spi_init+0x140>)
    18e8:	262c      	movs	r6, #44	; 0x2c
    18ea:	4366      	muls	r6, r4
    18ec:	19af      	adds	r7, r5, r6
    18ee:	f897 c01c 	ldrb.w	ip, [r7, #28]
    18f2:	f1bc 0f00 	cmp.w	ip, #0
    18f6:	f040 8091 	bne.w	1a1c <nrfx_spi_init+0x13c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    18fa:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
    18fc:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    18fe:	f891 e000 	ldrb.w	lr, [r1]
    1902:	7b0f      	ldrb	r7, [r1, #12]
    1904:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    1908:	2301      	movs	r3, #1
    190a:	fa03 f30e 	lsl.w	r3, r3, lr
    190e:	2f01      	cmp	r7, #1
    1910:	bf94      	ite	ls
    1912:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    1916:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    191a:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
    191e:	f04f 0c01 	mov.w	ip, #1
    1922:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    1926:	784b      	ldrb	r3, [r1, #1]
    1928:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    192a:	bf1f      	itttt	ne
    192c:	fa0c fc03 	lslne.w	ip, ip, r3
    p_reg->OUTCLR = clr_mask;
    1930:	f8c6 c50c 	strne.w	ip, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1934:	f503 7ce0 	addne.w	ip, r3, #448	; 0x1c0
    1938:	f04f 0803 	movne.w	r8, #3
    193c:	bf18      	it	ne
    193e:	f846 802c 	strne.w	r8, [r6, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    1942:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    1944:	bf08      	it	eq
    1946:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    194a:	2eff      	cmp	r6, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    194c:	bf1f      	itttt	ne
    194e:	f891 900e 	ldrbne.w	r9, [r1, #14]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1952:	f506 7ce0 	addne.w	ip, r6, #448	; 0x1c0
    1956:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    195a:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    195e:	bf18      	it	ne
    1960:	f84a 902c 	strne.w	r9, [sl, ip, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
    1964:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    1968:	fb0c 5c04 	mla	ip, ip, r4, r5
        miso_pin = p_config->miso_pin;
    196c:	bf18      	it	ne
    196e:	46b0      	movne	r8, r6
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
    1970:	f88c 601f 	strb.w	r6, [ip, #31]
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1974:	78ce      	ldrb	r6, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    1976:	bf08      	it	eq
    1978:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    197c:	2eff      	cmp	r6, #255	; 0xff
    197e:	d00d      	beq.n	199c <nrfx_spi_init+0xbc>
    p_reg->OUTSET = set_mask;
    1980:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1984:	f04f 0c01 	mov.w	ip, #1
    1988:	fa0c fc06 	lsl.w	ip, ip, r6
    p_reg->OUTSET = set_mask;
    198c:	f8c9 c508 	str.w	ip, [r9, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1990:	f506 7ce0 	add.w	ip, r6, #448	; 0x1c0
    1994:	f04f 0a03 	mov.w	sl, #3
    1998:	f849 a02c 	str.w	sl, [r9, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    199c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    19a0:	fb0c 5c04 	mla	ip, ip, r4, r5
    19a4:	f88c 601e 	strb.w	r6, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    19a8:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
    19aa:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    19ae:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = (uint32_t)frequency;
    19b2:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELMISO = miso_pin;
    19b4:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    19b8:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    19bc:	7b4b      	ldrb	r3, [r1, #13]
    19be:	3b00      	subs	r3, #0
    19c0:	bf18      	it	ne
    19c2:	2301      	movne	r3, #1
    switch (spi_mode)
    19c4:	2f02      	cmp	r7, #2
    19c6:	d023      	beq.n	1a10 <nrfx_spi_init+0x130>
    19c8:	2f03      	cmp	r7, #3
    19ca:	d024      	beq.n	1a16 <nrfx_spi_init+0x136>
    19cc:	2f01      	cmp	r7, #1
    19ce:	d101      	bne.n	19d4 <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    19d0:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    19d4:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    19d8:	232c      	movs	r3, #44	; 0x2c
    19da:	fb03 5304 	mla	r3, r3, r4, r5
    19de:	7949      	ldrb	r1, [r1, #5]
    19e0:	f883 1020 	strb.w	r1, [r3, #32]

    if (p_cb->handler)
    19e4:	b112      	cbz	r2, 19ec <nrfx_spi_init+0x10c>
    p_reg->INTENSET = mask;
    19e6:	2304      	movs	r3, #4
    19e8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    19ec:	2301      	movs	r3, #1
    19ee:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spi_int_enable(p_spi, NRF_SPI_INT_READY_MASK);
    }

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    19f2:	b11a      	cbz	r2, 19fc <nrfx_spi_init+0x11c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    19f4:	f340 3007 	sbfx	r0, r0, #12, #8
    19f8:	f7ff f818 	bl	a2c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    19fc:	232c      	movs	r3, #44	; 0x2c
    19fe:	fb03 5404 	mla	r4, r3, r4, r5
    1a02:	2300      	movs	r3, #0
    1a04:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    1a06:	4807      	ldr	r0, [pc, #28]	; (1a24 <nrfx_spi_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1a08:	2301      	movs	r3, #1
    1a0a:	7723      	strb	r3, [r4, #28]
}
    1a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    1a10:	f043 0304 	orr.w	r3, r3, #4
        break;
    1a14:	e7de      	b.n	19d4 <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    1a16:	f043 0306 	orr.w	r3, r3, #6
        break;
    1a1a:	e7db      	b.n	19d4 <nrfx_spi_init+0xf4>
        return err_code;
    1a1c:	4802      	ldr	r0, [pc, #8]	; (1a28 <nrfx_spi_init+0x148>)
    1a1e:	e7f5      	b.n	1a0c <nrfx_spi_init+0x12c>
    1a20:	20000044 	.word	0x20000044
    1a24:	0bad0000 	.word	0x0bad0000
    1a28:	0bad0005 	.word	0x0bad0005

00001a2c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    1a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1a30:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    1a32:	4d41      	ldr	r5, [pc, #260]	; (1b38 <nrfx_spi_xfer+0x10c>)
    1a34:	232c      	movs	r3, #44	; 0x2c
    1a36:	437b      	muls	r3, r7
{
    1a38:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
    1a3a:	18ea      	adds	r2, r5, r3
{
    1a3c:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    1a3e:	7f51      	ldrb	r1, [r2, #29]
{
    1a40:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    1a42:	2900      	cmp	r1, #0
    1a44:	d176      	bne.n	1b34 <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    1a46:	f855 c003 	ldr.w	ip, [r5, r3]
    1a4a:	f1bc 0f00 	cmp.w	ip, #0
    1a4e:	d001      	beq.n	1a54 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    1a50:	2301      	movs	r3, #1
    1a52:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    1a54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1a58:	242c      	movs	r4, #44	; 0x2c
    1a5a:	fb04 5407 	mla	r4, r4, r7, r5
    1a5e:	f104 090c 	add.w	r9, r4, #12
    1a62:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1a66:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->abort = false;
    1a68:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1a6a:	2aff      	cmp	r2, #255	; 0xff
    p_cb->abort = false;
    1a6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    1a70:	bf1f      	itttt	ne
    1a72:	2301      	movne	r3, #1
    1a74:	4093      	lslne	r3, r2
    p_reg->OUTCLR = clr_mask;
    1a76:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    1a7a:	f8c2 350c 	strne.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
    1a7e:	232c      	movs	r3, #44	; 0x2c
    1a80:	f1be 0f00 	cmp.w	lr, #0
    1a84:	d007      	beq.n	1a96 <nrfx_spi_xfer+0x6a>
    {
        p_cb->transfer_in_progress = false;
    1a86:	fb03 5307 	mla	r3, r3, r7, r5
    1a8a:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    1a8c:	482b      	ldr	r0, [pc, #172]	; (1b3c <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    1a8e:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    1a90:	b003      	add	sp, #12
    1a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    1a96:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->INTENCLR = mask;
    1a9a:	2204      	movs	r2, #4
    1a9c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    p_cb->bytes_transferred = 0;
    1aa0:	fb03 5307 	mla	r3, r3, r7, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1aa4:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1aa8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    1aac:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
    1ab0:	9200      	str	r2, [sp, #0]
    (void)dummy;
    1ab2:	9a00      	ldr	r2, [sp, #0]
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    1ab4:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
    1ab6:	b18a      	cbz	r2, 1adc <nrfx_spi_xfer+0xb0>
    1ab8:	6833      	ldr	r3, [r6, #0]
    1aba:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    1abc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    1ac0:	2a01      	cmp	r2, #1
    1ac2:	d90e      	bls.n	1ae2 <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    1ac4:	6833      	ldr	r3, [r6, #0]
    1ac6:	785b      	ldrb	r3, [r3, #1]
    1ac8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    1acc:	f1bc 0f00 	cmp.w	ip, #0
    1ad0:	d010      	beq.n	1af4 <nrfx_spi_xfer+0xc8>
    p_reg->INTENSET = mask;
    1ad2:	2304      	movs	r3, #4
    1ad4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    1ad8:	4819      	ldr	r0, [pc, #100]	; (1b40 <nrfx_spi_xfer+0x114>)
    1ada:	e7d9      	b.n	1a90 <nrfx_spi_xfer+0x64>
    nrf_spi_txd_set(p_spi,
    1adc:	f893 3020 	ldrb.w	r3, [r3, #32]
    1ae0:	e7ec      	b.n	1abc <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    1ae2:	68f3      	ldr	r3, [r6, #12]
    1ae4:	2b01      	cmp	r3, #1
    1ae6:	d9f1      	bls.n	1acc <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    1ae8:	232c      	movs	r3, #44	; 0x2c
    1aea:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->TXD = data;
    1aee:	f893 3020 	ldrb.w	r3, [r3, #32]
    1af2:	e7e9      	b.n	1ac8 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1af4:	212c      	movs	r1, #44	; 0x2c
    1af6:	fb07 5101 	mla	r1, r7, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1afa:	4666      	mov	r6, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1afc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    1b00:	2b00      	cmp	r3, #0
    1b02:	d0fb      	beq.n	1afc <nrfx_spi_xfer+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1b04:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1b08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1b0c:	9301      	str	r3, [sp, #4]
        } while (transfer_byte(p_spi, p_cb));
    1b0e:	4620      	mov	r0, r4
    (void)dummy;
    1b10:	9b01      	ldr	r3, [sp, #4]
    1b12:	f001 fe4a 	bl	37aa <transfer_byte>
    1b16:	2800      	cmp	r0, #0
    1b18:	d1f0      	bne.n	1afc <nrfx_spi_xfer+0xd0>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1b1a:	232c      	movs	r3, #44	; 0x2c
    1b1c:	fb03 5507 	mla	r5, r3, r7, r5
    1b20:	7faa      	ldrb	r2, [r5, #30]
    1b22:	2aff      	cmp	r2, #255	; 0xff
    1b24:	d0d8      	beq.n	1ad8 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1b26:	2301      	movs	r3, #1
    1b28:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    1b2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1b2e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    1b32:	e7d1      	b.n	1ad8 <nrfx_spi_xfer+0xac>
        return err_code;
    1b34:	4803      	ldr	r0, [pc, #12]	; (1b44 <nrfx_spi_xfer+0x118>)
    1b36:	e7ab      	b.n	1a90 <nrfx_spi_xfer+0x64>
    1b38:	20000044 	.word	0x20000044
    1b3c:	0bad0003 	.word	0x0bad0003
    1b40:	0bad0000 	.word	0x0bad0000
    1b44:	0bad000b 	.word	0x0bad000b

00001b48 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    1b48:	b507      	push	{r0, r1, r2, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1b4a:	4b10      	ldr	r3, [pc, #64]	; (1b8c <nrfx_spi_0_irq_handler+0x44>)
    if (!transfer_byte(p_spi, p_cb))
    1b4c:	4910      	ldr	r1, [pc, #64]	; (1b90 <nrfx_spi_0_irq_handler+0x48>)
    1b4e:	4811      	ldr	r0, [pc, #68]	; (1b94 <nrfx_spi_0_irq_handler+0x4c>)
    1b50:	2200      	movs	r2, #0
    1b52:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1b58:	9b01      	ldr	r3, [sp, #4]
    1b5a:	f001 fe26 	bl	37aa <transfer_byte>
    1b5e:	b990      	cbnz	r0, 1b86 <nrfx_spi_0_irq_handler+0x3e>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1b60:	7f8a      	ldrb	r2, [r1, #30]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    1b62:	480d      	ldr	r0, [pc, #52]	; (1b98 <nrfx_spi_0_irq_handler+0x50>)
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    1b64:	2aff      	cmp	r2, #255	; 0xff
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1b66:	bf1f      	itttt	ne
    1b68:	2301      	movne	r3, #1
    1b6a:	4093      	lslne	r3, r2
    p_reg->OUTSET = set_mask;
    1b6c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    1b70:	f8c2 3508 	strne.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    1b74:	2300      	movs	r3, #0
    1b76:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    1b78:	720b      	strb	r3, [r1, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    1b7a:	e9d1 3100 	ldrd	r3, r1, [r1]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
    1b7e:	b003      	add	sp, #12
    1b80:	f85d eb04 	ldr.w	lr, [sp], #4
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    1b84:	4718      	bx	r3
}
    1b86:	b003      	add	sp, #12
    1b88:	f85d fb04 	ldr.w	pc, [sp], #4
    1b8c:	40003108 	.word	0x40003108
    1b90:	20000044 	.word	0x20000044
    1b94:	40003000 	.word	0x40003000
    1b98:	2000004c 	.word	0x2000004c

00001b9c <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    1b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    1b9e:	4b33      	ldr	r3, [pc, #204]	; (1c6c <twi_rx_start_transfer+0xd0>)
    1ba0:	9301      	str	r3, [sp, #4]
{
    1ba2:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1ba4:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    1ba8:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1baa:	f001 fe32 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    1bae:	f44f 7192 	mov.w	r1, #292	; 0x124
    1bb2:	f001 fe2e 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    1bb6:	f44f 718e 	mov.w	r1, #284	; 0x11c
    1bba:	f001 fe2a 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    1bbe:	f44f 7184 	mov.w	r1, #264	; 0x108
    1bc2:	f001 fe26 	bl	3812 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
    1bc6:	2300      	movs	r3, #0
    1bc8:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    1bca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    1bce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1bd0:	2b01      	cmp	r3, #1
    1bd2:	d117      	bne.n	1c04 <twi_rx_start_transfer+0x68>
    1bd4:	6a2b      	ldr	r3, [r5, #32]
    1bd6:	065b      	lsls	r3, r3, #25
    1bd8:	d414      	bmi.n	1c04 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    1bda:	2302      	movs	r3, #2
    1bdc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1be0:	2301      	movs	r3, #1
    1be2:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    1be4:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    1be8:	2a02      	cmp	r2, #2
    1bea:	bf18      	it	ne
    1bec:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    1bee:	682b      	ldr	r3, [r5, #0]
    1bf0:	b193      	cbz	r3, 1c18 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1bf2:	f240 2386 	movw	r3, #646	; 0x286
    1bf6:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    1bf8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1bfa:	481d      	ldr	r0, [pc, #116]	; (1c70 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    1bfc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    1c00:	b003      	add	sp, #12
    1c02:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    1c04:	2301      	movs	r3, #1
    1c06:	e7e9      	b.n	1bdc <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    1c08:	4629      	mov	r1, r5
    1c0a:	4620      	mov	r0, r4
    1c0c:	f001 fe29 	bl	3862 <twi_transfer>
        while ((hw_timeout > 0) &&
    1c10:	b128      	cbz	r0, 1c1e <twi_rx_start_transfer+0x82>
               hw_timeout--;
    1c12:	9b01      	ldr	r3, [sp, #4]
    1c14:	3b01      	subs	r3, #1
    1c16:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    1c18:	9b01      	ldr	r3, [sp, #4]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	dcf4      	bgt.n	1c08 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    1c1e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1c22:	b95b      	cbnz	r3, 1c3c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1c24:	4812      	ldr	r0, [pc, #72]	; (1c70 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    1c26:	9b01      	ldr	r3, [sp, #4]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	dce9      	bgt.n	1c00 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1c2c:	2300      	movs	r3, #0
    1c2e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1c32:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    1c34:	480f      	ldr	r0, [pc, #60]	; (1c74 <twi_rx_start_transfer+0xd8>)
    1c36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    1c3a:	e7e1      	b.n	1c00 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    1c3c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1c40:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    1c44:	2b00      	cmp	r3, #0
    1c46:	d0ed      	beq.n	1c24 <twi_rx_start_transfer+0x88>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    1c48:	4a0b      	ldr	r2, [pc, #44]	; (1c78 <twi_rx_start_transfer+0xdc>)
    1c4a:	480a      	ldr	r0, [pc, #40]	; (1c74 <twi_rx_start_transfer+0xd8>)
    1c4c:	f013 0f01 	tst.w	r3, #1
    1c50:	bf18      	it	ne
    1c52:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1c54:	f013 0f02 	tst.w	r3, #2
    1c58:	f102 0201 	add.w	r2, r2, #1
    1c5c:	bf18      	it	ne
    1c5e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1c60:	f013 0f04 	tst.w	r3, #4
    1c64:	4b05      	ldr	r3, [pc, #20]	; (1c7c <twi_rx_start_transfer+0xe0>)
    1c66:	bf18      	it	ne
    1c68:	4618      	movne	r0, r3
    1c6a:	e7dc      	b.n	1c26 <twi_rx_start_transfer+0x8a>
    1c6c:	000186a0 	.word	0x000186a0
    1c70:	0bad0000 	.word	0x0bad0000
    1c74:	0bad0001 	.word	0x0bad0001
    1c78:	0bae0000 	.word	0x0bae0000
    1c7c:	0bae0002 	.word	0x0bae0002

00001c80 <twi_tx_start_transfer>:
{
    1c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    1c82:	4b30      	ldr	r3, [pc, #192]	; (1d44 <twi_tx_start_transfer+0xc4>)
    1c84:	9301      	str	r3, [sp, #4]
{
    1c86:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1c88:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    1c8c:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1c8e:	f001 fdc0 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    1c92:	f44f 7192 	mov.w	r1, #292	; 0x124
    1c96:	f001 fdbc 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    1c9a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    1c9e:	f001 fdb8 	bl	3812 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    1ca2:	f44f 7184 	mov.w	r1, #264	; 0x108
    1ca6:	f001 fdb4 	bl	3812 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
    1caa:	2300      	movs	r3, #0
    1cac:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    1cb0:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    1cb2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1cb6:	2301      	movs	r3, #1
    1cb8:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    1cba:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    1cbe:	429a      	cmp	r2, r3
    1cc0:	bf18      	it	ne
    1cc2:	6083      	strne	r3, [r0, #8]
    (void)twi_send_byte(p_twi, p_cb);
    1cc4:	4629      	mov	r1, r5
    1cc6:	f001 fdac 	bl	3822 <twi_send_byte>
    if (p_cb->handler)
    1cca:	682b      	ldr	r3, [r5, #0]
    1ccc:	b183      	cbz	r3, 1cf0 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1cce:	f240 2386 	movw	r3, #646	; 0x286
    1cd2:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    1cd4:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1cd6:	481c      	ldr	r0, [pc, #112]	; (1d48 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    1cd8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    1cdc:	b003      	add	sp, #12
    1cde:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    1ce0:	4629      	mov	r1, r5
    1ce2:	4620      	mov	r0, r4
    1ce4:	f001 fdbd 	bl	3862 <twi_transfer>
        while ((hw_timeout > 0) &&
    1ce8:	b128      	cbz	r0, 1cf6 <twi_tx_start_transfer+0x76>
            hw_timeout--;
    1cea:	9b01      	ldr	r3, [sp, #4]
    1cec:	3b01      	subs	r3, #1
    1cee:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    1cf0:	9b01      	ldr	r3, [sp, #4]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	dcf4      	bgt.n	1ce0 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
    1cf6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1cfa:	b95b      	cbnz	r3, 1d14 <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1cfc:	4812      	ldr	r0, [pc, #72]	; (1d48 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    1cfe:	9b01      	ldr	r3, [sp, #4]
    1d00:	2b00      	cmp	r3, #0
    1d02:	dceb      	bgt.n	1cdc <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1d04:	2300      	movs	r3, #0
    1d06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1d0a:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    1d0c:	480f      	ldr	r0, [pc, #60]	; (1d4c <twi_tx_start_transfer+0xcc>)
    1d0e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    1d12:	e7e3      	b.n	1cdc <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
    1d14:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1d18:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d0ed      	beq.n	1cfc <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    1d20:	4a0b      	ldr	r2, [pc, #44]	; (1d50 <twi_tx_start_transfer+0xd0>)
    1d22:	480a      	ldr	r0, [pc, #40]	; (1d4c <twi_tx_start_transfer+0xcc>)
    1d24:	f013 0f01 	tst.w	r3, #1
    1d28:	bf18      	it	ne
    1d2a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1d2c:	f013 0f02 	tst.w	r3, #2
    1d30:	f102 0201 	add.w	r2, r2, #1
    1d34:	bf18      	it	ne
    1d36:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1d38:	f013 0f04 	tst.w	r3, #4
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <twi_tx_start_transfer+0xd4>)
    1d3e:	bf18      	it	ne
    1d40:	4618      	movne	r0, r3
    1d42:	e7dc      	b.n	1cfe <twi_tx_start_transfer+0x7e>
    1d44:	000186a0 	.word	0x000186a0
    1d48:	0bad0000 	.word	0x0bad0000
    1d4c:	0bad0001 	.word	0x0bad0001
    1d50:	0bae0000 	.word	0x0bae0000
    1d54:	0bae0002 	.word	0x0bae0002

00001d58 <nrfx_twi_init>:
{
    1d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1d5a:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1d5c:	4d1d      	ldr	r5, [pc, #116]	; (1dd4 <nrfx_twi_init+0x7c>)
    1d5e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1d62:	fb0c fc07 	mul.w	ip, ip, r7
    1d66:	eb05 040c 	add.w	r4, r5, ip
    1d6a:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1d6e:	bb7e      	cbnz	r6, 1dd0 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
    1d70:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1d72:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    1d74:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    1d76:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    1d7a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    1d7e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1d82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    1d86:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
    1d88:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1d8c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    1d90:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    1d94:	f240 6c0c 	movw	ip, #1548	; 0x60c
    1d98:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    1d9c:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    1d9e:	6800      	ldr	r0, [r0, #0]
    1da0:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
    1da4:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
    1da8:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    1dac:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    1db0:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    1db2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    1db6:	b11a      	cbz	r2, 1dc0 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    1db8:	f340 3007 	sbfx	r0, r0, #12, #8
    1dbc:	f7fe fe36 	bl	a2c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1dc0:	233c      	movs	r3, #60	; 0x3c
    1dc2:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    1dc6:	4804      	ldr	r0, [pc, #16]	; (1dd8 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1dc8:	2301      	movs	r3, #1
    1dca:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    1dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    1dd0:	4802      	ldr	r0, [pc, #8]	; (1ddc <nrfx_twi_init+0x84>)
    1dd2:	e7fc      	b.n	1dce <nrfx_twi_init+0x76>
    1dd4:	20000070 	.word	0x20000070
    1dd8:	0bad0000 	.word	0x0bad0000
    1ddc:	0bad0005 	.word	0x0bad0005

00001de0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    1de0:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1de2:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1de4:	2105      	movs	r1, #5
    1de6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    1dea:	4a04      	ldr	r2, [pc, #16]	; (1dfc <nrfx_twi_enable+0x1c>)
    1dec:	213c      	movs	r1, #60	; 0x3c
    1dee:	fb01 2303 	mla	r3, r1, r3, r2
    1df2:	2202      	movs	r2, #2
    1df4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    1df8:	4770      	bx	lr
    1dfa:	bf00      	nop
    1dfc:	20000070 	.word	0x20000070

00001e00 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    1e00:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    1e02:	490a      	ldr	r1, [pc, #40]	; (1e2c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1e04:	7902      	ldrb	r2, [r0, #4]
    1e06:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    1e0a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    1e0e:	f021 0103 	bic.w	r1, r1, #3
    1e12:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1e16:	2100      	movs	r1, #0
    1e18:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <nrfx_twi_disable+0x30>)
    1e1e:	213c      	movs	r1, #60	; 0x3c
    1e20:	fb01 3302 	mla	r3, r1, r2, r3
    1e24:	2201      	movs	r2, #1
    1e26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    1e2a:	4770      	bx	lr
    1e2c:	00044286 	.word	0x00044286
    1e30:	20000070 	.word	0x20000070

00001e34 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    1e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1e38:	4e32      	ldr	r6, [pc, #200]	; (1f04 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1e3a:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    1e3e:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1e42:	233c      	movs	r3, #60	; 0x3c
    1e44:	fb03 6308 	mla	r3, r3, r8, r6
{
    1e48:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    1e4e:	2b01      	cmp	r3, #1
{
    1e50:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1e52:	d104      	bne.n	1e5e <nrfx_twi_xfer+0x2a>
    1e54:	780b      	ldrb	r3, [r1, #0]
    1e56:	2b01      	cmp	r3, #1
    1e58:	d106      	bne.n	1e68 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    1e5a:	482b      	ldr	r0, [pc, #172]	; (1f08 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    1e5c:	e011      	b.n	1e82 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    1e5e:	2b02      	cmp	r3, #2
    1e60:	d102      	bne.n	1e68 <nrfx_twi_xfer+0x34>
    1e62:	780b      	ldrb	r3, [r1, #0]
    1e64:	2b01      	cmp	r3, #1
    1e66:	d1f8      	bne.n	1e5a <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    1e68:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
    1e6a:	4b28      	ldr	r3, [pc, #160]	; (1f0c <nrfx_twi_xfer+0xd8>)
    1e6c:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    1e70:	fb05 6508 	mla	r5, r5, r8, r6
    1e74:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    1e78:	b12b      	cbz	r3, 1e86 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    1e7a:	68ab      	ldr	r3, [r5, #8]
        return err_code;
    1e7c:	4824      	ldr	r0, [pc, #144]	; (1f10 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    1e7e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    1e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    1e86:	f087 0304 	eor.w	r3, r7, #4
    1e8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1e8e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
    1e92:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    1e94:	46a6      	mov	lr, r4
    1e96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1e9a:	f105 0c0c 	add.w	ip, r5, #12
    1e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1ea2:	f8de 3000 	ldr.w	r3, [lr]
    1ea6:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
    1eaa:	6863      	ldr	r3, [r4, #4]
    1eac:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    1eae:	68e3      	ldr	r3, [r4, #12]
    1eb0:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
    1eb2:	7863      	ldrb	r3, [r4, #1]
    1eb4:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    1eb8:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1eba:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    1ebe:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1ec0:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    1ec4:	d019      	beq.n	1efa <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    1ec6:	b9b3      	cbnz	r3, 1ef6 <nrfx_twi_xfer+0xc2>
    1ec8:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    1ecc:	233c      	movs	r3, #60	; 0x3c
    1ece:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    1ed2:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    1ed4:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    1ed8:	4648      	mov	r0, r9
    1eda:	f7ff fed1 	bl	1c80 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    1ede:	233c      	movs	r3, #60	; 0x3c
    1ee0:	fb03 f808 	mul.w	r8, r3, r8
    1ee4:	eb06 0208 	add.w	r2, r6, r8
    1ee8:	f856 3008 	ldr.w	r3, [r6, r8]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1c8      	bne.n	1e82 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    1ef0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    1ef4:	e7c5      	b.n	1e82 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    1ef6:	2701      	movs	r7, #1
    1ef8:	e7e8      	b.n	1ecc <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    1efa:	4651      	mov	r1, sl
    1efc:	4648      	mov	r0, r9
    1efe:	f7ff fe4d 	bl	1b9c <twi_rx_start_transfer>
    1f02:	e7ec      	b.n	1ede <nrfx_twi_xfer+0xaa>
    1f04:	20000070 	.word	0x20000070
    1f08:	0bad0005 	.word	0x0bad0005
    1f0c:	00044286 	.word	0x00044286
    1f10:	0bad000b 	.word	0x0bad000b

00001f14 <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    1f16:	4c29      	ldr	r4, [pc, #164]	; (1fbc <nrfx_twi_1_irq_handler+0xa8>)
{
    1f18:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    1f1a:	4621      	mov	r1, r4
    1f1c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    1f20:	f001 fc9f 	bl	3862 <twi_transfer>
    1f24:	46a4      	mov	ip, r4
    1f26:	b9e0      	cbnz	r0, 1f62 <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
    1f28:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    1f2c:	6a26      	ldr	r6, [r4, #32]
    1f2e:	b9ef      	cbnz	r7, 1f6c <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    1f30:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    1f32:	1e9a      	subs	r2, r3, #2
    1f34:	2a01      	cmp	r2, #1
    1f36:	d819      	bhi.n	1f6c <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    1f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1f3a:	69a2      	ldr	r2, [r4, #24]
    1f3c:	4291      	cmp	r1, r2
    1f3e:	d115      	bne.n	1f6c <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    1f40:	69e2      	ldr	r2, [r4, #28]
    1f42:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    1f44:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    1f48:	6962      	ldr	r2, [r4, #20]
    1f4a:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    1f4c:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    1f4e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    1f52:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    1f56:	4621      	mov	r1, r4
    1f58:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    1f5c:	d103      	bne.n	1f66 <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    1f5e:	f7ff fe8f 	bl	1c80 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
    1f62:	b007      	add	sp, #28
    1f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    1f66:	f7ff fe19 	bl	1b9c <twi_rx_start_transfer>
    1f6a:	e7fa      	b.n	1f62 <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
    1f6c:	4d14      	ldr	r5, [pc, #80]	; (1fc0 <nrfx_twi_1_irq_handler+0xac>)
    1f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f70:	ac01      	add	r4, sp, #4
    1f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f74:	682b      	ldr	r3, [r5, #0]
    1f76:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    1f78:	b1e7      	cbz	r7, 1fb4 <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    1f7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1f7e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1f82:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    1f86:	0798      	lsls	r0, r3, #30
    1f88:	d50c      	bpl.n	1fa4 <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    1f8a:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    1f8c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    1f90:	2300      	movs	r3, #0
    1f92:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
    1f96:	0773      	lsls	r3, r6, #29
    1f98:	d4e3      	bmi.n	1f62 <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
    1f9a:	e9dc 3100 	ldrd	r3, r1, [ip]
    1f9e:	4668      	mov	r0, sp
    1fa0:	4798      	blx	r3
}
    1fa2:	e7de      	b.n	1f62 <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    1fa4:	0759      	lsls	r1, r3, #29
    1fa6:	d501      	bpl.n	1fac <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    1fa8:	2302      	movs	r3, #2
    1faa:	e7ef      	b.n	1f8c <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    1fac:	07da      	lsls	r2, r3, #31
    1fae:	d5ef      	bpl.n	1f90 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
    1fb0:	2303      	movs	r3, #3
    1fb2:	e7eb      	b.n	1f8c <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
    1fb4:	f88d 7000 	strb.w	r7, [sp]
    1fb8:	e7ea      	b.n	1f90 <nrfx_twi_1_irq_handler+0x7c>
    1fba:	bf00      	nop
    1fbc:	20000070 	.word	0x20000070
    1fc0:	2000007c 	.word	0x2000007c

00001fc4 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    1fc4:	4b09      	ldr	r3, [pc, #36]	; (1fec <z_sys_device_do_config_level+0x28>)
{
    1fc6:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    1fc8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1fcc:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1fce:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1fd0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1fd4:	42a5      	cmp	r5, r4
    1fd6:	d800      	bhi.n	1fda <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1fd8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1fda:	6823      	ldr	r3, [r4, #0]
    1fdc:	4620      	mov	r0, r4
    1fde:	685b      	ldr	r3, [r3, #4]
    1fe0:	4798      	blx	r3
		if (retval != 0) {
    1fe2:	b100      	cbz	r0, 1fe6 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1fe4:	6066      	str	r6, [r4, #4]
								info++) {
    1fe6:	340c      	adds	r4, #12
    1fe8:	e7f4      	b.n	1fd4 <z_sys_device_do_config_level+0x10>
    1fea:	bf00      	nop
    1fec:	00003e28 	.word	0x00003e28

00001ff0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1ff0:	4b10      	ldr	r3, [pc, #64]	; (2034 <z_impl_device_get_binding+0x44>)
{
    1ff2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    1ff4:	4c10      	ldr	r4, [pc, #64]	; (2038 <z_impl_device_get_binding+0x48>)
{
    1ff6:	4605      	mov	r5, r0
    1ff8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1ffa:	429c      	cmp	r4, r3
    1ffc:	d104      	bne.n	2008 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1ffe:	4c0e      	ldr	r4, [pc, #56]	; (2038 <z_impl_device_get_binding+0x48>)
    2000:	42b4      	cmp	r4, r6
    2002:	d109      	bne.n	2018 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    2004:	2400      	movs	r4, #0
    2006:	e012      	b.n	202e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    2008:	6862      	ldr	r2, [r4, #4]
    200a:	b11a      	cbz	r2, 2014 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    200c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	42aa      	cmp	r2, r5
    2012:	d00c      	beq.n	202e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    2014:	340c      	adds	r4, #12
    2016:	e7f0      	b.n	1ffa <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    2018:	6863      	ldr	r3, [r4, #4]
    201a:	b90b      	cbnz	r3, 2020 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    201c:	340c      	adds	r4, #12
    201e:	e7ef      	b.n	2000 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    2020:	6823      	ldr	r3, [r4, #0]
    2022:	4628      	mov	r0, r5
    2024:	6819      	ldr	r1, [r3, #0]
    2026:	f001 f97e 	bl	3326 <strcmp>
    202a:	2800      	cmp	r0, #0
    202c:	d1f6      	bne.n	201c <z_impl_device_get_binding+0x2c>
}
    202e:	4620      	mov	r0, r4
    2030:	bd70      	pop	{r4, r5, r6, pc}
    2032:	bf00      	nop
    2034:	200050b8 	.word	0x200050b8
    2038:	2000504c 	.word	0x2000504c

0000203c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    203c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    203e:	4d0b      	ldr	r5, [pc, #44]	; (206c <idle+0x30>)
	__asm__ volatile(
    2040:	f04f 0220 	mov.w	r2, #32
    2044:	f3ef 8311 	mrs	r3, BASEPRI
    2048:	f382 8811 	msr	BASEPRI, r2
    204c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2050:	f001 fd5c 	bl	3b0c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2054:	2101      	movs	r1, #1
    2056:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    2058:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    205a:	bfd8      	it	le
    205c:	4608      	movle	r0, r1
    205e:	f001 fd65 	bl	3b2c <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2062:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2064:	f7fe fd50 	bl	b08 <arch_cpu_idle>
}
    2068:	e7ea      	b.n	2040 <idle+0x4>
    206a:	bf00      	nop
    206c:	200041e8 	.word	0x200041e8

00002070 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2070:	4802      	ldr	r0, [pc, #8]	; (207c <z_bss_zero+0xc>)
    2072:	4a03      	ldr	r2, [pc, #12]	; (2080 <z_bss_zero+0x10>)
    2074:	2100      	movs	r1, #0
    2076:	1a12      	subs	r2, r2, r0
    2078:	f001 b98c 	b.w	3394 <memset>
    207c:	20000000 	.word	0x20000000
    2080:	2000422c 	.word	0x2000422c

00002084 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    2084:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    2086:	4806      	ldr	r0, [pc, #24]	; (20a0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2088:	4a06      	ldr	r2, [pc, #24]	; (20a4 <z_data_copy+0x20>)
    208a:	4907      	ldr	r1, [pc, #28]	; (20a8 <z_data_copy+0x24>)
    208c:	1a12      	subs	r2, r2, r0
    208e:	f001 f956 	bl	333e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    2092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    2096:	4a05      	ldr	r2, [pc, #20]	; (20ac <z_data_copy+0x28>)
    2098:	4905      	ldr	r1, [pc, #20]	; (20b0 <z_data_copy+0x2c>)
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <z_data_copy+0x30>)
    209c:	f001 b94f 	b.w	333e <memcpy>
    20a0:	20004f70 	.word	0x20004f70
    20a4:	200050e8 	.word	0x200050e8
    20a8:	00003e8c 	.word	0x00003e8c
    20ac:	00000000 	.word	0x00000000
    20b0:	00003e8c 	.word	0x00003e8c
    20b4:	20000000 	.word	0x20000000

000020b8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    20b8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    20ba:	4b09      	ldr	r3, [pc, #36]	; (20e0 <bg_thread_main+0x28>)
    20bc:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20be:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    20c0:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20c2:	f7ff ff7f 	bl	1fc4 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    20c6:	2003      	movs	r0, #3
    20c8:	f7ff ff7c 	bl	1fc4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    20cc:	f000 fcc0 	bl	2a50 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    20d0:	f7fe f97e 	bl	3d0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    20d4:	4a03      	ldr	r2, [pc, #12]	; (20e4 <bg_thread_main+0x2c>)
    20d6:	7b13      	ldrb	r3, [r2, #12]
    20d8:	f023 0301 	bic.w	r3, r3, #1
    20dc:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    20de:	bd08      	pop	{r3, pc}
    20e0:	2000422a 	.word	0x2000422a
    20e4:	20000118 	.word	0x20000118

000020e8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    20e8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    20ea:	4b36      	ldr	r3, [pc, #216]	; (21c4 <z_cstart+0xdc>)
    20ec:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    20ee:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    20f2:	4c35      	ldr	r4, [pc, #212]	; (21c8 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    20f4:	4e35      	ldr	r6, [pc, #212]	; (21cc <z_cstart+0xe4>)
    20f6:	6963      	ldr	r3, [r4, #20]
    20f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20fc:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20fe:	2500      	movs	r5, #0
    2100:	23e0      	movs	r3, #224	; 0xe0
    2102:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    2106:	77e5      	strb	r5, [r4, #31]
    2108:	7625      	strb	r5, [r4, #24]
    210a:	7665      	strb	r5, [r4, #25]
    210c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    210e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2110:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2114:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2116:	f7fe fe19 	bl	d4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    211a:	f7fe fcef 	bl	afc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2122:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2124:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    2126:	ab07      	add	r3, sp, #28
    2128:	226c      	movs	r2, #108	; 0x6c
    212a:	4629      	mov	r1, r5
    212c:	4618      	mov	r0, r3
    212e:	f001 f931 	bl	3394 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    2132:	4c27      	ldr	r4, [pc, #156]	; (21d0 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    2134:	2701      	movs	r7, #1
	_current = &dummy_thread;
    2136:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2138:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    213a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    213e:	f7ff ff41 	bl	1fc4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2142:	4638      	mov	r0, r7
    2144:	f7ff ff3e 	bl	1fc4 <z_sys_device_do_config_level>
	z_sched_init();
    2148:	f000 fb56 	bl	27f8 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    214c:	4b21      	ldr	r3, [pc, #132]	; (21d4 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    214e:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2150:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2154:	e9cd 7304 	strd	r7, r3, [sp, #16]
    2158:	e9cd 5502 	strd	r5, r5, [sp, #8]
    215c:	4b1e      	ldr	r3, [pc, #120]	; (21d8 <z_cstart+0xf0>)
    215e:	491f      	ldr	r1, [pc, #124]	; (21dc <z_cstart+0xf4>)
    2160:	e9cd 5500 	strd	r5, r5, [sp]
    2164:	4630      	mov	r0, r6
    2166:	f000 fc3b 	bl	29e0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    216a:	7b73      	ldrb	r3, [r6, #13]
    216c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2170:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2174:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2176:	d104      	bne.n	2182 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    2178:	69b3      	ldr	r3, [r6, #24]
    217a:	b913      	cbnz	r3, 2182 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    217c:	4630      	mov	r0, r6
    217e:	f000 f943 	bl	2408 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
    2182:	4b17      	ldr	r3, [pc, #92]	; (21e0 <z_cstart+0xf8>)
    2184:	4d17      	ldr	r5, [pc, #92]	; (21e4 <z_cstart+0xfc>)
    2186:	9305      	str	r3, [sp, #20]
    2188:	2201      	movs	r2, #1
    218a:	230f      	movs	r3, #15
    218c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2190:	2300      	movs	r3, #0
    2192:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2196:	4914      	ldr	r1, [pc, #80]	; (21e8 <z_cstart+0x100>)
    2198:	9300      	str	r3, [sp, #0]
    219a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    219e:	4b13      	ldr	r3, [pc, #76]	; (21ec <z_cstart+0x104>)
    21a0:	4628      	mov	r0, r5
    21a2:	f000 fc1d 	bl	29e0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21a6:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    21a8:	490c      	ldr	r1, [pc, #48]	; (21dc <z_cstart+0xf4>)
    21aa:	4808      	ldr	r0, [pc, #32]	; (21cc <z_cstart+0xe4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    21ac:	60e5      	str	r5, [r4, #12]
    21ae:	f023 0304 	bic.w	r3, r3, #4
    21b2:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    21b4:	4b0e      	ldr	r3, [pc, #56]	; (21f0 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    21b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    21ba:	e9c4 3306 	strd	r3, r3, [r4, #24]
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <z_cstart+0xf0>)
    21c0:	f7fe fc7e 	bl	ac0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    21c4:	20004f70 	.word	0x20004f70
    21c8:	e000ed00 	.word	0xe000ed00
    21cc:	20000118 	.word	0x20000118
    21d0:	200041e8 	.word	0x200041e8
    21d4:	00003e82 	.word	0x00003e82
    21d8:	000020b9 	.word	0x000020b9
    21dc:	20004230 	.word	0x20004230
    21e0:	00003e87 	.word	0x00003e87
    21e4:	200000ac 	.word	0x200000ac
    21e8:	20004630 	.word	0x20004630
    21ec:	0000203d 	.word	0x0000203d
    21f0:	20004200 	.word	0x20004200

000021f4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    21f4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    21f6:	4c07      	ldr	r4, [pc, #28]	; (2214 <init_static_pools+0x20>)
    21f8:	4d07      	ldr	r5, [pc, #28]	; (2218 <init_static_pools+0x24>)
    21fa:	42ac      	cmp	r4, r5
    21fc:	d301      	bcc.n	2202 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    21fe:	2000      	movs	r0, #0
    2200:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2202:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2206:	4620      	mov	r0, r4
    2208:	e9c4 3305 	strd	r3, r3, [r4, #20]
    220c:	f000 fd92 	bl	2d34 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2210:	341c      	adds	r4, #28
    2212:	e7f2      	b.n	21fa <init_static_pools+0x6>
    2214:	200050b8 	.word	0x200050b8
    2218:	200050d4 	.word	0x200050d4

0000221c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    2220:	1e1c      	subs	r4, r3, #0
{
    2222:	b085      	sub	sp, #20
    2224:	4607      	mov	r7, r0
    2226:	460d      	mov	r5, r1
    2228:	4692      	mov	sl, r2
	if (timeout > 0) {
    222a:	dd3a      	ble.n	22a2 <k_mem_pool_alloc+0x86>
	return z_impl_k_uptime_get();
    222c:	f001 fc9c 	bl	3b68 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
    2230:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
    2234:	4b1c      	ldr	r3, [pc, #112]	; (22a8 <k_mem_pool_alloc+0x8c>)
    2236:	4e1d      	ldr	r6, [pc, #116]	; (22ac <k_mem_pool_alloc+0x90>)
    2238:	1afb      	subs	r3, r7, r3
    223a:	109b      	asrs	r3, r3, #2
    223c:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
    223e:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
    2240:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
    2244:	ab03      	add	r3, sp, #12
    2246:	aa02      	add	r2, sp, #8
    2248:	9500      	str	r5, [sp, #0]
    224a:	4651      	mov	r1, sl
    224c:	4638      	mov	r0, r7
    224e:	f000 fdb7 	bl	2dc0 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
    2252:	9b02      	ldr	r3, [sp, #8]
    2254:	9a03      	ldr	r2, [sp, #12]
    2256:	021b      	lsls	r3, r3, #8
    2258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    225c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    2260:	b2f2      	uxtb	r2, r6
    2262:	4313      	orrs	r3, r2
    2264:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    2266:	b1c8      	cbz	r0, 229c <k_mem_pool_alloc+0x80>
    2268:	b1c4      	cbz	r4, 229c <k_mem_pool_alloc+0x80>
    226a:	f110 0f0c 	cmn.w	r0, #12
    226e:	d115      	bne.n	229c <k_mem_pool_alloc+0x80>
    2270:	f04f 0320 	mov.w	r3, #32
    2274:	f3ef 8011 	mrs	r0, BASEPRI
    2278:	f383 8811 	msr	BASEPRI, r3
    227c:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
    2280:	4622      	mov	r2, r4
    2282:	4659      	mov	r1, fp
    2284:	f000 fa52 	bl	272c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
    2288:	1c63      	adds	r3, r4, #1
    228a:	d0db      	beq.n	2244 <k_mem_pool_alloc+0x28>
    228c:	f001 fc6c 	bl	3b68 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
    2290:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
    2294:	2c00      	cmp	r4, #0
    2296:	dcd5      	bgt.n	2244 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
    2298:	f06f 000a 	mvn.w	r0, #10
}
    229c:	b005      	add	sp, #20
    229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    22a2:	f04f 0800 	mov.w	r8, #0
    22a6:	e7c5      	b.n	2234 <k_mem_pool_alloc+0x18>
    22a8:	200050b8 	.word	0x200050b8
    22ac:	b6db6db7 	.word	0xb6db6db7

000022b0 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
    22b0:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    22b2:	4801      	ldr	r0, [pc, #4]	; (22b8 <k_malloc+0x8>)
    22b4:	f001 bb5e 	b.w	3974 <k_mem_pool_malloc>
    22b8:	200050b8 	.word	0x200050b8

000022bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    22bc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    22be:	4c08      	ldr	r4, [pc, #32]	; (22e0 <z_reset_time_slice+0x24>)
    22c0:	6823      	ldr	r3, [r4, #0]
    22c2:	b15b      	cbz	r3, 22dc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    22c4:	f7fe fb36 	bl	934 <z_clock_elapsed>
    22c8:	4603      	mov	r3, r0
    22ca:	6820      	ldr	r0, [r4, #0]
    22cc:	4a05      	ldr	r2, [pc, #20]	; (22e4 <z_reset_time_slice+0x28>)
    22ce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    22d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    22d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    22d6:	2100      	movs	r1, #0
    22d8:	f001 bc28 	b.w	3b2c <z_set_timeout_expiry>
}
    22dc:	bd10      	pop	{r4, pc}
    22de:	bf00      	nop
    22e0:	20004220 	.word	0x20004220
    22e4:	200041e8 	.word	0x200041e8

000022e8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    22e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ea:	4605      	mov	r5, r0
    22ec:	460c      	mov	r4, r1
    22ee:	f04f 0320 	mov.w	r3, #32
    22f2:	f3ef 8611 	mrs	r6, BASEPRI
    22f6:	f383 8811 	msr	BASEPRI, r3
    22fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    22fe:	4b0d      	ldr	r3, [pc, #52]	; (2334 <k_sched_time_slice_set+0x4c>)
    2300:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    2302:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2306:	f240 30e7 	movw	r0, #999	; 0x3e7
    230a:	2100      	movs	r1, #0
    230c:	611a      	str	r2, [r3, #16]
    230e:	fbe7 0105 	umlal	r0, r1, r7, r5
    2312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2316:	2300      	movs	r3, #0
    2318:	f7fd fee0 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    231c:	4b06      	ldr	r3, [pc, #24]	; (2338 <k_sched_time_slice_set+0x50>)
    231e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2320:	4b06      	ldr	r3, [pc, #24]	; (233c <k_sched_time_slice_set+0x54>)
    2322:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    2324:	f7ff ffca 	bl	22bc <z_reset_time_slice>
	__asm__ volatile(
    2328:	f386 8811 	msr	BASEPRI, r6
    232c:	f3bf 8f6f 	isb	sy
	}
}
    2330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2332:	bf00      	nop
    2334:	200041e8 	.word	0x200041e8
    2338:	20004220 	.word	0x20004220
    233c:	2000421c 	.word	0x2000421c

00002340 <k_sched_lock>:
	__asm__ volatile(
    2340:	f04f 0320 	mov.w	r3, #32
    2344:	f3ef 8111 	mrs	r1, BASEPRI
    2348:	f383 8811 	msr	BASEPRI, r3
    234c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <k_sched_lock+0x24>)
    2352:	689a      	ldr	r2, [r3, #8]
    2354:	7bd3      	ldrb	r3, [r2, #15]
    2356:	3b01      	subs	r3, #1
    2358:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    235a:	f381 8811 	msr	BASEPRI, r1
    235e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2362:	4770      	bx	lr
    2364:	200041e8 	.word	0x200041e8

00002368 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2368:	4b09      	ldr	r3, [pc, #36]	; (2390 <z_priq_dumb_remove+0x28>)
    236a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    236e:	4282      	cmp	r2, r0
    2370:	d105      	bne.n	237e <z_priq_dumb_remove+0x16>
    2372:	689b      	ldr	r3, [r3, #8]
    2374:	428b      	cmp	r3, r1
    2376:	d102      	bne.n	237e <z_priq_dumb_remove+0x16>
    2378:	7b4b      	ldrb	r3, [r1, #13]
    237a:	06db      	lsls	r3, r3, #27
    237c:	d106      	bne.n	238c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    237e:	e9d1 3200 	ldrd	r3, r2, [r1]
    2382:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2384:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2386:	2300      	movs	r3, #0
	node->prev = NULL;
    2388:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    238c:	4770      	bx	lr
    238e:	bf00      	nop
    2390:	200041e8 	.word	0x200041e8

00002394 <update_cache>:
{
    2394:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2396:	4c0d      	ldr	r4, [pc, #52]	; (23cc <update_cache+0x38>)
{
    2398:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    239a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    239e:	f001 fb27 	bl	39f0 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    23a2:	4605      	mov	r5, r0
    23a4:	b900      	cbnz	r0, 23a8 <update_cache+0x14>
    23a6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    23a8:	68a3      	ldr	r3, [r4, #8]
    23aa:	b94a      	cbnz	r2, 23c0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    23ac:	7b5a      	ldrb	r2, [r3, #13]
    23ae:	06d2      	lsls	r2, r2, #27
    23b0:	d106      	bne.n	23c0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    23b2:	69aa      	ldr	r2, [r5, #24]
    23b4:	b922      	cbnz	r2, 23c0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    23b6:	89da      	ldrh	r2, [r3, #14]
    23b8:	2a7f      	cmp	r2, #127	; 0x7f
    23ba:	d901      	bls.n	23c0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    23bc:	6263      	str	r3, [r4, #36]	; 0x24
}
    23be:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    23c0:	429d      	cmp	r5, r3
    23c2:	d001      	beq.n	23c8 <update_cache+0x34>
			z_reset_time_slice();
    23c4:	f7ff ff7a 	bl	22bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    23c8:	6265      	str	r5, [r4, #36]	; 0x24
}
    23ca:	e7f8      	b.n	23be <update_cache+0x2a>
    23cc:	200041e8 	.word	0x200041e8

000023d0 <k_sched_unlock>:
{
    23d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    23d2:	f04f 0320 	mov.w	r3, #32
    23d6:	f3ef 8411 	mrs	r4, BASEPRI
    23da:	f383 8811 	msr	BASEPRI, r3
    23de:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    23e2:	4b08      	ldr	r3, [pc, #32]	; (2404 <k_sched_unlock+0x34>)
    23e4:	689a      	ldr	r2, [r3, #8]
    23e6:	7bd3      	ldrb	r3, [r2, #15]
    23e8:	3301      	adds	r3, #1
    23ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    23ec:	2000      	movs	r0, #0
    23ee:	f7ff ffd1 	bl	2394 <update_cache>
	__asm__ volatile(
    23f2:	f384 8811 	msr	BASEPRI, r4
    23f6:	f3bf 8f6f 	isb	sy
}
    23fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    23fe:	f001 baed 	b.w	39dc <z_reschedule_unlocked>
    2402:	bf00      	nop
    2404:	200041e8 	.word	0x200041e8

00002408 <z_add_thread_to_ready_q>:
{
    2408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    240a:	f04f 0320 	mov.w	r3, #32
    240e:	f3ef 8511 	mrs	r5, BASEPRI
    2412:	f383 8811 	msr	BASEPRI, r3
    2416:	f3bf 8f6f 	isb	sy
	return list->head == list;
    241a:	4a16      	ldr	r2, [pc, #88]	; (2474 <z_add_thread_to_ready_q+0x6c>)
    241c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    241e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return list->head == list;
    2420:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2424:	428b      	cmp	r3, r1
    2426:	bf08      	it	eq
    2428:	2300      	moveq	r3, #0
    242a:	2b00      	cmp	r3, #0
    242c:	bf38      	it	cc
    242e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2430:	b1d3      	cbz	r3, 2468 <z_add_thread_to_ready_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    2432:	f990 700e 	ldrsb.w	r7, [r0, #14]
    2436:	f993 600e 	ldrsb.w	r6, [r3, #14]
    243a:	42b7      	cmp	r7, r6
    243c:	db03      	blt.n	2446 <z_add_thread_to_ready_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    243e:	429c      	cmp	r4, r3
    2440:	d012      	beq.n	2468 <z_add_thread_to_ready_q+0x60>
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	e7f4      	b.n	2430 <z_add_thread_to_ready_q+0x28>
	node->prev = successor->prev;
    2446:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2448:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    244c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    244e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2450:	7b43      	ldrb	r3, [r0, #13]
    2452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2456:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    2458:	2000      	movs	r0, #0
    245a:	f7ff ff9b 	bl	2394 <update_cache>
	__asm__ volatile(
    245e:	f385 8811 	msr	BASEPRI, r5
    2462:	f3bf 8f6f 	isb	sy
}
    2466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    2468:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    246c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    246e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2470:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2472:	e7ed      	b.n	2450 <z_add_thread_to_ready_q+0x48>
    2474:	200041e8 	.word	0x200041e8

00002478 <z_move_thread_to_end_of_prio_q>:
{
    2478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    247a:	4601      	mov	r1, r0
	__asm__ volatile(
    247c:	f04f 0320 	mov.w	r3, #32
    2480:	f3ef 8411 	mrs	r4, BASEPRI
    2484:	f383 8811 	msr	BASEPRI, r3
    2488:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    248c:	7b43      	ldrb	r3, [r0, #13]
    248e:	065a      	lsls	r2, r3, #25
    2490:	d502      	bpl.n	2498 <z_move_thread_to_end_of_prio_q+0x20>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2492:	4819      	ldr	r0, [pc, #100]	; (24f8 <z_move_thread_to_end_of_prio_q+0x80>)
    2494:	f7ff ff68 	bl	2368 <z_priq_dumb_remove>
	return list->head == list;
    2498:	4a18      	ldr	r2, [pc, #96]	; (24fc <z_move_thread_to_end_of_prio_q+0x84>)
    249a:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    249c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    249e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    24a2:	4283      	cmp	r3, r0
    24a4:	bf08      	it	eq
    24a6:	2300      	moveq	r3, #0
    24a8:	2b00      	cmp	r3, #0
    24aa:	bf38      	it	cc
    24ac:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    24ae:	b1eb      	cbz	r3, 24ec <z_move_thread_to_end_of_prio_q+0x74>
	if (thread_1->base.prio < thread_2->base.prio) {
    24b0:	f991 700e 	ldrsb.w	r7, [r1, #14]
    24b4:	f993 600e 	ldrsb.w	r6, [r3, #14]
    24b8:	42b7      	cmp	r7, r6
    24ba:	db03      	blt.n	24c4 <z_move_thread_to_end_of_prio_q+0x4c>
	return (node == list->tail) ? NULL : node->next;
    24bc:	429d      	cmp	r5, r3
    24be:	d015      	beq.n	24ec <z_move_thread_to_end_of_prio_q+0x74>
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	e7f4      	b.n	24ae <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = successor->prev;
    24c4:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    24c6:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    24ca:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    24cc:	6059      	str	r1, [r3, #4]
    24ce:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    24d0:	6890      	ldr	r0, [r2, #8]
    24d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24d6:	734b      	strb	r3, [r1, #13]
    24d8:	1a43      	subs	r3, r0, r1
    24da:	4258      	negs	r0, r3
    24dc:	4158      	adcs	r0, r3
    24de:	f7ff ff59 	bl	2394 <update_cache>
	__asm__ volatile(
    24e2:	f384 8811 	msr	BASEPRI, r4
    24e6:	f3bf 8f6f 	isb	sy
}
    24ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    24ec:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    24f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    24f2:	6019      	str	r1, [r3, #0]
	list->tail = node;
    24f4:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    24f6:	e7ea      	b.n	24ce <z_move_thread_to_end_of_prio_q+0x56>
    24f8:	20004210 	.word	0x20004210
    24fc:	200041e8 	.word	0x200041e8

00002500 <z_time_slice>:
{
    2500:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2502:	4a15      	ldr	r2, [pc, #84]	; (2558 <z_time_slice+0x58>)
    2504:	4b15      	ldr	r3, [pc, #84]	; (255c <z_time_slice+0x5c>)
    2506:	6814      	ldr	r4, [r2, #0]
{
    2508:	4601      	mov	r1, r0
	if (pending_current == _current) {
    250a:	6898      	ldr	r0, [r3, #8]
    250c:	42a0      	cmp	r0, r4
    250e:	461c      	mov	r4, r3
    2510:	d103      	bne.n	251a <z_time_slice+0x1a>
}
    2512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2516:	f7ff bed1 	b.w	22bc <z_reset_time_slice>
	pending_current = NULL;
    251a:	2500      	movs	r5, #0
    251c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    251e:	4a10      	ldr	r2, [pc, #64]	; (2560 <z_time_slice+0x60>)
    2520:	6812      	ldr	r2, [r2, #0]
    2522:	b1b2      	cbz	r2, 2552 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2524:	89c2      	ldrh	r2, [r0, #14]
    2526:	2a7f      	cmp	r2, #127	; 0x7f
    2528:	d813      	bhi.n	2552 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    252a:	4a0e      	ldr	r2, [pc, #56]	; (2564 <z_time_slice+0x64>)
    252c:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2530:	6812      	ldr	r2, [r2, #0]
    2532:	4295      	cmp	r5, r2
    2534:	db0d      	blt.n	2552 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2536:	4a0c      	ldr	r2, [pc, #48]	; (2568 <z_time_slice+0x68>)
    2538:	4290      	cmp	r0, r2
    253a:	d00a      	beq.n	2552 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    253c:	6982      	ldr	r2, [r0, #24]
    253e:	b942      	cbnz	r2, 2552 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2540:	691a      	ldr	r2, [r3, #16]
    2542:	428a      	cmp	r2, r1
    2544:	dc02      	bgt.n	254c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2546:	f7ff ff97 	bl	2478 <z_move_thread_to_end_of_prio_q>
    254a:	e7e2      	b.n	2512 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    254c:	1a52      	subs	r2, r2, r1
    254e:	611a      	str	r2, [r3, #16]
}
    2550:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    2552:	2300      	movs	r3, #0
    2554:	6123      	str	r3, [r4, #16]
    2556:	e7fb      	b.n	2550 <z_time_slice+0x50>
    2558:	20004218 	.word	0x20004218
    255c:	200041e8 	.word	0x200041e8
    2560:	20004220 	.word	0x20004220
    2564:	2000421c 	.word	0x2000421c
    2568:	200000ac 	.word	0x200000ac

0000256c <z_thread_single_suspend>:
{
    256c:	b570      	push	{r4, r5, r6, lr}
    256e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2570:	3018      	adds	r0, #24
    2572:	f001 fab5 	bl	3ae0 <z_abort_timeout>
	__asm__ volatile(
    2576:	f04f 0320 	mov.w	r3, #32
    257a:	f3ef 8611 	mrs	r6, BASEPRI
    257e:	f383 8811 	msr	BASEPRI, r3
    2582:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2586:	7b63      	ldrb	r3, [r4, #13]
    2588:	065a      	lsls	r2, r3, #25
    258a:	d507      	bpl.n	259c <z_thread_single_suspend+0x30>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    258c:	480f      	ldr	r0, [pc, #60]	; (25cc <z_thread_single_suspend+0x60>)
    258e:	4621      	mov	r1, r4
    2590:	f7ff feea 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2594:	7b63      	ldrb	r3, [r4, #13]
    2596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    259a:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    259c:	4d0c      	ldr	r5, [pc, #48]	; (25d0 <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    259e:	7b63      	ldrb	r3, [r4, #13]
    25a0:	68a8      	ldr	r0, [r5, #8]
    25a2:	f043 0310 	orr.w	r3, r3, #16
    25a6:	7363      	strb	r3, [r4, #13]
    25a8:	1b03      	subs	r3, r0, r4
    25aa:	4258      	negs	r0, r3
    25ac:	4158      	adcs	r0, r3
    25ae:	f7ff fef1 	bl	2394 <update_cache>
	__asm__ volatile(
    25b2:	f386 8811 	msr	BASEPRI, r6
    25b6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    25ba:	68ab      	ldr	r3, [r5, #8]
    25bc:	42a3      	cmp	r3, r4
    25be:	d103      	bne.n	25c8 <z_thread_single_suspend+0x5c>
}
    25c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    25c4:	f001 ba0a 	b.w	39dc <z_reschedule_unlocked>
}
    25c8:	bd70      	pop	{r4, r5, r6, pc}
    25ca:	bf00      	nop
    25cc:	20004210 	.word	0x20004210
    25d0:	200041e8 	.word	0x200041e8

000025d4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    25d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    25d6:	b570      	push	{r4, r5, r6, lr}
    25d8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    25da:	b103      	cbz	r3, 25de <z_thread_single_abort+0xa>
		thread->fn_abort();
    25dc:	4798      	blx	r3
    25de:	f104 0018 	add.w	r0, r4, #24
    25e2:	f001 fa7d 	bl	3ae0 <z_abort_timeout>
	__asm__ volatile(
    25e6:	f04f 0320 	mov.w	r3, #32
    25ea:	f3ef 8611 	mrs	r6, BASEPRI
    25ee:	f383 8811 	msr	BASEPRI, r3
    25f2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
    25f6:	4620      	mov	r0, r4
    25f8:	f001 f9d0 	bl	399c <z_is_thread_ready>
    25fc:	7b63      	ldrb	r3, [r4, #13]
    25fe:	4605      	mov	r5, r0
    2600:	b1c8      	cbz	r0, 2636 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
    2602:	0659      	lsls	r1, r3, #25
    2604:	d507      	bpl.n	2616 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2606:	4812      	ldr	r0, [pc, #72]	; (2650 <z_thread_single_abort+0x7c>)
    2608:	4621      	mov	r1, r4
    260a:	f7ff fead 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    260e:	7b63      	ldrb	r3, [r4, #13]
    2610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2614:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2616:	4b0f      	ldr	r3, [pc, #60]	; (2654 <z_thread_single_abort+0x80>)
    2618:	6898      	ldr	r0, [r3, #8]
    261a:	1b02      	subs	r2, r0, r4
    261c:	4250      	negs	r0, r2
    261e:	4150      	adcs	r0, r2
    2620:	f7ff feb8 	bl	2394 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    2624:	7b63      	ldrb	r3, [r4, #13]
    2626:	f043 0308 	orr.w	r3, r3, #8
    262a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    262c:	f386 8811 	msr	BASEPRI, r6
    2630:	f3bf 8f6f 	isb	sy
}
    2634:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
    2636:	079b      	lsls	r3, r3, #30
    2638:	d5f4      	bpl.n	2624 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    263a:	68a0      	ldr	r0, [r4, #8]
    263c:	4621      	mov	r1, r4
    263e:	f7ff fe93 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2642:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2644:	60a5      	str	r5, [r4, #8]
    2646:	f023 0302 	bic.w	r3, r3, #2
    264a:	7363      	strb	r3, [r4, #13]
    264c:	e7ea      	b.n	2624 <z_thread_single_abort+0x50>
    264e:	bf00      	nop
    2650:	20004210 	.word	0x20004210
    2654:	200041e8 	.word	0x200041e8

00002658 <z_remove_thread_from_ready_q>:
{
    2658:	b510      	push	{r4, lr}
    265a:	4601      	mov	r1, r0
	__asm__ volatile(
    265c:	f04f 0320 	mov.w	r3, #32
    2660:	f3ef 8411 	mrs	r4, BASEPRI
    2664:	f383 8811 	msr	BASEPRI, r3
    2668:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    266c:	7b43      	ldrb	r3, [r0, #13]
    266e:	065a      	lsls	r2, r3, #25
    2670:	d506      	bpl.n	2680 <z_remove_thread_from_ready_q+0x28>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2672:	4809      	ldr	r0, [pc, #36]	; (2698 <z_remove_thread_from_ready_q+0x40>)
    2674:	f7ff fe78 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2678:	7b4b      	ldrb	r3, [r1, #13]
    267a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    267e:	734b      	strb	r3, [r1, #13]
		update_cache(thread == _current);
    2680:	4b06      	ldr	r3, [pc, #24]	; (269c <z_remove_thread_from_ready_q+0x44>)
    2682:	6898      	ldr	r0, [r3, #8]
    2684:	1a43      	subs	r3, r0, r1
    2686:	4258      	negs	r0, r3
    2688:	4158      	adcs	r0, r3
    268a:	f7ff fe83 	bl	2394 <update_cache>
	__asm__ volatile(
    268e:	f384 8811 	msr	BASEPRI, r4
    2692:	f3bf 8f6f 	isb	sy
}
    2696:	bd10      	pop	{r4, pc}
    2698:	20004210 	.word	0x20004210
    269c:	200041e8 	.word	0x200041e8

000026a0 <pend>:
{
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	4604      	mov	r4, r0
    26a4:	460d      	mov	r5, r1
    26a6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    26a8:	f7ff ffd6 	bl	2658 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    26ac:	7b63      	ldrb	r3, [r4, #13]
    26ae:	f043 0302 	orr.w	r3, r3, #2
    26b2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    26b4:	b1c5      	cbz	r5, 26e8 <pend+0x48>
	return list->head == list;
    26b6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    26b8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26ba:	429d      	cmp	r5, r3
    26bc:	bf08      	it	eq
    26be:	2300      	moveq	r3, #0
    26c0:	2b00      	cmp	r3, #0
    26c2:	bf38      	it	cc
    26c4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26c6:	b33b      	cbz	r3, 2718 <pend+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
    26c8:	f994 100e 	ldrsb.w	r1, [r4, #14]
    26cc:	f993 200e 	ldrsb.w	r2, [r3, #14]
    26d0:	4291      	cmp	r1, r2
    26d2:	db04      	blt.n	26de <pend+0x3e>
	return (node == list->tail) ? NULL : node->next;
    26d4:	686a      	ldr	r2, [r5, #4]
    26d6:	429a      	cmp	r2, r3
    26d8:	d01e      	beq.n	2718 <pend+0x78>
    26da:	681b      	ldr	r3, [r3, #0]
    26dc:	e7f3      	b.n	26c6 <pend+0x26>
	node->prev = successor->prev;
    26de:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    26e0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    26e4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    26e6:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    26e8:	1c73      	adds	r3, r6, #1
    26ea:	d01c      	beq.n	2726 <pend+0x86>
    26ec:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    26f0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    26f4:	f240 30e7 	movw	r0, #999	; 0x3e7
    26f8:	2100      	movs	r1, #0
    26fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    26fe:	fbc5 0106 	smlal	r0, r1, r5, r6
    2702:	2300      	movs	r3, #0
    2704:	f7fd fcea 	bl	dc <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2708:	4907      	ldr	r1, [pc, #28]	; (2728 <pend+0x88>)
    270a:	1c42      	adds	r2, r0, #1
    270c:	f104 0018 	add.w	r0, r4, #24
}
    2710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2714:	f000 ba30 	b.w	2b78 <z_add_timeout>
	node->prev = list->tail;
    2718:	686b      	ldr	r3, [r5, #4]
    271a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    271c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    271e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    2720:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2722:	606c      	str	r4, [r5, #4]
}
    2724:	e7e0      	b.n	26e8 <pend+0x48>
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	00003a05 	.word	0x00003a05

0000272c <z_pend_curr_irqlock>:
{
    272c:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
    272e:	4d0f      	ldr	r5, [pc, #60]	; (276c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
    2730:	4c0f      	ldr	r4, [pc, #60]	; (2770 <z_pend_curr_irqlock+0x44>)
{
    2732:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
    2734:	68a8      	ldr	r0, [r5, #8]
    2736:	f7ff ffb3 	bl	26a0 <pend>
	pending_current = _current;
    273a:	68ab      	ldr	r3, [r5, #8]
    273c:	6023      	str	r3, [r4, #0]
    273e:	4630      	mov	r0, r6
    2740:	f7fe f920 	bl	984 <arch_swap>
	__asm__ volatile(
    2744:	f04f 0220 	mov.w	r2, #32
    2748:	f3ef 8311 	mrs	r3, BASEPRI
    274c:	f382 8811 	msr	BASEPRI, r2
    2750:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
    2754:	6822      	ldr	r2, [r4, #0]
    2756:	68a9      	ldr	r1, [r5, #8]
    2758:	4291      	cmp	r1, r2
			pending_current = NULL;
    275a:	bf04      	itt	eq
    275c:	2200      	moveq	r2, #0
    275e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
    2760:	f383 8811 	msr	BASEPRI, r3
    2764:	f3bf 8f6f 	isb	sy
}
    2768:	bd70      	pop	{r4, r5, r6, pc}
    276a:	bf00      	nop
    276c:	200041e8 	.word	0x200041e8
    2770:	20004218 	.word	0x20004218

00002774 <z_pend_curr>:
{
    2774:	b510      	push	{r4, lr}
    2776:	460c      	mov	r4, r1
    2778:	4611      	mov	r1, r2
	pending_current = _current;
    277a:	4a06      	ldr	r2, [pc, #24]	; (2794 <z_pend_curr+0x20>)
    277c:	6890      	ldr	r0, [r2, #8]
    277e:	4a06      	ldr	r2, [pc, #24]	; (2798 <z_pend_curr+0x24>)
    2780:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    2782:	461a      	mov	r2, r3
    2784:	f7ff ff8c 	bl	26a0 <pend>
    2788:	4620      	mov	r0, r4
}
    278a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    278e:	f7fe b8f9 	b.w	984 <arch_swap>
    2792:	bf00      	nop
    2794:	200041e8 	.word	0x200041e8
    2798:	20004218 	.word	0x20004218

0000279c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    279e:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    27a0:	f001 f9de 	bl	3b60 <z_tick_get_32>
    27a4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    27a6:	f04f 0320 	mov.w	r3, #32
    27aa:	f3ef 8711 	mrs	r7, BASEPRI
    27ae:	f383 8811 	msr	BASEPRI, r3
    27b2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    27b6:	4e0d      	ldr	r6, [pc, #52]	; (27ec <z_tick_sleep.part.0+0x50>)
    27b8:	4b0d      	ldr	r3, [pc, #52]	; (27f0 <z_tick_sleep.part.0+0x54>)
    27ba:	68b0      	ldr	r0, [r6, #8]
    27bc:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    27be:	f7ff ff4b 	bl	2658 <z_remove_thread_from_ready_q>
    27c2:	68b0      	ldr	r0, [r6, #8]
    27c4:	490b      	ldr	r1, [pc, #44]	; (27f4 <z_tick_sleep.part.0+0x58>)
    27c6:	462a      	mov	r2, r5
    27c8:	3018      	adds	r0, #24
    27ca:	f000 f9d5 	bl	2b78 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    27ce:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    27d0:	7b53      	ldrb	r3, [r2, #13]
    27d2:	f043 0310 	orr.w	r3, r3, #16
    27d6:	7353      	strb	r3, [r2, #13]
    27d8:	4638      	mov	r0, r7
    27da:	f7fe f8d3 	bl	984 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    27de:	f001 f9bf 	bl	3b60 <z_tick_get_32>
    27e2:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    27e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    27e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27ea:	bf00      	nop
    27ec:	200041e8 	.word	0x200041e8
    27f0:	20004218 	.word	0x20004218
    27f4:	00003a05 	.word	0x00003a05

000027f8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    27f8:	4b04      	ldr	r3, [pc, #16]	; (280c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    27fa:	2100      	movs	r1, #0
    27fc:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2800:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2804:	4608      	mov	r0, r1
    2806:	f7ff bd6f 	b.w	22e8 <k_sched_time_slice_set>
    280a:	bf00      	nop
    280c:	200041e8 	.word	0x200041e8

00002810 <z_impl_k_yield>:
{
    2810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2812:	4c24      	ldr	r4, [pc, #144]	; (28a4 <z_impl_k_yield+0x94>)
    2814:	4b24      	ldr	r3, [pc, #144]	; (28a8 <z_impl_k_yield+0x98>)
    2816:	68a2      	ldr	r2, [r4, #8]
    2818:	429a      	cmp	r2, r3
    281a:	d030      	beq.n	287e <z_impl_k_yield+0x6e>
    281c:	f04f 0320 	mov.w	r3, #32
    2820:	f3ef 8511 	mrs	r5, BASEPRI
    2824:	f383 8811 	msr	BASEPRI, r3
    2828:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    282c:	68a1      	ldr	r1, [r4, #8]
    282e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2832:	f7ff fd99 	bl	2368 <z_priq_dumb_remove>
	return list->head == list;
    2836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2838:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    283a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    283c:	4283      	cmp	r3, r0
    283e:	bf08      	it	eq
    2840:	2300      	moveq	r3, #0
    2842:	2b00      	cmp	r3, #0
    2844:	bf38      	it	cc
    2846:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2848:	b32b      	cbz	r3, 2896 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    284a:	f992 700e 	ldrsb.w	r7, [r2, #14]
    284e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2852:	42b7      	cmp	r7, r6
    2854:	db03      	blt.n	285e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    2856:	428b      	cmp	r3, r1
    2858:	d01d      	beq.n	2896 <z_impl_k_yield+0x86>
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	e7f4      	b.n	2848 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    285e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2860:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    2864:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    2866:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    2868:	7b53      	ldrb	r3, [r2, #13]
    286a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    286e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    2870:	2001      	movs	r0, #1
    2872:	f7ff fd8f 	bl	2394 <update_cache>
	__asm__ volatile(
    2876:	f385 8811 	msr	BASEPRI, r5
    287a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    287e:	f04f 0320 	mov.w	r3, #32
    2882:	f3ef 8011 	mrs	r0, BASEPRI
    2886:	f383 8811 	msr	BASEPRI, r3
    288a:	f3bf 8f6f 	isb	sy
}
    288e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2892:	f7fe b877 	b.w	984 <arch_swap>
	node->prev = list->tail;
    2896:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    289a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    289c:	601a      	str	r2, [r3, #0]
	list->tail = node;
    289e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    28a0:	e7e2      	b.n	2868 <z_impl_k_yield+0x58>
    28a2:	bf00      	nop
    28a4:	200041e8 	.word	0x200041e8
    28a8:	200000ac 	.word	0x200000ac

000028ac <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    28ac:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
    28ae:	1c43      	adds	r3, r0, #1
{
    28b0:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    28b2:	d105      	bne.n	28c0 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    28b4:	4b10      	ldr	r3, [pc, #64]	; (28f8 <z_impl_k_sleep+0x4c>)
    28b6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    28b8:	f000 f8aa 	bl	2a10 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    28bc:	4620      	mov	r0, r4
    28be:	bd38      	pop	{r3, r4, r5, pc}
    28c0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    28c4:	f240 30e7 	movw	r0, #999	; 0x3e7
    28c8:	2100      	movs	r1, #0
    28ca:	fbe5 0104 	umlal	r0, r1, r5, r4
    28ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28d2:	2300      	movs	r3, #0
    28d4:	f7fd fc02 	bl	dc <__aeabi_uldivmod>
	if (ticks == 0) {
    28d8:	4604      	mov	r4, r0
    28da:	b948      	cbnz	r0, 28f0 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    28dc:	f7ff ff98 	bl	2810 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    28e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    28e4:	fb84 0100 	smull	r0, r1, r4, r0
    28e8:	0bc4      	lsrs	r4, r0, #15
    28ea:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    28ee:	e7e5      	b.n	28bc <z_impl_k_sleep+0x10>
    28f0:	f7ff ff54 	bl	279c <z_tick_sleep.part.0>
    28f4:	4604      	mov	r4, r0
    28f6:	e7f3      	b.n	28e0 <z_impl_k_sleep+0x34>
    28f8:	200041e8 	.word	0x200041e8

000028fc <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    28fc:	4b01      	ldr	r3, [pc, #4]	; (2904 <z_impl_k_current_get+0x8>)
    28fe:	6898      	ldr	r0, [r3, #8]
    2900:	4770      	bx	lr
    2902:	bf00      	nop
    2904:	200041e8 	.word	0x200041e8

00002908 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2908:	b570      	push	{r4, r5, r6, lr}
    290a:	4605      	mov	r5, r0
    290c:	f04f 0320 	mov.w	r3, #32
    2910:	f3ef 8611 	mrs	r6, BASEPRI
    2914:	f383 8811 	msr	BASEPRI, r3
    2918:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    291c:	f001 f8a2 	bl	3a64 <z_unpend_first_thread>
	if (thread != NULL) {
    2920:	4604      	mov	r4, r0
    2922:	b170      	cbz	r0, 2942 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2924:	7b43      	ldrb	r3, [r0, #13]
    2926:	06db      	lsls	r3, r3, #27
    2928:	d103      	bne.n	2932 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    292a:	6983      	ldr	r3, [r0, #24]
    292c:	b90b      	cbnz	r3, 2932 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    292e:	f7ff fd6b 	bl	2408 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2932:	2300      	movs	r3, #0
    2934:	66a3      	str	r3, [r4, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    2936:	4631      	mov	r1, r6
    2938:	4805      	ldr	r0, [pc, #20]	; (2950 <z_impl_k_sem_give+0x48>)
}
    293a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    293e:	f001 b836 	b.w	39ae <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2942:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    2946:	429a      	cmp	r2, r3
    2948:	bf18      	it	ne
    294a:	3301      	addne	r3, #1
    294c:	60ab      	str	r3, [r5, #8]
}
    294e:	e7f2      	b.n	2936 <z_impl_k_sem_give+0x2e>
    2950:	2000422b 	.word	0x2000422b

00002954 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    2954:	4602      	mov	r2, r0
    2956:	460b      	mov	r3, r1
    2958:	f04f 0020 	mov.w	r0, #32
    295c:	f3ef 8111 	mrs	r1, BASEPRI
    2960:	f380 8811 	msr	BASEPRI, r0
    2964:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    2968:	6890      	ldr	r0, [r2, #8]
    296a:	b138      	cbz	r0, 297c <z_impl_k_sem_take+0x28>
		sem->count--;
    296c:	3801      	subs	r0, #1
    296e:	6090      	str	r0, [r2, #8]
	__asm__ volatile(
    2970:	f381 8811 	msr	BASEPRI, r1
    2974:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    2978:	2000      	movs	r0, #0
    297a:	4770      	bx	lr
	}

	if (timeout == K_NO_WAIT) {
    297c:	b933      	cbnz	r3, 298c <z_impl_k_sem_take+0x38>
    297e:	f381 8811 	msr	BASEPRI, r1
    2982:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return -EBUSY;
    2986:	f06f 000f 	mvn.w	r0, #15

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    298a:	4770      	bx	lr
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    298c:	4801      	ldr	r0, [pc, #4]	; (2994 <z_impl_k_sem_take+0x40>)
    298e:	f7ff bef1 	b.w	2774 <z_pend_curr>
    2992:	bf00      	nop
    2994:	2000422b 	.word	0x2000422b

00002998 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    2998:	b510      	push	{r4, lr}
	__asm__ volatile(
    299a:	f04f 0220 	mov.w	r2, #32
    299e:	f3ef 8411 	mrs	r4, BASEPRI
    29a2:	f382 8811 	msr	BASEPRI, r2
    29a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    29aa:	7b42      	ldrb	r2, [r0, #13]
    29ac:	0751      	lsls	r1, r2, #29
    29ae:	d404      	bmi.n	29ba <z_impl_k_thread_start+0x22>
	__asm__ volatile(
    29b0:	f384 8811 	msr	BASEPRI, r4
    29b4:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    29b8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    29ba:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29be:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    29c2:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29c4:	d103      	bne.n	29ce <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
    29c6:	6983      	ldr	r3, [r0, #24]
    29c8:	b90b      	cbnz	r3, 29ce <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    29ca:	f7ff fd1d 	bl	2408 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    29ce:	4621      	mov	r1, r4
    29d0:	4802      	ldr	r0, [pc, #8]	; (29dc <z_impl_k_thread_start+0x44>)
}
    29d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    29d6:	f000 bfea 	b.w	39ae <z_reschedule>
    29da:	bf00      	nop
    29dc:	2000422b 	.word	0x2000422b

000029e0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    29e0:	b530      	push	{r4, r5, lr}
    29e2:	b087      	sub	sp, #28
    29e4:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    29e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    29e8:	9504      	str	r5, [sp, #16]
    29ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    29ec:	9503      	str	r5, [sp, #12]
    29ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    29f0:	9502      	str	r5, [sp, #8]
    29f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    29f4:	9501      	str	r5, [sp, #4]
    29f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    29f8:	9500      	str	r5, [sp, #0]
    29fa:	f7fe f83f 	bl	a7c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    29fe:	4b03      	ldr	r3, [pc, #12]	; (2a0c <z_setup_new_thread+0x2c>)
    2a00:	689b      	ldr	r3, [r3, #8]
    2a02:	b103      	cbz	r3, 2a06 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2a06:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    2a08:	b007      	add	sp, #28
    2a0a:	bd30      	pop	{r4, r5, pc}
    2a0c:	200041e8 	.word	0x200041e8

00002a10 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    2a10:	b538      	push	{r3, r4, r5, lr}
    2a12:	4604      	mov	r4, r0
	__asm__ volatile(
    2a14:	f04f 0320 	mov.w	r3, #32
    2a18:	f3ef 8511 	mrs	r5, BASEPRI
    2a1c:	f383 8811 	msr	BASEPRI, r3
    2a20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    2a24:	f7ff fda2 	bl	256c <z_thread_single_suspend>

	if (thread == _current) {
    2a28:	4b07      	ldr	r3, [pc, #28]	; (2a48 <z_impl_k_thread_suspend+0x38>)
    2a2a:	689b      	ldr	r3, [r3, #8]
    2a2c:	42a3      	cmp	r3, r4
    2a2e:	d105      	bne.n	2a3c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    2a30:	4629      	mov	r1, r5
    2a32:	4806      	ldr	r0, [pc, #24]	; (2a4c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    2a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    2a38:	f000 bfb9 	b.w	39ae <z_reschedule>
	__asm__ volatile(
    2a3c:	f385 8811 	msr	BASEPRI, r5
    2a40:	f3bf 8f6f 	isb	sy
}
    2a44:	bd38      	pop	{r3, r4, r5, pc}
    2a46:	bf00      	nop
    2a48:	200041e8 	.word	0x200041e8
    2a4c:	2000422b 	.word	0x2000422b

00002a50 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2a54:	4e28      	ldr	r6, [pc, #160]	; (2af8 <z_init_static_threads+0xa8>)
    2a56:	4d29      	ldr	r5, [pc, #164]	; (2afc <z_init_static_threads+0xac>)
{
    2a58:	b087      	sub	sp, #28
    2a5a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    2a5c:	42b5      	cmp	r5, r6
    2a5e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2a62:	d310      	bcc.n	2a86 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2a64:	f7ff fc6c 	bl	2340 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a68:	4c24      	ldr	r4, [pc, #144]	; (2afc <z_init_static_threads+0xac>)
    2a6a:	f8df a094 	ldr.w	sl, [pc, #148]	; 2b00 <z_init_static_threads+0xb0>
			return (u32_t)((t * to_hz + off) / from_hz);
    2a6e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2a72:	f240 36e7 	movw	r6, #999	; 0x3e7
    2a76:	2700      	movs	r7, #0
    2a78:	4544      	cmp	r4, r8
    2a7a:	d321      	bcc.n	2ac0 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2a7c:	b007      	add	sp, #28
    2a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2a82:	f7ff bca5 	b.w	23d0 <k_sched_unlock>
		z_setup_new_thread(
    2a86:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2a8a:	9305      	str	r3, [sp, #20]
    2a8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2a90:	9304      	str	r3, [sp, #16]
    2a92:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2a96:	9303      	str	r3, [sp, #12]
    2a98:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2a9c:	9302      	str	r3, [sp, #8]
    2a9e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2aa2:	9301      	str	r3, [sp, #4]
    2aa4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2aa8:	9300      	str	r3, [sp, #0]
    2aaa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2aae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2ab2:	f7ff ff95 	bl	29e0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2ab6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2aba:	64dd      	str	r5, [r3, #76]	; 0x4c
    2abc:	4625      	mov	r5, r4
    2abe:	e7cd      	b.n	2a5c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2ac0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ac2:	1c4b      	adds	r3, r1, #1
    2ac4:	d004      	beq.n	2ad0 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    2ac6:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    2ac8:	b921      	cbnz	r1, 2ad4 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    2aca:	4628      	mov	r0, r5
    2acc:	f7ff ff64 	bl	2998 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2ad0:	3430      	adds	r4, #48	; 0x30
    2ad2:	e7d1      	b.n	2a78 <z_init_static_threads+0x28>
    2ad4:	46b3      	mov	fp, r6
    2ad6:	46bc      	mov	ip, r7
    2ad8:	fbe9 bc01 	umlal	fp, ip, r9, r1
    2adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ae0:	2300      	movs	r3, #0
    2ae2:	4658      	mov	r0, fp
    2ae4:	4661      	mov	r1, ip
    2ae6:	f7fd faf9 	bl	dc <__aeabi_uldivmod>
    2aea:	4651      	mov	r1, sl
    2aec:	1c42      	adds	r2, r0, #1
    2aee:	f105 0018 	add.w	r0, r5, #24
    2af2:	f000 f841 	bl	2b78 <z_add_timeout>
}
    2af6:	e7eb      	b.n	2ad0 <z_init_static_threads+0x80>
    2af8:	200050b8 	.word	0x200050b8
    2afc:	200050b8 	.word	0x200050b8
    2b00:	00003a05 	.word	0x00003a05

00002b04 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2b04:	4b03      	ldr	r3, [pc, #12]	; (2b14 <elapsed+0x10>)
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	b90b      	cbnz	r3, 2b0e <elapsed+0xa>
    2b0a:	f7fd bf13 	b.w	934 <z_clock_elapsed>
}
    2b0e:	2000      	movs	r0, #0
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop
    2b14:	20004224 	.word	0x20004224

00002b18 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2b18:	6803      	ldr	r3, [r0, #0]
    2b1a:	b140      	cbz	r0, 2b2e <remove_timeout+0x16>
    2b1c:	4a07      	ldr	r2, [pc, #28]	; (2b3c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2b1e:	6852      	ldr	r2, [r2, #4]
    2b20:	4290      	cmp	r0, r2
    2b22:	d004      	beq.n	2b2e <remove_timeout+0x16>
	if (next(t) != NULL) {
    2b24:	b11b      	cbz	r3, 2b2e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2b26:	689a      	ldr	r2, [r3, #8]
    2b28:	6881      	ldr	r1, [r0, #8]
    2b2a:	440a      	add	r2, r1
    2b2c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2b2e:	6842      	ldr	r2, [r0, #4]
    2b30:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2b32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2b34:	2300      	movs	r3, #0
	node->prev = NULL;
    2b36:	e9c0 3300 	strd	r3, r3, [r0]
}
    2b3a:	4770      	bx	lr
    2b3c:	20005018 	.word	0x20005018

00002b40 <next_timeout>:
	return list->head == list;
    2b40:	4b0b      	ldr	r3, [pc, #44]	; (2b70 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2b42:	b510      	push	{r4, lr}
    2b44:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b46:	429c      	cmp	r4, r3
    2b48:	bf08      	it	eq
    2b4a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2b4c:	f7ff ffda 	bl	2b04 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2b50:	b154      	cbz	r4, 2b68 <next_timeout+0x28>
    2b52:	68a3      	ldr	r3, [r4, #8]
    2b54:	1a18      	subs	r0, r3, r0
    2b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2b5a:	4b06      	ldr	r3, [pc, #24]	; (2b74 <next_timeout+0x34>)
    2b5c:	691b      	ldr	r3, [r3, #16]
    2b5e:	b113      	cbz	r3, 2b66 <next_timeout+0x26>
    2b60:	4298      	cmp	r0, r3
    2b62:	bfa8      	it	ge
    2b64:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2b66:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2b68:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2b6c:	e7f5      	b.n	2b5a <next_timeout+0x1a>
    2b6e:	bf00      	nop
    2b70:	20005018 	.word	0x20005018
    2b74:	200041e8 	.word	0x200041e8

00002b78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2b78:	b570      	push	{r4, r5, r6, lr}
    2b7a:	4604      	mov	r4, r0
    2b7c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2b7e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2b80:	f04f 0320 	mov.w	r3, #32
    2b84:	f3ef 8511 	mrs	r5, BASEPRI
    2b88:	f383 8811 	msr	BASEPRI, r3
    2b8c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2b90:	f7ff ffb8 	bl	2b04 <elapsed>
	return list->head == list;
    2b94:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <z_add_timeout+0x80>)
    2b96:	681a      	ldr	r2, [r3, #0]
    2b98:	2e01      	cmp	r6, #1
    2b9a:	bfac      	ite	ge
    2b9c:	1980      	addge	r0, r0, r6
    2b9e:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ba0:	429a      	cmp	r2, r3
    2ba2:	60a0      	str	r0, [r4, #8]
    2ba4:	d001      	beq.n	2baa <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2ba6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2ba8:	b932      	cbnz	r2, 2bb8 <z_add_timeout+0x40>
	node->prev = list->tail;
    2baa:	685a      	ldr	r2, [r3, #4]
    2bac:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2bae:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2bb0:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    2bb2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2bb4:	605c      	str	r4, [r3, #4]
}
    2bb6:	e00a      	b.n	2bce <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2bb8:	6890      	ldr	r0, [r2, #8]
    2bba:	68a1      	ldr	r1, [r4, #8]
    2bbc:	4288      	cmp	r0, r1
    2bbe:	dd15      	ble.n	2bec <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    2bc0:	1a41      	subs	r1, r0, r1
    2bc2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2bc4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2bc6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2bca:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2bcc:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2bce:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bd0:	429a      	cmp	r2, r3
    2bd2:	d006      	beq.n	2be2 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2bd4:	4294      	cmp	r4, r2
    2bd6:	d104      	bne.n	2be2 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    2bd8:	f7ff ffb2 	bl	2b40 <next_timeout>
    2bdc:	2100      	movs	r1, #0
    2bde:	f7fd fe53 	bl	888 <z_clock_set_timeout>
	__asm__ volatile(
    2be2:	f385 8811 	msr	BASEPRI, r5
    2be6:	f3bf 8f6f 	isb	sy
		}
	}
}
    2bea:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2bec:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2bee:	4296      	cmp	r6, r2
    2bf0:	60a1      	str	r1, [r4, #8]
    2bf2:	d0da      	beq.n	2baa <z_add_timeout+0x32>
    2bf4:	6812      	ldr	r2, [r2, #0]
    2bf6:	e7d7      	b.n	2ba8 <z_add_timeout+0x30>
    2bf8:	20005018 	.word	0x20005018

00002bfc <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c00:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2c02:	f7ff fc7d 	bl	2500 <z_time_slice>
	__asm__ volatile(
    2c06:	f04f 0320 	mov.w	r3, #32
    2c0a:	f3ef 8411 	mrs	r4, BASEPRI
    2c0e:	f383 8811 	msr	BASEPRI, r3
    2c12:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2c16:	4d20      	ldr	r5, [pc, #128]	; (2c98 <z_clock_announce+0x9c>)
    2c18:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2c9c <z_clock_announce+0xa0>
	return list->head == list;
    2c1c:	f8df a080 	ldr.w	sl, [pc, #128]	; 2ca0 <z_clock_announce+0xa4>
    2c20:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2c22:	46c1      	mov	r9, r8
    2c24:	f8da 0000 	ldr.w	r0, [sl]
    2c28:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c2a:	4550      	cmp	r0, sl
    2c2c:	e9d8 6700 	ldrd	r6, r7, [r8]
    2c30:	d005      	beq.n	2c3e <z_clock_announce+0x42>
    2c32:	b120      	cbz	r0, 2c3e <z_clock_announce+0x42>
    2c34:	6883      	ldr	r3, [r0, #8]
    2c36:	4293      	cmp	r3, r2
    2c38:	dd13      	ble.n	2c62 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2c3a:	1a9b      	subs	r3, r3, r2
    2c3c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    2c3e:	18b6      	adds	r6, r6, r2
    2c40:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    2c44:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    2c48:	2600      	movs	r6, #0
    2c4a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    2c4c:	f7ff ff78 	bl	2b40 <next_timeout>
    2c50:	4631      	mov	r1, r6
    2c52:	f7fd fe19 	bl	888 <z_clock_set_timeout>
	__asm__ volatile(
    2c56:	f384 8811 	msr	BASEPRI, r4
    2c5a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    2c62:	18f6      	adds	r6, r6, r3
    2c64:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    2c68:	1ad3      	subs	r3, r2, r3
    2c6a:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    2c6c:	2300      	movs	r3, #0
    2c6e:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    2c70:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    2c74:	f7ff ff50 	bl	2b18 <remove_timeout>
    2c78:	f384 8811 	msr	BASEPRI, r4
    2c7c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2c80:	68c3      	ldr	r3, [r0, #12]
    2c82:	4798      	blx	r3
	__asm__ volatile(
    2c84:	f04f 0320 	mov.w	r3, #32
    2c88:	f3ef 8411 	mrs	r4, BASEPRI
    2c8c:	f383 8811 	msr	BASEPRI, r3
    2c90:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2c94:	e7c6      	b.n	2c24 <z_clock_announce+0x28>
    2c96:	bf00      	nop
    2c98:	20004224 	.word	0x20004224
    2c9c:	20000000 	.word	0x20000000
    2ca0:	20005018 	.word	0x20005018

00002ca4 <z_tick_get>:

s64_t z_tick_get(void)
{
    2ca4:	b510      	push	{r4, lr}
    2ca6:	f04f 0320 	mov.w	r3, #32
    2caa:	f3ef 8411 	mrs	r4, BASEPRI
    2cae:	f383 8811 	msr	BASEPRI, r3
    2cb2:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2cb6:	f7fd fe3d 	bl	934 <z_clock_elapsed>
    2cba:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <z_tick_get+0x30>)
    2cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2cc0:	1812      	adds	r2, r2, r0
    2cc2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2cc6:	f384 8811 	msr	BASEPRI, r4
    2cca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2cce:	4610      	mov	r0, r2
    2cd0:	4619      	mov	r1, r3
    2cd2:	bd10      	pop	{r4, pc}
    2cd4:	20000000 	.word	0x20000000

00002cd8 <display_write>:
{
    2cd8:	b410      	push	{r4}
	return api->write(dev, x, y, desc, buf);
    2cda:	6844      	ldr	r4, [r0, #4]
    2cdc:	68a4      	ldr	r4, [r4, #8]
    2cde:	46a4      	mov	ip, r4
}
    2ce0:	bc10      	pop	{r4}
	return api->write(dev, x, y, desc, buf);
    2ce2:	4760      	bx	ip

00002ce4 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    2ce4:	b570      	push	{r4, r5, r6, lr}
    2ce6:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    2ce8:	f990 000b 	ldrsb.w	r0, [r0, #11]
    2cec:	240c      	movs	r4, #12
{
    2cee:	460d      	mov	r5, r1
    2cf0:	434c      	muls	r4, r1
		p->levels[level].bits : p->levels[level].bits_p;
    2cf2:	42a8      	cmp	r0, r5
    2cf4:	eb06 0104 	add.w	r1, r6, r4
    2cf8:	bfb8      	it	lt
    2cfa:	5931      	ldrlt	r1, [r6, r4]

	*word = &bitarray[bn / 32];
    2cfc:	2a00      	cmp	r2, #0
    2cfe:	4610      	mov	r0, r2
    2d00:	bfb8      	it	lt
    2d02:	f102 001f 	addlt.w	r0, r2, #31
    2d06:	1140      	asrs	r0, r0, #5
    2d08:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2d0c:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    2d0e:	f002 001f 	and.w	r0, r2, #31
    2d12:	bd70      	pop	{r4, r5, r6, pc}

00002d14 <pool_irq_lock.isra.0.part.0>:
	__asm__ volatile(
    2d14:	f04f 0320 	mov.w	r3, #32
    2d18:	f3ef 8011 	mrs	r0, BASEPRI
    2d1c:	f383 8811 	msr	BASEPRI, r3
    2d20:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
    2d24:	4770      	bx	lr

00002d26 <pool_irq_unlock.isra.0>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    2d26:	07c3      	lsls	r3, r0, #31
    2d28:	d503      	bpl.n	2d32 <pool_irq_unlock.isra.0+0xc>
	__asm__ volatile(
    2d2a:	f381 8811 	msr	BASEPRI, r1
    2d2e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
    2d32:	4770      	bx	lr

00002d34 <z_sys_mem_pool_base_init>:
{
    2d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2d38:	6846      	ldr	r6, [r0, #4]
    2d3a:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2d3c:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
    2d3e:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    2d42:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2d44:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    2d48:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2d4a:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2d4c:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    2d4e:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
    2d50:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    2d54:	4598      	cmp	r8, r3
    2d56:	dc05      	bgt.n	2d64 <z_sys_mem_pool_base_init+0x30>
    2d58:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
    2d5a:	4619      	mov	r1, r3
    2d5c:	428f      	cmp	r7, r1
    2d5e:	dc20      	bgt.n	2da2 <z_sys_mem_pool_base_init+0x6e>
}
    2d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    2d64:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    2d68:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    2d6c:	fb09 fe03 	mul.w	lr, r9, r3
    2d70:	eb0a 040e 	add.w	r4, sl, lr
    2d74:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    2d78:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
    2d7a:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    2d7e:	d805      	bhi.n	2d8c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    2d80:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    2d82:	0892      	lsrs	r2, r2, #2
    2d84:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    2d88:	3301      	adds	r3, #1
    2d8a:	e7e3      	b.n	2d54 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    2d8c:	f115 041f 	adds.w	r4, r5, #31
    2d90:	bf48      	it	mi
    2d92:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    2d96:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    2d98:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    2d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2da0:	e7ef      	b.n	2d82 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    2da2:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    2da4:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    2da6:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    2daa:	18ec      	adds	r4, r5, r3
	node->next = list;
    2dac:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    2db0:	6895      	ldr	r5, [r2, #8]
    2db2:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    2db4:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    2db6:	3101      	adds	r1, #1
    2db8:	602c      	str	r4, [r5, #0]
	list->tail = node;
    2dba:	4433      	add	r3, r6
    2dbc:	6094      	str	r4, [r2, #8]
    2dbe:	e7cd      	b.n	2d5c <z_sys_mem_pool_base_init+0x28>

00002dc0 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
    2dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dc4:	b087      	sub	sp, #28
    2dc6:	af00      	add	r7, sp, #0
    2dc8:	e9c7 3201 	strd	r3, r2, [r7, #4]
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    2dcc:	7a82      	ldrb	r2, [r0, #10]
    2dce:	0093      	lsls	r3, r2, #2
    2dd0:	3307      	adds	r3, #7
    2dd2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    2dd6:	ebad 0d03 	sub.w	sp, sp, r3
    2dda:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
    2ddc:	4653      	mov	r3, sl
{
    2dde:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
    2de0:	6840      	ldr	r0, [r0, #4]
    2de2:	f843 0904 	str.w	r0, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
    2de6:	2400      	movs	r4, #0
    2de8:	42a2      	cmp	r2, r4
    2dea:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    2dee:	dd09      	ble.n	2e04 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
    2df0:	b124      	cbz	r4, 2dfc <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
    2df2:	6818      	ldr	r0, [r3, #0]
    2df4:	0880      	lsrs	r0, r0, #2
    2df6:	f020 0003 	bic.w	r0, r0, #3
    2dfa:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
    2dfc:	f853 0f04 	ldr.w	r0, [r3, #4]!
    2e00:	4288      	cmp	r0, r1
    2e02:	d208      	bcs.n	2e16 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
    2e04:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    2e08:	d107      	bne.n	2e1a <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
    2e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2e0c:	2300      	movs	r3, #0
    2e0e:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
    2e10:	f06f 000b 	mvn.w	r0, #11
    2e14:	e02e      	b.n	2e74 <z_sys_mem_pool_block_alloc+0xb4>
	for (i = 0; i < p->n_levels; i++) {
    2e16:	3401      	adds	r4, #1
    2e18:	e7e6      	b.n	2de8 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    2e1a:	7c2e      	ldrb	r6, [r5, #16]
    2e1c:	f016 0601 	ands.w	r6, r6, #1
    2e20:	d002      	beq.n	2e28 <z_sys_mem_pool_block_alloc+0x68>
    2e22:	f7ff ff77 	bl	2d14 <pool_irq_lock.isra.0.part.0>
    2e26:	4606      	mov	r6, r0
	for (i = alloc_l; i >= 0; i--) {
    2e28:	68ea      	ldr	r2, [r5, #12]
    2e2a:	230c      	movs	r3, #12
    2e2c:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
    2e30:	46c8      	mov	r8, r9
	return list->head == list;
    2e32:	461a      	mov	r2, r3
    2e34:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    2e38:	4294      	cmp	r4, r2
    2e3a:	d11f      	bne.n	2e7c <z_sys_mem_pool_block_alloc+0xbc>
	for (i = alloc_l; i >= 0; i--) {
    2e3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2e40:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2e44:	f1a3 030c 	sub.w	r3, r3, #12
    2e48:	d1f3      	bne.n	2e32 <z_sys_mem_pool_block_alloc+0x72>
    2e4a:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
    2e4c:	7c28      	ldrb	r0, [r5, #16]
    2e4e:	4631      	mov	r1, r6
    2e50:	f7ff ff69 	bl	2d26 <pool_irq_unlock.isra.0>
	*data_p = data;
    2e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2e56:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
    2e58:	2c00      	cmp	r4, #0
    2e5a:	d0d9      	beq.n	2e10 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
    2e5c:	68bb      	ldr	r3, [r7, #8]
    2e5e:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2e62:	682b      	ldr	r3, [r5, #0]
    2e64:	1ae4      	subs	r4, r4, r3
    2e66:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
    2e6a:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
    2e6e:	687b      	ldr	r3, [r7, #4]

	return 0;
    2e70:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
    2e72:	601c      	str	r4, [r3, #0]
}
    2e74:	371c      	adds	r7, #28
    2e76:	46bd      	mov	sp, r7
    2e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
    2e7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    2e80:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2e82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2e84:	2300      	movs	r3, #0
	node->prev = NULL;
    2e86:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2e8a:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
    2e8c:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    2e90:	f107 0314 	add.w	r3, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2e94:	1a62      	subs	r2, r4, r1
	int bit = get_bit_ptr(p, level, bn, &word);
    2e96:	4641      	mov	r1, r8
    2e98:	fb92 f2f0 	sdiv	r2, r2, r0
    2e9c:	4628      	mov	r0, r5
    2e9e:	f7ff ff21 	bl	2ce4 <get_bit_ptr>
	*word |= (1<<bit);
    2ea2:	f8d7 c014 	ldr.w	ip, [r7, #20]
    2ea6:	2101      	movs	r1, #1
    2ea8:	f8dc 2000 	ldr.w	r2, [ip]
    2eac:	6039      	str	r1, [r7, #0]
    2eae:	fa01 f000 	lsl.w	r0, r1, r0
    2eb2:	4302      	orrs	r2, r0
    2eb4:	f8cc 2000 	str.w	r2, [ip]
	int bit = get_bit_ptr(p, level, bn, &word);
    2eb8:	469b      	mov	fp, r3
			for (from_l = i; from_l < alloc_l; from_l++) {
    2eba:	45c8      	cmp	r8, r9
    2ebc:	dac6      	bge.n	2e4c <z_sys_mem_pool_block_alloc+0x8c>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2ebe:	682a      	ldr	r2, [r5, #0]
    2ec0:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
    2ec4:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
    2ec8:	4641      	mov	r1, r8
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2eca:	1aa2      	subs	r2, r4, r2
	int bit = get_bit_ptr(p, level, bn, &word);
    2ecc:	4628      	mov	r0, r5
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    2ece:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
    2ed2:	465b      	mov	r3, fp
    2ed4:	0092      	lsls	r2, r2, #2
    2ed6:	f7ff ff05 	bl	2ce4 <get_bit_ptr>
	*word |= (1<<bit);
    2eda:	697a      	ldr	r2, [r7, #20]
    2edc:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
    2ede:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
    2ee0:	fa03 f000 	lsl.w	r0, r3, r0
    2ee4:	6813      	ldr	r3, [r2, #0]
    2ee6:	4303      	orrs	r3, r0
    2ee8:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
    2eea:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
    2eee:	230c      	movs	r3, #12
    2ef0:	fb03 1108 	mla	r1, r3, r8, r1
    2ef4:	2203      	movs	r2, #3
    2ef6:	f101 0e04 	add.w	lr, r1, #4
    2efa:	1823      	adds	r3, r4, r0
    2efc:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
    2efe:	688a      	ldr	r2, [r1, #8]
    2f00:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    2f02:	688a      	ldr	r2, [r1, #8]
	node->next = list;
    2f04:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
    2f08:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
    2f0a:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
    2f0c:	608b      	str	r3, [r1, #8]
    2f0e:	3a01      	subs	r2, #1
    2f10:	4403      	add	r3, r0
    2f12:	60fa      	str	r2, [r7, #12]
    2f14:	d1f3      	bne.n	2efe <z_sys_mem_pool_block_alloc+0x13e>
				pool_irq_unlock(p, key);
    2f16:	7c28      	ldrb	r0, [r5, #16]
    2f18:	4631      	mov	r1, r6
    2f1a:	f7ff ff04 	bl	2d26 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    2f1e:	7c2b      	ldrb	r3, [r5, #16]
    2f20:	07db      	lsls	r3, r3, #31
    2f22:	d503      	bpl.n	2f2c <z_sys_mem_pool_block_alloc+0x16c>
    2f24:	f7ff fef6 	bl	2d14 <pool_irq_lock.isra.0.part.0>
    2f28:	4606      	mov	r6, r0
    2f2a:	e7c6      	b.n	2eba <z_sys_mem_pool_block_alloc+0xfa>
		return 0;
    2f2c:	68fe      	ldr	r6, [r7, #12]
			for (from_l = i; from_l < alloc_l; from_l++) {
    2f2e:	e7c4      	b.n	2eba <z_sys_mem_pool_block_alloc+0xfa>

00002f30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2f30:	4604      	mov	r4, r0
    2f32:	b508      	push	{r3, lr}
    2f34:	4608      	mov	r0, r1
    2f36:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2f38:	461a      	mov	r2, r3
    2f3a:	47a0      	blx	r4
	return z_impl_k_current_get();
    2f3c:	f7ff fcde 	bl	28fc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    2f40:	f7fd ff18 	bl	d74 <z_impl_k_thread_abort>

00002f44 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    2f44:	4770      	bx	lr

00002f46 <get_status>:
	data = get_sub_data(dev, type);
    2f46:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
    2f48:	b2c9      	uxtb	r1, r1
	if (data->started) {
    2f4a:	220c      	movs	r2, #12
    2f4c:	fb02 3101 	mla	r1, r2, r1, r3
    2f50:	7a4b      	ldrb	r3, [r1, #9]
    2f52:	b923      	cbnz	r3, 2f5e <get_status+0x18>
	if (data->ref > 0) {
    2f54:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2f56:	fab0 f080 	clz	r0, r0
    2f5a:	0940      	lsrs	r0, r0, #5
    2f5c:	4770      	bx	lr
    2f5e:	2002      	movs	r0, #2
}
    2f60:	4770      	bx	lr

00002f62 <clkstarted_handle>:
{
    2f62:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    2f64:	6884      	ldr	r4, [r0, #8]
	sub_data->started = true;
    2f66:	230c      	movs	r3, #12
    2f68:	fb03 4401 	mla	r4, r3, r1, r4
    2f6c:	2301      	movs	r3, #1
{
    2f6e:	4605      	mov	r5, r0
	sub_data->started = true;
    2f70:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    2f72:	f04f 0320 	mov.w	r3, #32
    2f76:	f3ef 8111 	mrs	r1, BASEPRI
    2f7a:	f383 8811 	msr	BASEPRI, r3
    2f7e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    2f82:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2f84:	b12b      	cbz	r3, 2f92 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2f86:	6860      	ldr	r0, [r4, #4]
    2f88:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2f8a:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2f8c:	4283      	cmp	r3, r0
	list->tail = node;
    2f8e:	bf08      	it	eq
    2f90:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    2f92:	f381 8811 	msr	BASEPRI, r1
    2f96:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    2f9a:	b903      	cbnz	r3, 2f9e <clkstarted_handle+0x3c>
}
    2f9c:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    2f9e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2fa2:	4628      	mov	r0, r5
    2fa4:	4790      	blx	r2
    2fa6:	e7e4      	b.n	2f72 <clkstarted_handle+0x10>

00002fa8 <clock_async_start>:
	const struct nrf_clock_control_config *config =
    2fa8:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
    2faa:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    2fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
    2fb2:	689f      	ldr	r7, [r3, #8]
{
    2fb4:	4605      	mov	r5, r0
    2fb6:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
    2fb8:	b14a      	cbz	r2, 2fce <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    2fba:	230c      	movs	r3, #12
    2fbc:	4373      	muls	r3, r6
    2fbe:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    2fc2:	429a      	cmp	r2, r3
    2fc4:	d05c      	beq.n	3080 <clock_async_start+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2fc6:	b113      	cbz	r3, 2fce <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2fc8:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d1f9      	bne.n	2fc2 <clock_async_start+0x1a>
	__asm__ volatile(
    2fce:	f04f 0320 	mov.w	r3, #32
    2fd2:	f3ef 8011 	mrs	r0, BASEPRI
    2fd6:	f383 8811 	msr	BASEPRI, r3
    2fda:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    2fde:	210c      	movs	r1, #12
    2fe0:	4371      	muls	r1, r6
    2fe2:	eb0c 0301 	add.w	r3, ip, r1
    2fe6:	7a1c      	ldrb	r4, [r3, #8]
    2fe8:	3401      	adds	r4, #1
    2fea:	b2e4      	uxtb	r4, r4
    2fec:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    2fee:	f380 8811 	msr	BASEPRI, r0
    2ff2:	f3bf 8f6f 	isb	sy
	if (data) {
    2ff6:	b332      	cbz	r2, 3046 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
    2ff8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2ffc:	f04f 0e03 	mov.w	lr, #3
    3000:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
    3004:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    3006:	b9a0      	cbnz	r0, 3032 <clock_async_start+0x8a>
	__asm__ volatile(
    3008:	f04f 0e20 	mov.w	lr, #32
    300c:	f3ef 8811 	mrs	r8, BASEPRI
    3010:	f38e 8811 	msr	BASEPRI, lr
    3014:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3018:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    301a:	f8d3 e004 	ldr.w	lr, [r3, #4]
    301e:	f1be 0f00 	cmp.w	lr, #0
    3022:	d120      	bne.n	3066 <clock_async_start+0xbe>
	list->tail = node;
    3024:	605a      	str	r2, [r3, #4]
	list->head = node;
    3026:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    302a:	f388 8811 	msr	BASEPRI, r8
    302e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3036:	2103      	movs	r1, #3
    3038:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    303c:	b118      	cbz	r0, 3046 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
    303e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    3042:	4628      	mov	r0, r5
    3044:	4798      	blx	r3
	if (ref == 1) {
    3046:	2c01      	cmp	r4, #1
    3048:	d10b      	bne.n	3062 <clock_async_start+0xba>
		do_start =  (config->start_handler) ?
    304a:	230c      	movs	r3, #12
    304c:	4373      	muls	r3, r6
    304e:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
    3050:	b96b      	cbnz	r3, 306e <clock_async_start+0xc6>
			nrf_clock_task_trigger(NRF_CLOCK,
    3052:	210c      	movs	r1, #12
    3054:	fb01 7606 	mla	r6, r1, r6, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3058:	2201      	movs	r2, #1
    305a:	7ab3      	ldrb	r3, [r6, #10]
    305c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3060:	601a      	str	r2, [r3, #0]
	return 0;
    3062:	2000      	movs	r0, #0
    3064:	e00e      	b.n	3084 <clock_async_start+0xdc>
	parent->next = child;
    3066:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    306a:	605a      	str	r2, [r3, #4]
}
    306c:	e7dd      	b.n	302a <clock_async_start+0x82>
				config->start_handler(dev) : true;
    306e:	4628      	mov	r0, r5
    3070:	4798      	blx	r3
    3072:	2800      	cmp	r0, #0
    3074:	d1ed      	bne.n	3052 <clock_async_start+0xaa>
			clkstarted_handle(dev, type);
    3076:	4631      	mov	r1, r6
    3078:	4628      	mov	r0, r5
    307a:	f7ff ff72 	bl	2f62 <clkstarted_handle>
    307e:	e7f0      	b.n	3062 <clock_async_start+0xba>
		return -EBUSY;
    3080:	f06f 000f 	mvn.w	r0, #15
}
    3084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003088 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3088:	2200      	movs	r2, #0
    308a:	f7ff bf8d 	b.w	2fa8 <clock_async_start>

0000308e <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    308e:	2200      	movs	r2, #0
{
    3090:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3092:	2101      	movs	r1, #1
{
    3094:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3096:	4610      	mov	r0, r2
    3098:	f7fd fcd8 	bl	a4c <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    309c:	2000      	movs	r0, #0
    309e:	f7fd fcc5 	bl	a2c <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    30a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30a6:	2201      	movs	r2, #1
    30a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    30ac:	2203      	movs	r2, #3
    30ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    30b2:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    30b4:	2000      	movs	r0, #0
	list->tail = NULL;
    30b6:	e9c3 0000 	strd	r0, r0, [r3]
    30ba:	68a3      	ldr	r3, [r4, #8]
    30bc:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    30c0:	bd10      	pop	{r4, pc}

000030c2 <clock_stop>:
{
    30c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    30c4:	6802      	ldr	r2, [r0, #0]
	data = get_sub_data(dev, type);
    30c6:	6886      	ldr	r6, [r0, #8]
	const struct nrf_clock_control_config *config =
    30c8:	6897      	ldr	r7, [r2, #8]
	return &config->subsys[type];
    30ca:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
    30cc:	f04f 0320 	mov.w	r3, #32
    30d0:	f3ef 8511 	mrs	r5, BASEPRI
    30d4:	f383 8811 	msr	BASEPRI, r3
    30d8:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    30dc:	220c      	movs	r2, #12
    30de:	4362      	muls	r2, r4
    30e0:	18b1      	adds	r1, r6, r2
    30e2:	7a0b      	ldrb	r3, [r1, #8]
    30e4:	b33b      	cbz	r3, 3136 <clock_stop+0x74>
	data->ref--;
    30e6:	3b01      	subs	r3, #1
    30e8:	b2db      	uxtb	r3, r3
    30ea:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    30ec:	bb33      	cbnz	r3, 313c <clock_stop+0x7a>
	list->head = NULL;
    30ee:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
    30f0:	443a      	add	r2, r7
	list->tail = NULL;
    30f2:	604b      	str	r3, [r1, #4]
    30f4:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
    30f6:	b9d3      	cbnz	r3, 312e <clock_stop+0x6c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    30f8:	230c      	movs	r3, #12
    30fa:	fb03 7304 	mla	r3, r3, r4, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30fe:	2101      	movs	r1, #1
    3100:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3102:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3104:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    310c:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    310e:	2200      	movs	r2, #0
    3110:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3116:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    3118:	210c      	movs	r1, #12
    311a:	fb01 6404 	mla	r4, r1, r4, r6
    311e:	2000      	movs	r0, #0
    3120:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    3122:	f385 8811 	msr	BASEPRI, r5
    3126:	f3bf 8f6f 	isb	sy
}
    312a:	b003      	add	sp, #12
    312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
    312e:	4798      	blx	r3
    3130:	2800      	cmp	r0, #0
    3132:	d1e1      	bne.n	30f8 <clock_stop+0x36>
    3134:	e7f0      	b.n	3118 <clock_stop+0x56>
		err = -EALREADY;
    3136:	f06f 0044 	mvn.w	r0, #68	; 0x44
    313a:	e7f2      	b.n	3122 <clock_stop+0x60>
	int err = 0;
    313c:	2000      	movs	r0, #0
    313e:	e7f0      	b.n	3122 <clock_stop+0x60>

00003140 <st7789v_read>:
}
    3140:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3144:	4770      	bx	lr

00003146 <st7789v_get_framebuffer>:
}
    3146:	2000      	movs	r0, #0
    3148:	4770      	bx	lr

0000314a <st7789v_set_brightness>:
}
    314a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    314e:	4770      	bx	lr

00003150 <st7789v_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3150:	2910      	cmp	r1, #16
}
    3152:	bf14      	ite	ne
    3154:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    3158:	2000      	moveq	r0, #0
    315a:	4770      	bx	lr

0000315c <st7789v_set_orientation>:
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    315c:	2900      	cmp	r1, #0
}
    315e:	bf14      	ite	ne
    3160:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    3164:	2000      	moveq	r0, #0
    3166:	4770      	bx	lr

00003168 <k_sleep>:
	return z_impl_k_sleep(ms);
    3168:	f7ff bba0 	b.w	28ac <z_impl_k_sleep>

0000316c <st7789v_get_capabilities>:
{
    316c:	b538      	push	{r3, r4, r5, lr}
    316e:	460c      	mov	r4, r1
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    3170:	6885      	ldr	r5, [r0, #8]
	memset(capabilities, 0, sizeof(struct display_capabilities));
    3172:	2210      	movs	r2, #16
    3174:	2100      	movs	r1, #0
    3176:	4620      	mov	r0, r4
    3178:	f000 f90c 	bl	3394 <memset>
	capabilities->x_resolution = data->width;
    317c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    317e:	8023      	strh	r3, [r4, #0]
	capabilities->y_resolution = data->height;
    3180:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    3182:	8063      	strh	r3, [r4, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
    3184:	2310      	movs	r3, #16
    3186:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
    3188:	81a3      	strh	r3, [r4, #12]
}
    318a:	bd38      	pop	{r3, r4, r5, pc}

0000318c <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
    318c:	b410      	push	{r4}
    318e:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
    3190:	6842      	ldr	r2, [r0, #4]
    3192:	6854      	ldr	r4, [r2, #4]
    3194:	460a      	mov	r2, r1
    3196:	46a4      	mov	ip, r4
    3198:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
    319a:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    319c:	4760      	bx	ip

0000319e <st7789v_set_contrast>:
    319e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    31a2:	4770      	bx	lr

000031a4 <st7789v_transmit>:
{
    31a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31a8:	4604      	mov	r4, r0
    31aa:	b087      	sub	sp, #28
    31ac:	4698      	mov	r8, r3
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    31ae:	4625      	mov	r5, r4
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
    31b0:	f10d 0307 	add.w	r3, sp, #7
{
    31b4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
    31b8:	9302      	str	r3, [sp, #8]
    31ba:	2701      	movs	r7, #1
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
    31bc:	ab02      	add	r3, sp, #8
{
    31be:	4616      	mov	r6, r2
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
    31c0:	2112      	movs	r1, #18
    31c2:	2200      	movs	r2, #0
    31c4:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
    31c6:	9703      	str	r7, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
    31c8:	e9cd 3704 	strd	r3, r7, [sp, #16]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
    31cc:	f7ff ffde 	bl	318c <gpio_pin_write>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    31d0:	f855 0b04 	ldr.w	r0, [r5], #4
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    31d4:	6843      	ldr	r3, [r0, #4]
    31d6:	aa04      	add	r2, sp, #16
    31d8:	f8d3 9000 	ldr.w	r9, [r3]
    31dc:	4629      	mov	r1, r5
    31de:	2300      	movs	r3, #0
    31e0:	47c8      	blx	r9
	if (tx_data != NULL) {
    31e2:	b16e      	cbz	r6, 3200 <st7789v_transmit+0x5c>
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
    31e4:	6a20      	ldr	r0, [r4, #32]
    31e6:	463a      	mov	r2, r7
    31e8:	2112      	movs	r1, #18
		tx_buf.len = tx_count;
    31ea:	e9cd 6802 	strd	r6, r8, [sp, #8]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
    31ee:	f7ff ffcd 	bl	318c <gpio_pin_write>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    31f2:	6820      	ldr	r0, [r4, #0]
    31f4:	6843      	ldr	r3, [r0, #4]
    31f6:	aa04      	add	r2, sp, #16
    31f8:	681c      	ldr	r4, [r3, #0]
    31fa:	4629      	mov	r1, r5
    31fc:	2300      	movs	r3, #0
    31fe:	47a0      	blx	r4
}
    3200:	b007      	add	sp, #28
    3202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003206 <st7789v_blanking_on>:
{
    3206:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
    3208:	2300      	movs	r3, #0
    320a:	6880      	ldr	r0, [r0, #8]
    320c:	461a      	mov	r2, r3
    320e:	2128      	movs	r1, #40	; 0x28
    3210:	f7ff ffc8 	bl	31a4 <st7789v_transmit>
}
    3214:	2000      	movs	r0, #0
    3216:	bd08      	pop	{r3, pc}

00003218 <st7789v_blanking_off>:
{
    3218:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
    321a:	2300      	movs	r3, #0
    321c:	6880      	ldr	r0, [r0, #8]
    321e:	461a      	mov	r2, r3
    3220:	2129      	movs	r1, #41	; 0x29
    3222:	f7ff ffbf 	bl	31a4 <st7789v_transmit>
}
    3226:	2000      	movs	r0, #0
    3228:	bd08      	pop	{r3, pc}

0000322a <st7789v_write>:
{
    322a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    322e:	6886      	ldr	r6, [r0, #8]
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
    3230:	f8b3 8006 	ldrh.w	r8, [r3, #6]
    3234:	8898      	ldrh	r0, [r3, #4]
	u16_t ram_y = y + data->y_offset;
    3236:	8d74      	ldrh	r4, [r6, #42]	; 0x2a
{
    3238:	461d      	mov	r5, r3
	u16_t ram_x = x + data->x_offset;
    323a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    323c:	4419      	add	r1, r3
    323e:	b28b      	uxth	r3, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    3240:	3b01      	subs	r3, #1
{
    3242:	b085      	sub	sp, #20
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    3244:	4403      	add	r3, r0
	u16_t ram_y = y + data->y_offset;
    3246:	4422      	add	r2, r4
	spi_data[0] = sys_cpu_to_be16(ram_x);
    3248:	ba49      	rev16	r1, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    324a:	ba5b      	rev16	r3, r3
	u16_t ram_y = y + data->y_offset;
    324c:	b294      	uxth	r4, r2
	spi_data[0] = sys_cpu_to_be16(ram_x);
    324e:	f8ad 1008 	strh.w	r1, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    3252:	f8ad 300a 	strh.w	r3, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
    3256:	aa02      	add	r2, sp, #8
    3258:	2304      	movs	r3, #4
    325a:	212a      	movs	r1, #42	; 0x2a
    325c:	4630      	mov	r0, r6
{
    325e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
    3260:	f7ff ffa0 	bl	31a4 <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
    3264:	ba63      	rev16	r3, r4
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    3266:	3c01      	subs	r4, #1
    3268:	4444      	add	r4, r8
	spi_data[0] = sys_cpu_to_be16(ram_y);
    326a:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    326e:	ba64      	rev16	r4, r4
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
    3270:	2304      	movs	r3, #4
    3272:	aa02      	add	r2, sp, #8
    3274:	212b      	movs	r1, #43	; 0x2b
    3276:	4630      	mov	r0, r6
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    3278:	f8ad 400a 	strh.w	r4, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
    327c:	f7ff ff92 	bl	31a4 <st7789v_transmit>
	if (desc->pitch > desc->width) {
    3280:	88ab      	ldrh	r3, [r5, #4]
    3282:	892a      	ldrh	r2, [r5, #8]
    3284:	88ec      	ldrh	r4, [r5, #6]
		nbr_of_writes = desc->height;
    3286:	429a      	cmp	r2, r3
    3288:	bf84      	itt	hi
    328a:	46a0      	movhi	r8, r4
    328c:	2401      	movhi	r4, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
    328e:	fb04 f303 	mul.w	r3, r4, r3
    3292:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3296:	463a      	mov	r2, r7
    3298:	f04f 012c 	mov.w	r1, #44	; 0x2c
    329c:	4630      	mov	r0, r6
		nbr_of_writes = desc->height;
    329e:	bf98      	it	ls
    32a0:	f04f 0801 	movls.w	r8, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
    32a4:	f7ff ff7e 	bl	31a4 <st7789v_transmit>
	tx_bufs.count = 1;
    32a8:	2301      	movs	r3, #1
    32aa:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    32ac:	892b      	ldrh	r3, [r5, #8]
	tx_bufs.buffers = &tx_buf;
    32ae:	f8cd d008 	str.w	sp, [sp, #8]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    32b2:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
    32b6:	f04f 0900 	mov.w	r9, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    32ba:	f106 0a04 	add.w	sl, r6, #4
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
    32be:	f109 0901 	add.w	r9, r9, #1
    32c2:	fa1f f389 	uxth.w	r3, r9
    32c6:	4598      	cmp	r8, r3
    32c8:	d803      	bhi.n	32d2 <st7789v_write+0xa8>
}
    32ca:	2000      	movs	r0, #0
    32cc:	b005      	add	sp, #20
    32ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
    32d2:	88ab      	ldrh	r3, [r5, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    32d4:	6830      	ldr	r0, [r6, #0]
		tx_buf.buf = (void *)write_data_start;
    32d6:	9700      	str	r7, [sp, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
    32d8:	4363      	muls	r3, r4
    32da:	005b      	lsls	r3, r3, #1
    32dc:	9301      	str	r3, [sp, #4]
    32de:	6843      	ldr	r3, [r0, #4]
    32e0:	aa02      	add	r2, sp, #8
    32e2:	f8d3 b000 	ldr.w	fp, [r3]
    32e6:	4651      	mov	r1, sl
    32e8:	2300      	movs	r3, #0
    32ea:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    32ec:	892b      	ldrh	r3, [r5, #8]
    32ee:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
    32f2:	e7e4      	b.n	32be <st7789v_write+0x94>

000032f4 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    32f4:	4770      	bx	lr

000032f6 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    32f6:	4770      	bx	lr

000032f8 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    32f8:	f7fd bc0c 	b.w	b14 <z_arm_bus_fault>

000032fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    32fc:	f000 bb29 	b.w	3952 <z_fatal_error>

00003300 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3300:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3302:	6800      	ldr	r0, [r0, #0]
    3304:	f000 bb25 	b.w	3952 <z_fatal_error>

00003308 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3308:	b508      	push	{r3, lr}
	handler();
    330a:	f7fd fc0d 	bl	b28 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    330e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    3312:	f7fd bb29 	b.w	968 <z_arm_exc_exit>

00003316 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3316:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    3318:	2100      	movs	r1, #0
    331a:	a801      	add	r0, sp, #4
    331c:	f7fd fdfc 	bl	f18 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    3320:	b003      	add	sp, #12
    3322:	f85d fb04 	ldr.w	pc, [sp], #4

00003326 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3326:	1e43      	subs	r3, r0, #1
    3328:	3901      	subs	r1, #1
    332a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    332e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3332:	4282      	cmp	r2, r0
    3334:	d101      	bne.n	333a <strcmp+0x14>
    3336:	2a00      	cmp	r2, #0
    3338:	d1f7      	bne.n	332a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    333a:	1a10      	subs	r0, r2, r0
    333c:	4770      	bx	lr

0000333e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    333e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3340:	ea81 0400 	eor.w	r4, r1, r0
    3344:	07a5      	lsls	r5, r4, #30
    3346:	4603      	mov	r3, r0
    3348:	d00b      	beq.n	3362 <memcpy+0x24>
    334a:	3b01      	subs	r3, #1
    334c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    334e:	4291      	cmp	r1, r2
    3350:	d11b      	bne.n	338a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3352:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3354:	2a00      	cmp	r2, #0
    3356:	d0fc      	beq.n	3352 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3358:	f811 4b01 	ldrb.w	r4, [r1], #1
    335c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    3360:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    3362:	079c      	lsls	r4, r3, #30
    3364:	d1f6      	bne.n	3354 <memcpy+0x16>
    3366:	f022 0403 	bic.w	r4, r2, #3
    336a:	1f1d      	subs	r5, r3, #4
    336c:	0896      	lsrs	r6, r2, #2
    336e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3370:	42b9      	cmp	r1, r7
    3372:	d105      	bne.n	3380 <memcpy+0x42>
    3374:	f06f 0503 	mvn.w	r5, #3
    3378:	fb05 2206 	mla	r2, r5, r6, r2
    337c:	4423      	add	r3, r4
    337e:	e7e4      	b.n	334a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3380:	f851 cb04 	ldr.w	ip, [r1], #4
    3384:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    3388:	e7f2      	b.n	3370 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    338a:	f811 4b01 	ldrb.w	r4, [r1], #1
    338e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3392:	e7dc      	b.n	334e <memcpy+0x10>

00003394 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    3394:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    3396:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    3398:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    339a:	079c      	lsls	r4, r3, #30
    339c:	d111      	bne.n	33c2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    339e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    33a2:	f022 0603 	bic.w	r6, r2, #3
    33a6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    33aa:	441e      	add	r6, r3
    33ac:	0894      	lsrs	r4, r2, #2
    33ae:	42b3      	cmp	r3, r6
    33b0:	d10d      	bne.n	33ce <memset+0x3a>
    33b2:	f06f 0503 	mvn.w	r5, #3
    33b6:	fb05 2204 	mla	r2, r5, r4, r2
    33ba:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    33bc:	4293      	cmp	r3, r2
    33be:	d109      	bne.n	33d4 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    33c0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    33c2:	2a00      	cmp	r2, #0
    33c4:	d0fc      	beq.n	33c0 <memset+0x2c>
		*(d_byte++) = c_byte;
    33c6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    33ca:	3a01      	subs	r2, #1
    33cc:	e7e5      	b.n	339a <memset+0x6>
		*(d_word++) = c_word;
    33ce:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    33d2:	e7ec      	b.n	33ae <memset+0x1a>
		*(d_byte++) = c_byte;
    33d4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    33d8:	e7f0      	b.n	33bc <memset+0x28>

000033da <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    33da:	f7fe b957 	b.w	168c <SystemInit>

000033de <gpio_nrfx_write>:
{
    33de:	b510      	push	{r4, lr}
	return port->config->config_info;
    33e0:	6804      	ldr	r4, [r0, #0]
    33e2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    33e4:	68a4      	ldr	r4, [r4, #8]
    33e6:	69c0      	ldr	r0, [r0, #28]
    33e8:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    33ea:	2901      	cmp	r1, #1
    33ec:	d104      	bne.n	33f8 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    33ee:	4043      	eors	r3, r0
    p_reg->OUT = value;
    33f0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
}
    33f4:	2000      	movs	r0, #0
    33f6:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    33f8:	3b00      	subs	r3, #0
    33fa:	fa20 f002 	lsr.w	r0, r0, r2
    33fe:	f04f 0101 	mov.w	r1, #1
    3402:	bf18      	it	ne
    3404:	2301      	movne	r3, #1
    3406:	f000 0001 	and.w	r0, r0, #1
    340a:	4091      	lsls	r1, r2
    340c:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    340e:	bf14      	ite	ne
    3410:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    3414:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
}
    3418:	e7ec      	b.n	33f4 <gpio_nrfx_write+0x16>

0000341a <gpio_nrfx_read>:
{
    341a:	b5f0      	push	{r4, r5, r6, r7, lr}
    341c:	4605      	mov	r5, r0
	return port->config->config_info;
    341e:	6800      	ldr	r0, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3420:	6880      	ldr	r0, [r0, #8]
    3422:	6806      	ldr	r6, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    3424:	68a8      	ldr	r0, [r5, #8]
    return p_reg->DIR;
    3426:	f8d6 7514 	ldr.w	r7, [r6, #1300]	; 0x514
    342a:	69c0      	ldr	r0, [r0, #28]
    return p_reg->IN;
    342c:	f8d6 4510 	ldr.w	r4, [r6, #1296]	; 0x510
    return p_reg->OUT;
    3430:	f8d6 6504 	ldr.w	r6, [r6, #1284]	; 0x504
    3434:	4060      	eors	r0, r4
    3436:	4074      	eors	r4, r6
    3438:	403c      	ands	r4, r7
    343a:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    343c:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    343e:	bf1c      	itt	ne
    3440:	40d0      	lsrne	r0, r2
    3442:	f000 0001 	andne.w	r0, r0, #1
    3446:	6018      	str	r0, [r3, #0]
}
    3448:	2000      	movs	r0, #0
    344a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000344c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    344c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    344e:	6818      	ldr	r0, [r3, #0]
{
    3450:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    3452:	b158      	cbz	r0, 346c <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3454:	2400      	movs	r4, #0
    3456:	4281      	cmp	r1, r0
    3458:	d113      	bne.n	3482 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    345a:	6808      	ldr	r0, [r1, #0]
    345c:	b95c      	cbnz	r4, 3476 <gpio_nrfx_manage_callback+0x2a>
    345e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    3460:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    3462:	42a1      	cmp	r1, r4
    3464:	d100      	bne.n	3468 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3466:	6058      	str	r0, [r3, #4]
	parent->next = child;
    3468:	2000      	movs	r0, #0
    346a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    346c:	b972      	cbnz	r2, 348c <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    346e:	2000      	movs	r0, #0
}
    3470:	bd30      	pop	{r4, r5, pc}
    3472:	4628      	mov	r0, r5
    3474:	e7ef      	b.n	3456 <gpio_nrfx_manage_callback+0xa>
    3476:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3478:	6858      	ldr	r0, [r3, #4]
    347a:	4281      	cmp	r1, r0
	list->tail = node;
    347c:	bf08      	it	eq
    347e:	605c      	streq	r4, [r3, #4]
}
    3480:	e7f2      	b.n	3468 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3482:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3484:	4604      	mov	r4, r0
    3486:	2d00      	cmp	r5, #0
    3488:	d1f3      	bne.n	3472 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    348a:	b13a      	cbz	r2, 349c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    348c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    348e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    3490:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    3492:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    3494:	2800      	cmp	r0, #0
    3496:	d1ea      	bne.n	346e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3498:	6059      	str	r1, [r3, #4]
}
    349a:	e7e9      	b.n	3470 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    349c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    34a0:	e7e6      	b.n	3470 <gpio_nrfx_manage_callback+0x24>

000034a2 <gpio_nrfx_config>:
{
    34a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    34a6:	f403 4470 	and.w	r4, r3, #61440	; 0xf000
    34aa:	f5b4 4fa0 	cmp.w	r4, #20480	; 0x5000
	struct gpio_nrfx_data *data = get_port_data(port);
    34ae:	6886      	ldr	r6, [r0, #8]
{
    34b0:	4680      	mov	r8, r0
    34b2:	461f      	mov	r7, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    34b4:	d042      	beq.n	353c <gpio_nrfx_config+0x9a>
    34b6:	dc0f      	bgt.n	34d8 <gpio_nrfx_config+0x36>
    34b8:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
    34bc:	d040      	beq.n	3540 <gpio_nrfx_config+0x9e>
    34be:	dc06      	bgt.n	34ce <gpio_nrfx_config+0x2c>
    34c0:	b1a4      	cbz	r4, 34ec <gpio_nrfx_config+0x4a>
    34c2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    34c6:	d03d      	beq.n	3544 <gpio_nrfx_config+0xa2>
    34c8:	f06f 0015 	mvn.w	r0, #21
    34cc:	e033      	b.n	3536 <gpio_nrfx_config+0x94>
    34ce:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    34d2:	d1f9      	bne.n	34c8 <gpio_nrfx_config+0x26>
		drive = NRF_GPIO_PIN_S0H1;
    34d4:	2402      	movs	r4, #2
    34d6:	e009      	b.n	34ec <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    34d8:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
    34dc:	d034      	beq.n	3548 <gpio_nrfx_config+0xa6>
    34de:	f5b4 4f50 	cmp.w	r4, #53248	; 0xd000
    34e2:	d033      	beq.n	354c <gpio_nrfx_config+0xaa>
    34e4:	f5b4 4fe0 	cmp.w	r4, #28672	; 0x7000
    34e8:	d1ee      	bne.n	34c8 <gpio_nrfx_config+0x26>
		drive = NRF_GPIO_PIN_D0H1;
    34ea:	2405      	movs	r4, #5
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    34ec:	f407 7040 	and.w	r0, r7, #768	; 0x300
    34f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    34f4:	d02c      	beq.n	3550 <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_NOPULL;
    34f6:	f5a0 7500 	sub.w	r5, r0, #512	; 0x200
    34fa:	4268      	negs	r0, r5
    34fc:	4168      	adcs	r0, r5
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    34fe:	f007 0c01 	and.w	ip, r7, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    3502:	ea4f 034c 	mov.w	r3, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3506:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3508:	ea43 030c 	orr.w	r3, r3, ip
    350c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
		from_pin = pin;
    3510:	bf18      	it	ne
    3512:	b2d5      	uxtbne	r5, r2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3514:	f007 0302 	and.w	r3, r7, #2
		to_pin   = pin;
    3518:	bf12      	itee	ne
    351a:	46a9      	movne	r9, r5
		to_pin   = 31U;
    351c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    3520:	2500      	moveq	r5, #0
    3522:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3526:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    352a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    352e:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3530:	45a9      	cmp	r9, r5
    3532:	d20f      	bcs.n	3554 <gpio_nrfx_config+0xb2>
	return 0;
    3534:	2000      	movs	r0, #0
}
    3536:	b003      	add	sp, #12
    3538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_H0H1;
    353c:	2403      	movs	r4, #3
    353e:	e7d5      	b.n	34ec <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    3540:	2404      	movs	r4, #4
    3542:	e7d3      	b.n	34ec <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    3544:	2401      	movs	r4, #1
    3546:	e7d1      	b.n	34ec <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    3548:	2406      	movs	r4, #6
    354a:	e7cf      	b.n	34ec <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0D1;
    354c:	2407      	movs	r4, #7
    354e:	e7cd      	b.n	34ec <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    3550:	2003      	movs	r0, #3
    3552:	e7d4      	b.n	34fe <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    3554:	f8d8 3000 	ldr.w	r3, [r8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3558:	9901      	ldr	r1, [sp, #4]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    355a:	689b      	ldr	r3, [r3, #8]
    355c:	791a      	ldrb	r2, [r3, #4]
    355e:	f005 031f 	and.w	r3, r5, #31
    3562:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    3566:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    356a:	f84a 4023 	str.w	r4, [sl, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    356e:	fa0b f305 	lsl.w	r3, fp, r5
    3572:	68b2      	ldr	r2, [r6, #8]
    3574:	b319      	cbz	r1, 35be <gpio_nrfx_config+0x11c>
    3576:	431a      	orrs	r2, r3
    3578:	60b2      	str	r2, [r6, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    357a:	6972      	ldr	r2, [r6, #20]
    357c:	06b8      	lsls	r0, r7, #26
    357e:	bf4c      	ite	mi
    3580:	431a      	orrmi	r2, r3
    3582:	439a      	bicpl	r2, r3
    3584:	6172      	str	r2, [r6, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    3586:	69b2      	ldr	r2, [r6, #24]
    3588:	0679      	lsls	r1, r7, #25
    358a:	bf4c      	ite	mi
    358c:	431a      	orrmi	r2, r3
    358e:	439a      	bicpl	r2, r3
    3590:	61b2      	str	r2, [r6, #24]
		WRITE_BIT(data->active_level, curr_pin,
    3592:	6932      	ldr	r2, [r6, #16]
    3594:	0778      	lsls	r0, r7, #29
    3596:	bf4c      	ite	mi
    3598:	431a      	orrmi	r2, r3
    359a:	439a      	bicpl	r2, r3
    359c:	6132      	str	r2, [r6, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    359e:	69f2      	ldr	r2, [r6, #28]
    35a0:	0639      	lsls	r1, r7, #24
    35a2:	bf4c      	ite	mi
    35a4:	4313      	orrmi	r3, r2
    35a6:	ea22 0303 	bicpl.w	r3, r2, r3
    35aa:	61f3      	str	r3, [r6, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    35ac:	4629      	mov	r1, r5
    35ae:	4640      	mov	r0, r8
    35b0:	f7fd fd18 	bl	fe4 <gpiote_pin_int_cfg>
		if (res != 0) {
    35b4:	2800      	cmp	r0, #0
    35b6:	d1be      	bne.n	3536 <gpio_nrfx_config+0x94>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    35b8:	3501      	adds	r5, #1
    35ba:	b2ed      	uxtb	r5, r5
    35bc:	e7b8      	b.n	3530 <gpio_nrfx_config+0x8e>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    35be:	ea22 0203 	bic.w	r2, r2, r3
    35c2:	e7d9      	b.n	3578 <gpio_nrfx_config+0xd6>

000035c4 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    35c4:	2901      	cmp	r1, #1
{
    35c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    35ca:	bf18      	it	ne
    35cc:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    35ce:	6887      	ldr	r7, [r0, #8]
{
    35d0:	4605      	mov	r5, r0
		to_pin   = pin;
    35d2:	bf12      	itee	ne
    35d4:	4626      	movne	r6, r4
		to_pin   = 31U;
    35d6:	261f      	moveq	r6, #31
		from_pin = 0U;
    35d8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    35da:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    35de:	42b4      	cmp	r4, r6
    35e0:	d902      	bls.n	35e8 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    35e2:	2000      	movs	r0, #0
}
    35e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    35e8:	68fb      	ldr	r3, [r7, #12]
    35ea:	fa08 f204 	lsl.w	r2, r8, r4
    35ee:	ea23 0302 	bic.w	r3, r3, r2
    35f2:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    35f4:	4621      	mov	r1, r4
    35f6:	4628      	mov	r0, r5
    35f8:	f7fd fcf4 	bl	fe4 <gpiote_pin_int_cfg>
		if (res != 0) {
    35fc:	2800      	cmp	r0, #0
    35fe:	d1f1      	bne.n	35e4 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3600:	3401      	adds	r4, #1
    3602:	b2e4      	uxtb	r4, r4
    3604:	e7eb      	b.n	35de <gpio_nrfx_pin_disable_callback+0x1a>

00003606 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3606:	2901      	cmp	r1, #1
{
    3608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    360c:	bf18      	it	ne
    360e:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    3610:	6887      	ldr	r7, [r0, #8]
{
    3612:	4605      	mov	r5, r0
		to_pin   = pin;
    3614:	bf12      	itee	ne
    3616:	4626      	movne	r6, r4
		to_pin   = 31U;
    3618:	261f      	moveq	r6, #31
		from_pin = 0U;
    361a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    361c:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3620:	42b4      	cmp	r4, r6
    3622:	d902      	bls.n	362a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    3624:	2000      	movs	r0, #0
}
    3626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    362a:	68fb      	ldr	r3, [r7, #12]
    362c:	fa08 f204 	lsl.w	r2, r8, r4
    3630:	4313      	orrs	r3, r2
    3632:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3634:	4621      	mov	r1, r4
    3636:	4628      	mov	r0, r5
    3638:	f7fd fcd4 	bl	fe4 <gpiote_pin_int_cfg>
		if (res != 0) {
    363c:	2800      	cmp	r0, #0
    363e:	d1f2      	bne.n	3626 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3640:	3401      	adds	r4, #1
    3642:	b2e4      	uxtb	r4, r4
    3644:	e7ec      	b.n	3620 <gpio_nrfx_pin_enable_callback+0x1a>

00003646 <i2c_nrfx_twi_configure>:
	return dev->config->config_info;
    3646:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
    3648:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
    364a:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    364c:	d405      	bmi.n	365a <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    364e:	f3c1 0242 	ubfx	r2, r1, #1, #3
    3652:	2a01      	cmp	r2, #1
    3654:	d004      	beq.n	3660 <i2c_nrfx_twi_configure+0x1a>
    3656:	2a02      	cmp	r2, #2
    3658:	d00b      	beq.n	3672 <i2c_nrfx_twi_configure+0x2c>
		return -EINVAL;
    365a:	f06f 0015 	mvn.w	r0, #21
}
    365e:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    3660:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    3662:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    3666:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    366a:	6883      	ldr	r3, [r0, #8]
	return 0;
    366c:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    366e:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    3670:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    3678:	e7f5      	b.n	3666 <i2c_nrfx_twi_configure+0x20>

0000367a <gpio_pin_write>:
{
    367a:	b410      	push	{r4}
    367c:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
    367e:	6842      	ldr	r2, [r0, #4]
    3680:	6854      	ldr	r4, [r2, #4]
    3682:	460a      	mov	r2, r1
    3684:	46a4      	mov	ip, r4
    3686:	2100      	movs	r1, #0
}
    3688:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    368a:	4760      	bx	ip

0000368c <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    368c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    368e:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    3690:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    3692:	b325      	cbz	r5, 36de <_spi_context_cs_control.isra.0+0x52>
    3694:	68ab      	ldr	r3, [r5, #8]
    3696:	b313      	cbz	r3, 36de <_spi_context_cs_control.isra.0+0x52>
    3698:	6818      	ldr	r0, [r3, #0]
    369a:	b300      	cbz	r0, 36de <_spi_context_cs_control.isra.0+0x52>
		if (on) {
    369c:	b161      	cbz	r1, 36b8 <_spi_context_cs_control.isra.0+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    369e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    36a2:	6859      	ldr	r1, [r3, #4]
    36a4:	0fd2      	lsrs	r2, r2, #31
    36a6:	f7ff ffe8 	bl	367a <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
    36aa:	6823      	ldr	r3, [r4, #0]
    36ac:	689b      	ldr	r3, [r3, #8]
    36ae:	6898      	ldr	r0, [r3, #8]
}
    36b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    36b4:	f000 ba03 	b.w	3abe <z_impl_k_busy_wait>
			if (!force_off &&
    36b8:	b912      	cbnz	r2, 36c0 <_spi_context_cs_control.isra.0+0x34>
    36ba:	88aa      	ldrh	r2, [r5, #4]
    36bc:	0492      	lsls	r2, r2, #18
    36be:	d40e      	bmi.n	36de <_spi_context_cs_control.isra.0+0x52>
			k_busy_wait(ctx->config->cs->delay);
    36c0:	6898      	ldr	r0, [r3, #8]
    36c2:	f000 f9fc 	bl	3abe <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
    36c6:	6822      	ldr	r2, [r4, #0]
    36c8:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    36ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    36ce:	43d2      	mvns	r2, r2
    36d0:	e9d3 0100 	ldrd	r0, r1, [r3]
    36d4:	0fd2      	lsrs	r2, r2, #31
}
    36d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
    36da:	f7ff bfce 	b.w	367a <gpio_pin_write>
}
    36de:	bd38      	pop	{r3, r4, r5, pc}

000036e0 <spi_context_unlock_unconditionally>:
{
    36e0:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    36e2:	2201      	movs	r2, #1
    36e4:	2100      	movs	r1, #0
{
    36e6:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    36e8:	f7ff ffd0 	bl	368c <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
    36ec:	68e3      	ldr	r3, [r4, #12]
    36ee:	b923      	cbnz	r3, 36fa <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
    36f0:	1d20      	adds	r0, r4, #4
}
    36f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f6:	f7ff b907 	b.w	2908 <z_impl_k_sem_give>
    36fa:	bd10      	pop	{r4, pc}

000036fc <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    36fc:	6880      	ldr	r0, [r0, #8]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    36fe:	6803      	ldr	r3, [r0, #0]
    3700:	428b      	cmp	r3, r1
{
    3702:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    3704:	d106      	bne.n	3714 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    3706:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
    370a:	b934      	cbnz	r4, 371a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    370c:	f7ff ffe8 	bl	36e0 <spi_context_unlock_unconditionally>
	return 0;
    3710:	4620      	mov	r0, r4
}
    3712:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3714:	f06f 0015 	mvn.w	r0, #21
    3718:	e7fb      	b.n	3712 <spi_nrfx_release+0x16>
		return -EBUSY;
    371a:	f06f 000f 	mvn.w	r0, #15
    371e:	e7f8      	b.n	3712 <spi_nrfx_release+0x16>

00003720 <event_handler>:
{
    3720:	b410      	push	{r4}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    3722:	7803      	ldrb	r3, [r0, #0]
    3724:	2b00      	cmp	r3, #0
    3726:	d139      	bne.n	379c <event_handler+0x7c>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    3728:	688b      	ldr	r3, [r1, #8]
	if (!ctx->tx_len) {
    372a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    372c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    372e:	b184      	cbz	r4, 3752 <event_handler+0x32>
	if (len > ctx->tx_len) {
    3730:	42a2      	cmp	r2, r4
    3732:	d80e      	bhi.n	3752 <event_handler+0x32>
	ctx->tx_len -= len;
    3734:	1aa4      	subs	r4, r4, r2
    3736:	63dc      	str	r4, [r3, #60]	; 0x3c
	if (!ctx->tx_len) {
    3738:	bb24      	cbnz	r4, 3784 <event_handler+0x64>
		ctx->tx_count--;
    373a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    373c:	3c01      	subs	r4, #1
    373e:	62dc      	str	r4, [r3, #44]	; 0x2c
		if (ctx->tx_count) {
    3740:	b1f4      	cbz	r4, 3780 <event_handler+0x60>
			ctx->current_tx++;
    3742:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3744:	f100 0408 	add.w	r4, r0, #8
    3748:	629c      	str	r4, [r3, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    374a:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    374c:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    374e:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    3750:	63d8      	str	r0, [r3, #60]	; 0x3c
	if (!ctx->rx_len) {
    3752:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    3754:	b184      	cbz	r4, 3778 <event_handler+0x58>
	if (len > ctx->rx_len) {
    3756:	42a2      	cmp	r2, r4
    3758:	d80e      	bhi.n	3778 <event_handler+0x58>
	ctx->rx_len -= len;
    375a:	1aa4      	subs	r4, r4, r2
    375c:	645c      	str	r4, [r3, #68]	; 0x44
	if (!ctx->rx_len) {
    375e:	b9bc      	cbnz	r4, 3790 <event_handler+0x70>
		ctx->rx_count--;
    3760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3762:	3a01      	subs	r2, #1
    3764:	635a      	str	r2, [r3, #52]	; 0x34
		if (ctx->rx_count) {
    3766:	b1ba      	cbz	r2, 3798 <event_handler+0x78>
			ctx->current_rx++;
    3768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    376a:	f102 0008 	add.w	r0, r2, #8
    376e:	6318      	str	r0, [r3, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3770:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    3772:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3774:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    3776:	645a      	str	r2, [r3, #68]	; 0x44
}
    3778:	bc10      	pop	{r4}
		transfer_next_chunk(dev);
    377a:	4608      	mov	r0, r1
    377c:	f7fd be52 	b.w	1424 <transfer_next_chunk>
			ctx->tx_buf = NULL;
    3780:	639c      	str	r4, [r3, #56]	; 0x38
    3782:	e7e6      	b.n	3752 <event_handler+0x32>
	} else if (ctx->tx_buf) {
    3784:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3786:	2800      	cmp	r0, #0
    3788:	d0e3      	beq.n	3752 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
    378a:	4410      	add	r0, r2
    378c:	6398      	str	r0, [r3, #56]	; 0x38
    378e:	e7e0      	b.n	3752 <event_handler+0x32>
	} else if (ctx->rx_buf) {
    3790:	6c18      	ldr	r0, [r3, #64]	; 0x40
    3792:	2800      	cmp	r0, #0
    3794:	d0f0      	beq.n	3778 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
    3796:	4402      	add	r2, r0
    3798:	641a      	str	r2, [r3, #64]	; 0x40
    379a:	e7ed      	b.n	3778 <event_handler+0x58>
}
    379c:	bc10      	pop	{r4}
    379e:	4770      	bx	lr

000037a0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    37a0:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    37a2:	2000      	movs	r0, #0
    37a4:	f7fd fbe6 	bl	f74 <sys_arch_reboot>

000037a8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    37a8:	4700      	bx	r0

000037aa <transfer_byte>:
{
    37aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    37ac:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    37b0:	698a      	ldr	r2, [r1, #24]
    37b2:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    37b4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    37b8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    37ba:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    37bc:	bf3e      	ittt	cc
    37be:	694a      	ldrcc	r2, [r1, #20]
    37c0:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    37c4:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    37c6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    if (p_cb->abort)
    37c8:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    ++p_cb->bytes_transferred;
    37cc:	1c53      	adds	r3, r2, #1
    37ce:	624b      	str	r3, [r1, #36]	; 0x24
    size_t bytes_used = p_cb->bytes_transferred + 1;
    37d0:	3202      	adds	r2, #2
    if (p_cb->abort)
    37d2:	b13c      	cbz	r4, 37e4 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    37d4:	690c      	ldr	r4, [r1, #16]
    37d6:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    37d8:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    37da:	bf38      	it	cc
    37dc:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    37de:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    37e0:	bf88      	it	hi
    37e2:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    37e4:	690d      	ldr	r5, [r1, #16]
    37e6:	4295      	cmp	r5, r2
    37e8:	d905      	bls.n	37f6 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    37ea:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    37ec:	5c9b      	ldrb	r3, [r3, r2]
    37ee:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    37f2:	2001      	movs	r0, #1
    37f4:	e00b      	b.n	380e <transfer_byte+0x64>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    37f6:	698c      	ldr	r4, [r1, #24]
    37f8:	4294      	cmp	r4, r2
    37fa:	d902      	bls.n	3802 <transfer_byte+0x58>
    37fc:	f891 3020 	ldrb.w	r3, [r1, #32]
    3800:	e7f5      	b.n	37ee <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    3802:	42ab      	cmp	r3, r5
    3804:	d3f5      	bcc.n	37f2 <transfer_byte+0x48>
    3806:	42a3      	cmp	r3, r4
    3808:	bf2c      	ite	cs
    380a:	2000      	movcs	r0, #0
    380c:	2001      	movcc	r0, #1
}
    380e:	b003      	add	sp, #12
    3810:	bd30      	pop	{r4, r5, pc}

00003812 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3812:	2300      	movs	r3, #0
    3814:	5043      	str	r3, [r0, r1]
{
    3816:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3818:	5843      	ldr	r3, [r0, r1]
    381a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    381c:	9b01      	ldr	r3, [sp, #4]
}
    381e:	b002      	add	sp, #8
    3820:	4770      	bx	lr

00003822 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    3822:	6b4a      	ldr	r2, [r1, #52]	; 0x34
{
    3824:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    3826:	6a88      	ldr	r0, [r1, #40]	; 0x28
    3828:	4282      	cmp	r2, r0
    382a:	d207      	bcs.n	383c <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    382c:	6a48      	ldr	r0, [r1, #36]	; 0x24
    p_reg->TXD = data;
    382e:	5c80      	ldrb	r0, [r0, r2]
    3830:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
    3834:	3201      	adds	r2, #1
    3836:	634a      	str	r2, [r1, #52]	; 0x34
    return true;
    3838:	2001      	movs	r0, #1
    383a:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
    383c:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    3840:	b118      	cbz	r0, 384a <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3842:	2201      	movs	r2, #1
    3844:	61da      	str	r2, [r3, #28]
            return false;
    3846:	2000      	movs	r0, #0
    3848:	4770      	bx	lr
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    384a:	6a0a      	ldr	r2, [r1, #32]
    384c:	f012 0f40 	tst.w	r2, #64	; 0x40
    3850:	f04f 0201 	mov.w	r2, #1
    3854:	d003      	beq.n	385e <twi_send_byte+0x3c>
    3856:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    3858:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    385c:	4770      	bx	lr
    385e:	615a      	str	r2, [r3, #20]
    3860:	e7ea      	b.n	3838 <twi_send_byte+0x16>

00003862 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    3862:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
    3866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3868:	4604      	mov	r4, r0
    386a:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    386c:	2a00      	cmp	r2, #0
    386e:	d160      	bne.n	3932 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3870:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    3874:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    3876:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    3878:	b1b3      	cbz	r3, 38a8 <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    387a:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    387e:	f7ff ffc8 	bl	3812 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3882:	2301      	movs	r3, #1
    3884:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    3886:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    388a:	42be      	cmp	r6, r7
    388c:	d14f      	bne.n	392e <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    388e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3892:	2b00      	cmp	r3, #0
    3894:	d04b      	beq.n	392e <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    3896:	f44f 7182 	mov.w	r1, #260	; 0x104
    389a:	4620      	mov	r0, r4
    389c:	f7ff ffb9 	bl	3812 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    38a0:	2200      	movs	r2, #0
    38a2:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
    38a6:	e013      	b.n	38d0 <twi_transfer+0x6e>
    38a8:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    38ac:	b193      	cbz	r3, 38d4 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    38ae:	f44f 718e 	mov.w	r1, #284	; 0x11c
    38b2:	f7ff ffae 	bl	3812 <nrf_twi_event_clear>
    38b6:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    38ba:	b11b      	cbz	r3, 38c4 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    38bc:	f44f 7192 	mov.w	r1, #292	; 0x124
    38c0:	4620      	mov	r0, r4
    38c2:	e7dc      	b.n	387e <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
    38c4:	4629      	mov	r1, r5
    38c6:	f7ff ffac 	bl	3822 <twi_send_byte>
    38ca:	4602      	mov	r2, r0
    38cc:	2800      	cmp	r0, #0
    38ce:	d1dc      	bne.n	388a <twi_transfer+0x28>
}
    38d0:	4610      	mov	r0, r2
    38d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38d4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    38d8:	2b00      	cmp	r3, #0
    38da:	d0d6      	beq.n	388a <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    38dc:	f44f 7184 	mov.w	r1, #264	; 0x108
    38e0:	f7ff ff97 	bl	3812 <nrf_twi_event_clear>
    38e4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    38e8:	2b00      	cmp	r3, #0
    38ea:	d1e7      	bne.n	38bc <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    38ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    38ee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    38f0:	428b      	cmp	r3, r1
    38f2:	d2ca      	bcs.n	388a <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    38f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    38f6:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    38fa:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
    38fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    38fe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    3900:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3902:	1e48      	subs	r0, r1, #1
    3904:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
    3906:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3908:	d108      	bne.n	391c <twi_transfer+0xba>
    390a:	6a28      	ldr	r0, [r5, #32]
    390c:	0640      	lsls	r0, r0, #25
    390e:	d41d      	bmi.n	394c <twi_transfer+0xea>
    p_reg->SHORTS = mask;
    3910:	2302      	movs	r3, #2
    3912:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3916:	2301      	movs	r3, #1
    3918:	6223      	str	r3, [r4, #32]
    391a:	e7b6      	b.n	388a <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    391c:	428b      	cmp	r3, r1
    391e:	d1fa      	bne.n	3916 <twi_transfer+0xb4>
    3920:	6a2b      	ldr	r3, [r5, #32]
    3922:	065b      	lsls	r3, r3, #25
    3924:	d5b1      	bpl.n	388a <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    3926:	2302      	movs	r3, #2
    3928:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    392c:	e7d0      	b.n	38d0 <twi_transfer+0x6e>
    return true;
    392e:	2201      	movs	r2, #1
    3930:	e7ce      	b.n	38d0 <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    3932:	f44f 7192 	mov.w	r1, #292	; 0x124
    3936:	f7ff ff6c 	bl	3812 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    393a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    393e:	f7ff ff68 	bl	3812 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    3942:	f44f 7184 	mov.w	r1, #264	; 0x108
    3946:	f7ff ff64 	bl	3812 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    394a:	e7a0      	b.n	388e <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    394c:	428b      	cmp	r3, r1
    394e:	d1e2      	bne.n	3916 <twi_transfer+0xb4>
    3950:	e7e9      	b.n	3926 <twi_transfer+0xc4>

00003952 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3952:	b570      	push	{r4, r5, r6, lr}
    3954:	4605      	mov	r5, r0
    3956:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3958:	f7fe ffd0 	bl	28fc <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    395c:	4631      	mov	r1, r6
    395e:	4604      	mov	r4, r0
    3960:	4628      	mov	r0, r5
    3962:	f7ff ff1d 	bl	37a0 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3966:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    3968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    396c:	f7fd ba02 	b.w	d74 <z_impl_k_thread_abort>

00003970 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3970:	f7ff bcc1 	b.w	32f6 <z_clock_idle_exit>

00003974 <k_mem_pool_malloc>:
{
    3974:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    3976:	2404      	movs	r4, #4
    3978:	190a      	adds	r2, r1, r4
    397a:	d204      	bcs.n	3986 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    397c:	2300      	movs	r3, #0
    397e:	4669      	mov	r1, sp
    3980:	f7fe fc4c 	bl	221c <k_mem_pool_alloc>
    3984:	b110      	cbz	r0, 398c <k_mem_pool_malloc+0x18>
		return NULL;
    3986:	2000      	movs	r0, #0
}
    3988:	b002      	add	sp, #8
    398a:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    398c:	9800      	ldr	r0, [sp, #0]
    398e:	4622      	mov	r2, r4
    3990:	a901      	add	r1, sp, #4
    3992:	f7ff fcd4 	bl	333e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
    3996:	9800      	ldr	r0, [sp, #0]
    3998:	3004      	adds	r0, #4
    399a:	e7f5      	b.n	3988 <k_mem_pool_malloc+0x14>

0000399c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    399c:	7b43      	ldrb	r3, [r0, #13]
    399e:	06db      	lsls	r3, r3, #27
    39a0:	bf03      	ittte	eq
    39a2:	6980      	ldreq	r0, [r0, #24]
    39a4:	fab0 f080 	clzeq	r0, r0
    39a8:	0940      	lsreq	r0, r0, #5
    39aa:	2000      	movne	r0, #0
}
    39ac:	4770      	bx	lr

000039ae <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    39ae:	b921      	cbnz	r1, 39ba <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    39b0:	f3ef 8005 	mrs	r0, IPSR
    39b4:	b908      	cbnz	r0, 39ba <z_reschedule+0xc>
    39b6:	f7fc bfe5 	b.w	984 <arch_swap>
    39ba:	f381 8811 	msr	BASEPRI, r1
    39be:	f3bf 8f6f 	isb	sy
}
    39c2:	4770      	bx	lr

000039c4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    39c4:	4603      	mov	r3, r0
    39c6:	b920      	cbnz	r0, 39d2 <z_reschedule_irqlock+0xe>
    39c8:	f3ef 8205 	mrs	r2, IPSR
    39cc:	b90a      	cbnz	r2, 39d2 <z_reschedule_irqlock+0xe>
    39ce:	f7fc bfd9 	b.w	984 <arch_swap>
    39d2:	f383 8811 	msr	BASEPRI, r3
    39d6:	f3bf 8f6f 	isb	sy
}
    39da:	4770      	bx	lr

000039dc <z_reschedule_unlocked>:
	__asm__ volatile(
    39dc:	f04f 0320 	mov.w	r3, #32
    39e0:	f3ef 8011 	mrs	r0, BASEPRI
    39e4:	f383 8811 	msr	BASEPRI, r3
    39e8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    39ec:	f7ff bfea 	b.w	39c4 <z_reschedule_irqlock>

000039f0 <z_priq_dumb_best>:
{
    39f0:	4603      	mov	r3, r0
	return list->head == list;
    39f2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39f4:	4283      	cmp	r3, r0
    39f6:	d003      	beq.n	3a00 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    39f8:	2800      	cmp	r0, #0
    39fa:	bf38      	it	cc
    39fc:	2000      	movcc	r0, #0
    39fe:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3a00:	2000      	movs	r0, #0
}
    3a02:	4770      	bx	lr

00003a04 <z_thread_timeout>:
{
    3a04:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    3a06:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3a0a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    3a0c:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    3a10:	b1c3      	cbz	r3, 3a44 <z_thread_timeout+0x40>
    3a12:	f04f 0320 	mov.w	r3, #32
    3a16:	f3ef 8511 	mrs	r5, BASEPRI
    3a1a:	f383 8811 	msr	BASEPRI, r3
    3a1e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3a22:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3a26:	f7fe fc9f 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3a2a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3a2e:	f023 0302 	bic.w	r3, r3, #2
    3a32:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3a36:	f385 8811 	msr	BASEPRI, r5
    3a3a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3a3e:	2300      	movs	r3, #0
    3a40:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3a44:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3a48:	f023 0314 	bic.w	r3, r3, #20
    3a4c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3a50:	4608      	mov	r0, r1
    3a52:	f7ff ffa3 	bl	399c <z_is_thread_ready>
    3a56:	b120      	cbz	r0, 3a62 <z_thread_timeout+0x5e>
}
    3a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_add_thread_to_ready_q(thread);
    3a5c:	4608      	mov	r0, r1
    3a5e:	f7fe bcd3 	b.w	2408 <z_add_thread_to_ready_q>
    3a62:	bd38      	pop	{r3, r4, r5, pc}

00003a64 <z_unpend_first_thread>:
{
    3a64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3a66:	f04f 0320 	mov.w	r3, #32
    3a6a:	f3ef 8211 	mrs	r2, BASEPRI
    3a6e:	f383 8811 	msr	BASEPRI, r3
    3a72:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3a76:	f7ff ffbb 	bl	39f0 <z_priq_dumb_best>
    3a7a:	4604      	mov	r4, r0
	__asm__ volatile(
    3a7c:	f382 8811 	msr	BASEPRI, r2
    3a80:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3a84:	b1c8      	cbz	r0, 3aba <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3a86:	f04f 0320 	mov.w	r3, #32
    3a8a:	f3ef 8511 	mrs	r5, BASEPRI
    3a8e:	f383 8811 	msr	BASEPRI, r3
    3a92:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3a96:	4601      	mov	r1, r0
    3a98:	6880      	ldr	r0, [r0, #8]
    3a9a:	f7fe fc65 	bl	2368 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3a9e:	7b63      	ldrb	r3, [r4, #13]
    3aa0:	f023 0302 	bic.w	r3, r3, #2
    3aa4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3aa6:	f385 8811 	msr	BASEPRI, r5
    3aaa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3aae:	2300      	movs	r3, #0
    3ab0:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    3ab2:	f104 0018 	add.w	r0, r4, #24
    3ab6:	f000 f813 	bl	3ae0 <z_abort_timeout>
}
    3aba:	4620      	mov	r0, r4
    3abc:	bd38      	pop	{r3, r4, r5, pc}

00003abe <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    3abe:	f7fd ba6f 	b.w	fa0 <arch_busy_wait>

00003ac2 <z_new_thread_init>:
{
    3ac2:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3ac4:	9c02      	ldr	r4, [sp, #8]
    3ac6:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    3ac8:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    3aca:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    3acc:	2300      	movs	r3, #0
	node->prev = NULL;
    3ace:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    3ad2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    3ad6:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
	thread_base->thread_state = (u8_t)initial_state;
    3ada:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    3adc:	73c3      	strb	r3, [r0, #15]
}
    3ade:	bd10      	pop	{r4, pc}

00003ae0 <z_abort_timeout>:
{
    3ae0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ae2:	f04f 0220 	mov.w	r2, #32
    3ae6:	f3ef 8411 	mrs	r4, BASEPRI
    3aea:	f382 8811 	msr	BASEPRI, r2
    3aee:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3af2:	6803      	ldr	r3, [r0, #0]
    3af4:	b13b      	cbz	r3, 3b06 <z_abort_timeout+0x26>
			remove_timeout(to);
    3af6:	f7ff f80f 	bl	2b18 <remove_timeout>
			ret = 0;
    3afa:	2000      	movs	r0, #0
	__asm__ volatile(
    3afc:	f384 8811 	msr	BASEPRI, r4
    3b00:	f3bf 8f6f 	isb	sy
}
    3b04:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3b06:	f06f 0015 	mvn.w	r0, #21
    3b0a:	e7f7      	b.n	3afc <z_abort_timeout+0x1c>

00003b0c <z_get_next_timeout_expiry>:
{
    3b0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3b0e:	f04f 0320 	mov.w	r3, #32
    3b12:	f3ef 8411 	mrs	r4, BASEPRI
    3b16:	f383 8811 	msr	BASEPRI, r3
    3b1a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3b1e:	f7ff f80f 	bl	2b40 <next_timeout>
	__asm__ volatile(
    3b22:	f384 8811 	msr	BASEPRI, r4
    3b26:	f3bf 8f6f 	isb	sy
}
    3b2a:	bd10      	pop	{r4, pc}

00003b2c <z_set_timeout_expiry>:
{
    3b2c:	b570      	push	{r4, r5, r6, lr}
    3b2e:	4604      	mov	r4, r0
    3b30:	460d      	mov	r5, r1
	__asm__ volatile(
    3b32:	f04f 0320 	mov.w	r3, #32
    3b36:	f3ef 8611 	mrs	r6, BASEPRI
    3b3a:	f383 8811 	msr	BASEPRI, r3
    3b3e:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    3b42:	f7fe fffd 	bl	2b40 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3b46:	2801      	cmp	r0, #1
    3b48:	dd05      	ble.n	3b56 <z_set_timeout_expiry+0x2a>
    3b4a:	42a0      	cmp	r0, r4
    3b4c:	dd03      	ble.n	3b56 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    3b4e:	4629      	mov	r1, r5
    3b50:	4620      	mov	r0, r4
    3b52:	f7fc fe99 	bl	888 <z_clock_set_timeout>
	__asm__ volatile(
    3b56:	f386 8811 	msr	BASEPRI, r6
    3b5a:	f3bf 8f6f 	isb	sy
}
    3b5e:	bd70      	pop	{r4, r5, r6, pc}

00003b60 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    3b60:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    3b62:	f7ff f89f 	bl	2ca4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    3b66:	bd08      	pop	{r3, pc}

00003b68 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
    3b68:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
    3b6a:	f7ff f89b 	bl	2ca4 <z_tick_get>
			return (t * to_hz + off) / from_hz;
    3b6e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3b72:	fba0 2304 	umull	r2, r3, r0, r4
    3b76:	fb04 3301 	mla	r3, r4, r1, r3
    3b7a:	0bd0      	lsrs	r0, r2, #15
}
    3b7c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    3b80:	0bd9      	lsrs	r1, r3, #15
    3b82:	bd10      	pop	{r4, pc}

00003b84 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    3b84:	4770      	bx	lr
